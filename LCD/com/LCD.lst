CCS PCH C Compiler, Version 5.015, 5967               09-ene.-21 18:15

               Filename:   D:\escuela\tesis\LCD\com\LCD.lst

               ROM used:   1168 bytes (4%)
                           Largest free fragment is 31600
               RAM used:   16 (1%) at main() level
                           25 (1%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0000:  GOTO   0392
.................... #include <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
*
0100:  MOVF   10,W
0102:  MULWF  12
0104:  MOVFF  FF3,01
0108:  MOVFF  FF4,00
010C:  MULWF  13
010E:  MOVF   FF3,W
0110:  ADDWF  00,F
0112:  MOVF   11,W
0114:  MULWF  12
0116:  MOVF   FF3,W
0118:  ADDWFC 00,W
011A:  MOVWF  02
011C:  RETURN 0
011E:  CLRF   01
0120:  CLRF   02
0122:  CLRF   00
0124:  CLRF   03
0126:  MOVF   13,W
0128:  BNZ   012E
012A:  MOVF   12,W
012C:  BZ    015E
012E:  MOVLW  10
0130:  MOVWF  14
0132:  BCF    FD8.0
0134:  RLCF   10,F
0136:  RLCF   11,F
0138:  RLCF   00,F
013A:  RLCF   03,F
013C:  MOVF   13,W
013E:  SUBWF  03,W
0140:  BNZ   0146
0142:  MOVF   12,W
0144:  SUBWF  00,W
0146:  BNC   0156
0148:  MOVF   12,W
014A:  SUBWF  00,F
014C:  BTFSS  FD8.0
014E:  DECF   03,F
0150:  MOVF   13,W
0152:  SUBWF  03,F
0154:  BSF    FD8.0
0156:  RLCF   01,F
0158:  RLCF   02,F
015A:  DECFSZ 14,F
015C:  BRA    0132
015E:  GOTO   0414 (RETURN)
0162:  MOVLW  8E
0164:  MOVWF  00
0166:  MOVFF  0F,01
016A:  MOVFF  0E,02
016E:  CLRF   03
0170:  MOVF   01,F
0172:  BNZ   0186
0174:  MOVFF  02,01
0178:  CLRF   02
017A:  MOVLW  08
017C:  SUBWF  00,F
017E:  MOVF   01,F
0180:  BNZ   0186
0182:  CLRF   00
0184:  BRA    0196
0186:  BCF    FD8.0
0188:  BTFSC  01.7
018A:  BRA    0194
018C:  RLCF   02,F
018E:  RLCF   01,F
0190:  DECF   00,F
0192:  BRA    0186
0194:  BCF    01.7
0196:  GOTO   0422 (RETURN)
*
0364:  ADDWF  FE8,W
0366:  CLRF   FF7
0368:  RLCF   FF7,F
036A:  ADDLW  7F
036C:  MOVWF  FF6
036E:  MOVLW  03
0370:  ADDWFC FF7,F
0372:  TBLRD*-
0374:  MOVF   FF5,W
0376:  MOVWF  FFA
0378:  TBLRD*
037A:  MOVF   FF5,W
037C:  MOVWF  FF9
037E:  DATA 8A,02
0380:  DATA 9E,02
0382:  DATA B2,02
0384:  DATA C6,02
0386:  DATA DA,02
0388:  DATA EE,02
038A:  DATA 02,03
038C:  DATA 16,03
038E:  DATA 2A,03
0390:  DATA 3E,03
....................  
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
0004:  CLRF   FEA
0006:  MOVLW  0E
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    002A
000E:  MOVLW  01
0010:  MOVWF  01
0012:  CLRF   00
0014:  DECFSZ 00,F
0016:  BRA    0014
0018:  DECFSZ 01,F
001A:  BRA    0012
001C:  MOVLW  4A
001E:  MOVWF  00
0020:  DECFSZ 00,F
0022:  BRA    0020
0024:  BRA    0026
0026:  DECFSZ FEF,F
0028:  BRA    000E
002A:  RETURN 0
.................... #fuses XT, NOWDT 
.................... //#include <math.h> 
....................  
.................... #USE STANDARD_IO(A) 
.................... #USE STANDARD_IO(B) 
.................... #USE STANDARD_IO(C) 
.................... #USE STANDARD_IO(D) 
.................... #USE STANDARD_IO(E) 
.................... int menu_move; 
.................... int pocision_menu=1; 
.................... int menu_select; 
.................... int menu_back; 
.................... int16 bits_sensor; 
.................... float numero; 
.................... //conexiones de LCD 
....................     #define LCD_RS PIN_C4 
....................     #define LCD_RW PIN_C5 
....................     #define LCD_EN PIN_C6 
....................  
....................     #define LCD_D0 PIN_D0 
....................     #define LCD_D1 PIN_D1 
....................     #define LCD_D2 PIN_D2 
....................     #define LCD_D3 PIN_D3 
....................     #define LCD_D4 PIN_D4 
....................     #define LCD_D5 PIN_D5 
....................     #define LCD_D6 PIN_D6 
....................     #define LCD_D7 PIN_D7 
....................  
.................... void Active_LCD(void){ 
....................    output_high(LCD_EN); 
*
00B2:  BCF    F94.6
00B4:  BSF    F8B.6
....................    output_low(LCD_RS); 
00B6:  BCF    F94.4
00B8:  BCF    F8B.4
....................    output_low(LCD_RW); 
00BA:  BCF    F94.5
00BC:  BCF    F8B.5
....................  
....................    output_low(LCD_D0); 
00BE:  BCF    F95.0
00C0:  BCF    F8C.0
....................    output_low(LCD_D1); 
00C2:  BCF    F95.1
00C4:  BCF    F8C.1
....................    output_high(LCD_D2); 
00C6:  BCF    F95.2
00C8:  BSF    F8C.2
....................    output_high(LCD_D3); 
00CA:  BCF    F95.3
00CC:  BSF    F8C.3
....................    output_high(LCD_D4); 
00CE:  BCF    F95.4
00D0:  BSF    F8C.4
....................    output_high(LCD_D5); 
00D2:  BCF    F95.5
00D4:  BSF    F8C.5
....................    output_low(LCD_D6); 
00D6:  BCF    F95.6
00D8:  BCF    F8C.6
....................    output_low(LCD_D7); 
00DA:  BCF    F95.7
00DC:  BCF    F8C.7
....................  
....................    //ejecuta instrucion  
....................    delay_ms(5); 
00DE:  MOVLW  05
00E0:  MOVWF  0E
00E2:  RCALL  0004
....................    output_low(LCD_EN); 
00E4:  BCF    F94.6
00E6:  BCF    F8B.6
....................    delay_ms(5); 
00E8:  MOVLW  05
00EA:  MOVWF  0E
00EC:  RCALL  0004
....................    output_high(LCD_EN); 
00EE:  BCF    F94.6
00F0:  BSF    F8B.6
00F2:  GOTO   00FC (RETURN)
.................... } 
.................... void Enciende_LCD(void){   
....................    output_high(LCD_EN); 
*
006E:  BCF    F94.6
0070:  BSF    F8B.6
....................    output_low(LCD_RS); 
0072:  BCF    F94.4
0074:  BCF    F8B.4
....................    output_low(LCD_RW); 
0076:  BCF    F94.5
0078:  BCF    F8B.5
....................  
....................    output_low(LCD_D0); 
007A:  BCF    F95.0
007C:  BCF    F8C.0
....................    output_low(LCD_D1); 
007E:  BCF    F95.1
0080:  BCF    F8C.1
....................    output_high(LCD_D2); 
0082:  BCF    F95.2
0084:  BSF    F8C.2
....................    output_high(LCD_D3); 
0086:  BCF    F95.3
0088:  BSF    F8C.3
....................    output_low(LCD_D4); 
008A:  BCF    F95.4
008C:  BCF    F8C.4
....................    output_low(LCD_D5); 
008E:  BCF    F95.5
0090:  BCF    F8C.5
....................    output_low(LCD_D6); 
0092:  BCF    F95.6
0094:  BCF    F8C.6
....................    output_low(LCD_D7); 
0096:  BCF    F95.7
0098:  BCF    F8C.7
....................  
....................    //ejecuta instrucion  
....................    delay_ms(5); 
009A:  MOVLW  05
009C:  MOVWF  0E
009E:  RCALL  0004
....................    output_low(LCD_EN); 
00A0:  BCF    F94.6
00A2:  BCF    F8B.6
....................    delay_ms(5); 
00A4:  MOVLW  05
00A6:  MOVWF  0E
00A8:  RCALL  0004
....................    output_high(LCD_EN); 
00AA:  BCF    F94.6
00AC:  BSF    F8B.6
00AE:  GOTO   00FA (RETURN)
....................  
.................... } 
.................... void Clear_LCD(){     
....................    output_high(LCD_EN); 
*
002C:  BCF    F94.6
002E:  BSF    F8B.6
....................    output_low(LCD_RS); 
0030:  BCF    F94.4
0032:  BCF    F8B.4
....................    output_low(LCD_RW); 
0034:  BCF    F94.5
0036:  BCF    F8B.5
....................  
....................    output_high(LCD_D0); 
0038:  BCF    F95.0
003A:  BSF    F8C.0
....................    output_low(LCD_D1); 
003C:  BCF    F95.1
003E:  BCF    F8C.1
....................    output_low(LCD_D2); 
0040:  BCF    F95.2
0042:  BCF    F8C.2
....................    output_low(LCD_D3); 
0044:  BCF    F95.3
0046:  BCF    F8C.3
....................    output_low(LCD_D4); 
0048:  BCF    F95.4
004A:  BCF    F8C.4
....................    output_low(LCD_D5); 
004C:  BCF    F95.5
004E:  BCF    F8C.5
....................    output_low(LCD_D6); 
0050:  BCF    F95.6
0052:  BCF    F8C.6
....................    output_low(LCD_D7); 
0054:  BCF    F95.7
0056:  BCF    F8C.7
....................  
....................    //ejecuta instrucion  
....................    delay_ms(5); 
0058:  MOVLW  05
005A:  MOVWF  0E
005C:  RCALL  0004
....................    output_low(LCD_EN); 
005E:  BCF    F94.6
0060:  BCF    F8B.6
....................    delay_ms(5); 
0062:  MOVLW  05
0064:  MOVWF  0E
0066:  RCALL  0004
....................    output_high(LCD_EN); 
0068:  BCF    F94.6
006A:  BSF    F8B.6
006C:  RETURN 0
.................... } 
.................... void write_LCD(){ 
....................    output_high(LCD_EN); 
....................    output_high(LCD_RS); 
....................    output_low(LCD_RW); 
....................  
....................    output_low(LCD_D0); 
....................    output_low(LCD_D1); 
....................    output_high(LCD_D2); 
....................    output_low(LCD_D3); 
....................    output_high(LCD_D4); 
....................    output_low(LCD_D5); 
....................    output_high(LCD_D6); 
....................    output_low(LCD_D7); 
....................     
....................    //ejecuta instrucion  
....................    delay_ms(5); 
....................    output_low(LCD_EN); 
....................    delay_ms(5); 
....................    output_high(LCD_EN); 
.................... } 
.................... void write_LCD3(int *Codigo){ 
....................    output_high(LCD_EN); 
*
019A:  BCF    F94.6
019C:  BSF    F8B.6
....................    output_high(LCD_RS); 
019E:  BCF    F94.4
01A0:  BSF    F8B.4
....................    output_low(LCD_RW); 
01A2:  BCF    F94.5
01A4:  BCF    F8B.5
....................  
....................    if(Codigo[0]==1)output_high(LCD_D0); else output_low(LCD_D0); 
01A6:  MOVFF  16,FE9
01AA:  MOVFF  17,FEA
01AE:  DECFSZ FEF,W
01B0:  BRA    01B8
01B2:  BCF    F95.0
01B4:  BSF    F8C.0
01B6:  BRA    01BC
01B8:  BCF    F95.0
01BA:  BCF    F8C.0
....................    if(Codigo[1]==1)output_high(LCD_D1); else output_low(LCD_D1); 
01BC:  MOVLW  01
01BE:  ADDWF  16,W
01C0:  MOVWF  FE9
01C2:  MOVLW  00
01C4:  ADDWFC 17,W
01C6:  MOVWF  FEA
01C8:  DECFSZ FEF,W
01CA:  BRA    01D2
01CC:  BCF    F95.1
01CE:  BSF    F8C.1
01D0:  BRA    01D6
01D2:  BCF    F95.1
01D4:  BCF    F8C.1
....................    if(Codigo[2]==1)output_high(LCD_D2); else output_low(LCD_D2); 
01D6:  MOVLW  02
01D8:  ADDWF  16,W
01DA:  MOVWF  FE9
01DC:  MOVLW  00
01DE:  ADDWFC 17,W
01E0:  MOVWF  FEA
01E2:  DECFSZ FEF,W
01E4:  BRA    01EC
01E6:  BCF    F95.2
01E8:  BSF    F8C.2
01EA:  BRA    01F0
01EC:  BCF    F95.2
01EE:  BCF    F8C.2
....................    if(Codigo[3]==1)output_high(LCD_D3); else output_low(LCD_D3); 
01F0:  MOVLW  03
01F2:  ADDWF  16,W
01F4:  MOVWF  FE9
01F6:  MOVLW  00
01F8:  ADDWFC 17,W
01FA:  MOVWF  FEA
01FC:  DECFSZ FEF,W
01FE:  BRA    0206
0200:  BCF    F95.3
0202:  BSF    F8C.3
0204:  BRA    020A
0206:  BCF    F95.3
0208:  BCF    F8C.3
....................    if(Codigo[4]==1)output_high(LCD_D4); else output_low(LCD_D4); 
020A:  MOVLW  04
020C:  ADDWF  16,W
020E:  MOVWF  FE9
0210:  MOVLW  00
0212:  ADDWFC 17,W
0214:  MOVWF  FEA
0216:  DECFSZ FEF,W
0218:  BRA    0220
021A:  BCF    F95.4
021C:  BSF    F8C.4
021E:  BRA    0224
0220:  BCF    F95.4
0222:  BCF    F8C.4
....................    if(Codigo[5]==1)output_high(LCD_D5); else output_low(LCD_D5); 
0224:  MOVLW  05
0226:  ADDWF  16,W
0228:  MOVWF  FE9
022A:  MOVLW  00
022C:  ADDWFC 17,W
022E:  MOVWF  FEA
0230:  DECFSZ FEF,W
0232:  BRA    023A
0234:  BCF    F95.5
0236:  BSF    F8C.5
0238:  BRA    023E
023A:  BCF    F95.5
023C:  BCF    F8C.5
....................    if(Codigo[6]==1)output_high(LCD_D6); else output_low(LCD_D6); 
023E:  MOVLW  06
0240:  ADDWF  16,W
0242:  MOVWF  FE9
0244:  MOVLW  00
0246:  ADDWFC 17,W
0248:  MOVWF  FEA
024A:  DECFSZ FEF,W
024C:  BRA    0254
024E:  BCF    F95.6
0250:  BSF    F8C.6
0252:  BRA    0258
0254:  BCF    F95.6
0256:  BCF    F8C.6
....................    if(Codigo[7]==1)output_high(LCD_D7); else output_low(LCD_D7); 
0258:  MOVLW  07
025A:  ADDWF  16,W
025C:  MOVWF  FE9
025E:  MOVLW  00
0260:  ADDWFC 17,W
0262:  MOVWF  FEA
0264:  DECFSZ FEF,W
0266:  BRA    026E
0268:  BCF    F95.7
026A:  BSF    F8C.7
026C:  BRA    0272
026E:  BCF    F95.7
0270:  BCF    F8C.7
....................     
....................    //ejecuta instrucion  
....................    //delay_ms(2); 
....................    output_low(LCD_EN); 
0272:  BCF    F94.6
0274:  BCF    F8B.6
....................     
....................    output_high(LCD_EN); 
0276:  BCF    F94.6
0278:  BSF    F8B.6
027A:  GOTO   0358 (RETURN)
.................... } 
.................... void Star_LCD(){ 
....................     Clear_LCD(); 
*
00F6:  RCALL  002C
....................     Enciende_LCD(); 
00F8:  BRA    006E
....................     Active_LCD(); 
00FA:  BRA    00B2
00FC:  GOTO   03BC (RETURN)
.................... } 
.................... int  Codigo_Letras(char letra){    
....................     int Codigo[7]; 
....................     switch(letra){ 
....................         case 'A':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=0;Codigo[2]=0;Codigo[1]=0;Codigo[0]=1;  break; 
....................         case 'B':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=0;Codigo[2]=0;Codigo[1]=1;Codigo[0]=0;  break;  
....................         case 'C':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=0;Codigo[2]=0;Codigo[1]=1;Codigo[0]=1;  break; 
....................  
....................         case 'D':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=0;Codigo[2]=1;Codigo[1]=0;Codigo[0]=0;  break; 
....................         case 'E':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=0;Codigo[2]=1;Codigo[1]=0;Codigo[0]=1;  break; 
....................         case 'F':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=0;Codigo[2]=1;Codigo[1]=1;Codigo[0]=0;  break;         
....................         case 'G':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=0;Codigo[2]=1;Codigo[1]=1;Codigo[0]=1;  break; 
....................          
....................         case 'H':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=1;Codigo[2]=0;Codigo[1]=0;Codigo[0]=0;  break; 
....................         case 'I':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=1;Codigo[2]=0;Codigo[1]=0;Codigo[0]=1;  break;        
....................         case 'J':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=1;Codigo[2]=0;Codigo[1]=1;Codigo[0]=0;  break; 
....................         case 'K':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=1;Codigo[2]=0;Codigo[1]=1;Codigo[0]=1;  break; 
....................  
....................         case 'L':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=1;Codigo[2]=1;Codigo[1]=0;Codigo[0]=0;  break; 
....................         case 'M':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=1;Codigo[2]=1;Codigo[1]=0;Codigo[0]=1;  break; 
....................         case 'N':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=1;Codigo[2]=1;Codigo[1]=1;Codigo[0]=0;  break; 
....................         case 'O':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=0;     Codigo[3]=1;Codigo[2]=1;Codigo[1]=1;Codigo[0]=1;  break;         
....................          
....................         case 'P':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=0;Codigo[2]=0;Codigo[1]=0;Codigo[0]=1;  break; 
....................         case 'Q':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=0;Codigo[2]=0;Codigo[1]=1;Codigo[0]=0;  break;  
....................         case 'R':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=0;Codigo[2]=0;Codigo[1]=1;Codigo[0]=0;  break; 
....................         case 'S':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=0;Codigo[2]=1;Codigo[1]=0;Codigo[0]=0;  break; 
....................         case 'T':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=0;Codigo[2]=1;Codigo[1]=0;Codigo[0]=1;  break; 
....................         case 'U':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=0;Codigo[2]=1;Codigo[1]=1;Codigo[0]=0;  break; 
....................         case 'V':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=0;Codigo[2]=1;Codigo[1]=1;Codigo[0]=1;  break; 
....................         case 'W':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=1;Codigo[2]=0;Codigo[1]=0;Codigo[0]=0;  break; 
....................         case 'X':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=1;Codigo[2]=0;Codigo[1]=0;Codigo[0]=1;  break;  
....................         case 'Y':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=1;Codigo[2]=0;Codigo[1]=1;Codigo[0]=0;  break; 
....................         case 'Z':  Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;     Codigo[3]=1;Codigo[2]=0;Codigo[1]=1;Codigo[0]=1;  break; 
....................          
....................  
....................         case '/':     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=0;  Codigo[3]=1;Codigo[2]=1;Codigo[1]=1;Codigo[0]=1; break; 
....................         case ' ':     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=0;  Codigo[3]=0;Codigo[2]=0;Codigo[1]=0;Codigo[0]=0; break; 
....................         case '[':     Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=1;Codigo[1]=0;Codigo[0]=0; break; 
....................         case ']':     Codigo[7]=0;Codigo[6]=1;Codigo[5]=0;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=1;Codigo[1]=0;Codigo[0]=0; break; 
....................     } 
....................     write_LCD3(Codigo);  
....................     return  Codigo; 
.................... }        
.................... int  Codigo_numero(int numero){    
....................     int Codigo[7]; 
....................     switch(numero){ 
*
027E:  MOVF   0E,W
0280:  ADDLW  F6
0282:  BC    0350
0284:  ADDLW  0A
0286:  GOTO   0364
....................         case 0:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=0;Codigo[1]=0;Codigo[0]=0; break; 
028A:  CLRF   16
028C:  CLRF   15
028E:  MOVLW  01
0290:  MOVWF  14
0292:  MOVWF  13
0294:  CLRF   12
0296:  CLRF   11
0298:  CLRF   10
029A:  CLRF   0F
029C:  BRA    0350
....................         case 1:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=0;Codigo[1]=0;Codigo[0]=1; break; 
029E:  CLRF   16
02A0:  CLRF   15
02A2:  MOVLW  01
02A4:  MOVWF  14
02A6:  MOVWF  13
02A8:  CLRF   12
02AA:  CLRF   11
02AC:  CLRF   10
02AE:  MOVWF  0F
02B0:  BRA    0350
....................         case 2:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=0;Codigo[1]=1;Codigo[0]=0; break; 
02B2:  CLRF   16
02B4:  CLRF   15
02B6:  MOVLW  01
02B8:  MOVWF  14
02BA:  MOVWF  13
02BC:  CLRF   12
02BE:  CLRF   11
02C0:  MOVWF  10
02C2:  CLRF   0F
02C4:  BRA    0350
....................         case 3:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=0;Codigo[1]=1;Codigo[0]=1; break; 
02C6:  CLRF   16
02C8:  CLRF   15
02CA:  MOVLW  01
02CC:  MOVWF  14
02CE:  MOVWF  13
02D0:  CLRF   12
02D2:  CLRF   11
02D4:  MOVWF  10
02D6:  MOVWF  0F
02D8:  BRA    0350
....................         case 4:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=1;Codigo[1]=0;Codigo[0]=0; break; 
02DA:  CLRF   16
02DC:  CLRF   15
02DE:  MOVLW  01
02E0:  MOVWF  14
02E2:  MOVWF  13
02E4:  CLRF   12
02E6:  MOVWF  11
02E8:  CLRF   10
02EA:  CLRF   0F
02EC:  BRA    0350
....................         case 5:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=1;Codigo[1]=0;Codigo[0]=1; break; 
02EE:  CLRF   16
02F0:  CLRF   15
02F2:  MOVLW  01
02F4:  MOVWF  14
02F6:  MOVWF  13
02F8:  CLRF   12
02FA:  MOVWF  11
02FC:  CLRF   10
02FE:  MOVWF  0F
0300:  BRA    0350
....................         case 6:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=1;Codigo[1]=1;Codigo[0]=0; break; 
0302:  CLRF   16
0304:  CLRF   15
0306:  MOVLW  01
0308:  MOVWF  14
030A:  MOVWF  13
030C:  CLRF   12
030E:  MOVWF  11
0310:  MOVWF  10
0312:  CLRF   0F
0314:  BRA    0350
....................         case 7:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=0;Codigo[2]=1;Codigo[1]=1;Codigo[0]=1; break; 
0316:  CLRF   16
0318:  CLRF   15
031A:  MOVLW  01
031C:  MOVWF  14
031E:  MOVWF  13
0320:  CLRF   12
0322:  MOVWF  11
0324:  MOVWF  10
0326:  MOVWF  0F
0328:  BRA    0350
....................         case 8:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=1;Codigo[2]=0;Codigo[1]=0;Codigo[0]=0; break; 
032A:  CLRF   16
032C:  CLRF   15
032E:  MOVLW  01
0330:  MOVWF  14
0332:  MOVWF  13
0334:  MOVWF  12
0336:  CLRF   11
0338:  CLRF   10
033A:  CLRF   0F
033C:  BRA    0350
....................         case 9:     Codigo[7]=0;Codigo[6]=0;Codigo[5]=1;Codigo[4]=1;  Codigo[3]=1;Codigo[2]=0;Codigo[1]=0;Codigo[0]=1; break; 
033E:  CLRF   16
0340:  CLRF   15
0342:  MOVLW  01
0344:  MOVWF  14
0346:  MOVWF  13
0348:  MOVWF  12
034A:  CLRF   11
034C:  CLRF   10
034E:  MOVWF  0F
....................     } 
....................     write_LCD3(Codigo);  
0350:  CLRF   17
0352:  MOVLW  0F
0354:  MOVWF  16
0356:  BRA    019A
....................     return  Codigo; 
0358:  MOVLW  0F
035A:  MOVWF  01
035C:  MOVLW  00
035E:  MOVWF  02
0360:  GOTO   048C (RETURN)
.................... } 
.................... void main(){    
*
0392:  CLRF   FF8
0394:  BCF    FD0.7
0396:  MOVLW  01
0398:  MOVWF  05
039A:  MOVF   FC1,W
039C:  ANDLW  C0
039E:  IORLW  0F
03A0:  MOVWF  FC1
03A2:  MOVLW  07
03A4:  MOVWF  FB4
....................    setup_adc(ADC_CLOCK_INTERNAL);   //Selecciono reloj interno para conversion     
03A6:  MOVF   FC0,W
03A8:  ANDLW  C0
03AA:  IORLW  07
03AC:  MOVWF  FC0
03AE:  BCF    FC0.7
03B0:  BSF    FC2.0
....................    setup_adc_ports(AN0); 
03B2:  MOVF   FC1,W
03B4:  ANDLW  C0
03B6:  IORLW  0E
03B8:  MOVWF  FC1
....................     Star_LCD(); 
03BA:  BRA    00F6
....................  
....................     while (1){ 
....................        set_adc_channel(0);          //Selecciono el canal 0 (RA0) 
03BC:  MOVLW  00
03BE:  MOVWF  01
03C0:  MOVF   FC2,W
03C2:  ANDLW  C3
03C4:  IORWF  01,W
03C6:  MOVWF  FC2
....................        bits_sensor=read_adc();             //Guarde el dato del LM en tempe 
03C8:  BSF    FC2.1
03CA:  BTFSC  FC2.1
03CC:  BRA    03CA
03CE:  CLRF   09
03D0:  MOVFF  FC4,08
....................          
....................         numero=(5*bits_sensor*100)/1023;       
03D4:  CLRF   11
03D6:  MOVLW  05
03D8:  MOVWF  10
03DA:  MOVFF  09,13
03DE:  MOVFF  08,12
03E2:  RCALL  0100
03E4:  MOVFF  02,0F
03E8:  MOVFF  01,0E
03EC:  MOVFF  02,11
03F0:  MOVFF  01,10
03F4:  CLRF   13
03F6:  MOVLW  64
03F8:  MOVWF  12
03FA:  RCALL  0100
03FC:  MOVFF  02,0F
0400:  MOVFF  01,0E
0404:  MOVFF  02,11
0408:  MOVFF  01,10
040C:  MOVLW  03
040E:  MOVWF  13
0410:  SETF   12
0412:  BRA    011E
0414:  MOVFF  02,03
0418:  MOVFF  01,0E
041C:  MOVFF  02,0F
0420:  BRA    0162
0422:  MOVFF  03,0D
0426:  MOVFF  02,0C
042A:  MOVFF  01,0B
042E:  MOVFF  00,0A
....................         menu_move=INPUT(PIN_B1); //cambia entre las diferentes obciones del menu  
0432:  BSF    F93.1
0434:  CLRF   04
0436:  BTFSC  F81.1
0438:  INCF   04,F
....................         menu_select=INPUT(PIN_B2);   //seleciona actual del menu  
043A:  BSF    F93.2
043C:  CLRF   06
043E:  BTFSC  F81.2
0440:  INCF   06,F
....................         menu_back=INPUT(PIN_B3);   //regresar en el menu  
0442:  BSF    F93.3
0444:  CLRF   07
0446:  BTFSC  F81.3
0448:  INCF   07,F
....................         if (menu_move==1)   { 
044A:  DECFSZ 04,W
044C:  BRA    0464
....................             output_high(PIN_B7); 
044E:  BCF    F93.7
0450:  BSF    F8A.7
....................             pocision_menu++; 
0452:  INCF   05,F
....................             while (INPUT(PIN_B1)){ 
0454:  BSF    F93.1
0456:  BTFSS  F81.1
0458:  BRA    045C
045A:  BRA    0454
....................             } 
....................             delay_ms(100); 
045C:  MOVLW  64
045E:  MOVWF  0E
0460:  RCALL  0004
....................              
....................              
....................         }else{ 
0462:  BRA    0468
....................             output_low(PIN_B7); 
0464:  BCF    F93.7
0466:  BCF    F8A.7
....................         } 
....................         if (menu_select==1) {output_high(PIN_B6);}else{output_low(PIN_B6);} 
0468:  DECFSZ 06,W
046A:  BRA    0472
046C:  BCF    F93.6
046E:  BSF    F8A.6
0470:  BRA    0476
0472:  BCF    F93.6
0474:  BCF    F8A.6
....................         if (menu_back==1)   {output_high(PIN_B5);}else{output_low(PIN_B5);} 
0476:  DECFSZ 07,W
0478:  BRA    0480
047A:  BCF    F93.5
047C:  BSF    F8A.5
047E:  BRA    0484
0480:  BCF    F93.5
0482:  BCF    F8A.5
....................                 Clear_LCD(); 
0484:  RCALL  002C
....................                 Codigo_numero(bits_sensor); 
0486:  MOVFF  08,0E
048A:  BRA    027E
048C:  BRA    03BC
....................                 //Codigo_Letras('/'); 
....................                 //Codigo_numero(2); 
....................     
....................     } 
....................      
.................... } 
048E:  SLEEP 

Configuration Fuses:
   Word  1: C03F   PLL12 CPUDIV4 USBDIV XT FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
