CCS PCH C Compiler, Version 5.015, 5967               09-ene.-21 21:34

               Filename:   D:\escuela\tesis\LCD con libreria\LCD con libreria.lst

               ROM used:   2258 bytes (7%)
                           Largest free fragment is 30510
               RAM used:   20 (1%) at main() level
                           42 (2%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   078E
.................... #INCLUDE <18f4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  DATA 0C,00
0006:  DATA 41,44
0008:  DATA 43,3A
000A:  DATA 20,25
000C:  DATA 34,4C
000E:  DATA 75,00
0010:  DATA 65,3D
0012:  DATA 20,25
0014:  DATA 66,00
*
01C4:  TBLRD*+
01C6:  MOVF   FF5,F
01C8:  BZ    01E2
01CA:  MOVFF  FF6,10
01CE:  MOVFF  FF7,11
01D2:  MOVFF  FF5,1D
01D6:  RCALL  0174
01D8:  MOVFF  10,FF6
01DC:  MOVFF  11,FF7
01E0:  BRA    01C4
01E2:  GOTO   07D4 (RETURN)
01E6:  MOVLW  8E
01E8:  MOVWF  00
01EA:  MOVFF  11,01
01EE:  MOVFF  10,02
01F2:  CLRF   03
01F4:  MOVF   01,F
01F6:  BNZ   020A
01F8:  MOVFF  02,01
01FC:  CLRF   02
01FE:  MOVLW  08
0200:  SUBWF  00,F
0202:  MOVF   01,F
0204:  BNZ   020A
0206:  CLRF   00
0208:  BRA    021A
020A:  BCF    FD8.0
020C:  BTFSC  01.7
020E:  BRA    0218
0210:  RLCF   02,F
0212:  RLCF   01,F
0214:  DECF   00,F
0216:  BRA    020A
0218:  BCF    01.7
021A:  GOTO   081E (RETURN)
021E:  MOVF   1D,W
0220:  BTFSC  FD8.2
0222:  BRA    0306
0224:  MOVWF  00
0226:  MOVF   21,W
0228:  BTFSC  FD8.2
022A:  BRA    0306
022C:  ADDWF  00,F
022E:  BNC   0238
0230:  MOVLW  81
0232:  ADDWF  00,F
0234:  BC    0306
0236:  BRA    0240
0238:  MOVLW  7F
023A:  SUBWF  00,F
023C:  BNC   0306
023E:  BZ    0306
0240:  MOVFF  1E,25
0244:  MOVF   22,W
0246:  XORWF  25,F
0248:  BSF    1E.7
024A:  BSF    22.7
024C:  MOVF   20,W
024E:  MULWF  24
0250:  MOVFF  FF4,27
0254:  MOVF   1F,W
0256:  MULWF  23
0258:  MOVFF  FF4,03
025C:  MOVFF  FF3,26
0260:  MULWF  24
0262:  MOVF   FF3,W
0264:  ADDWF  27,F
0266:  MOVF   FF4,W
0268:  ADDWFC 26,F
026A:  MOVLW  00
026C:  ADDWFC 03,F
026E:  MOVF   20,W
0270:  MULWF  23
0272:  MOVF   FF3,W
0274:  ADDWF  27,F
0276:  MOVF   FF4,W
0278:  ADDWFC 26,F
027A:  MOVLW  00
027C:  CLRF   02
027E:  ADDWFC 03,F
0280:  ADDWFC 02,F
0282:  MOVF   1E,W
0284:  MULWF  24
0286:  MOVF   FF3,W
0288:  ADDWF  26,F
028A:  MOVF   FF4,W
028C:  ADDWFC 03,F
028E:  MOVLW  00
0290:  ADDWFC 02,F
0292:  MOVF   1E,W
0294:  MULWF  23
0296:  MOVF   FF3,W
0298:  ADDWF  03,F
029A:  MOVF   FF4,W
029C:  ADDWFC 02,F
029E:  MOVLW  00
02A0:  CLRF   01
02A2:  ADDWFC 01,F
02A4:  MOVF   20,W
02A6:  MULWF  22
02A8:  MOVF   FF3,W
02AA:  ADDWF  26,F
02AC:  MOVF   FF4,W
02AE:  ADDWFC 03,F
02B0:  MOVLW  00
02B2:  ADDWFC 02,F
02B4:  ADDWFC 01,F
02B6:  MOVF   1F,W
02B8:  MULWF  22
02BA:  MOVF   FF3,W
02BC:  ADDWF  03,F
02BE:  MOVF   FF4,W
02C0:  ADDWFC 02,F
02C2:  MOVLW  00
02C4:  ADDWFC 01,F
02C6:  MOVF   1E,W
02C8:  MULWF  22
02CA:  MOVF   FF3,W
02CC:  ADDWF  02,F
02CE:  MOVF   FF4,W
02D0:  ADDWFC 01,F
02D2:  INCF   00,F
02D4:  BTFSC  01.7
02D6:  BRA    02E2
02D8:  RLCF   26,F
02DA:  RLCF   03,F
02DC:  RLCF   02,F
02DE:  RLCF   01,F
02E0:  DECF   00,F
02E2:  MOVLW  00
02E4:  BTFSS  26.7
02E6:  BRA    02FC
02E8:  INCF   03,F
02EA:  ADDWFC 02,F
02EC:  ADDWFC 01,F
02EE:  MOVF   01,W
02F0:  BNZ   02FC
02F2:  MOVF   02,W
02F4:  BNZ   02FC
02F6:  MOVF   03,W
02F8:  BNZ   02FC
02FA:  INCF   00,F
02FC:  BTFSC  25.7
02FE:  BSF    01.7
0300:  BTFSS  25.7
0302:  BCF    01.7
0304:  BRA    030E
0306:  CLRF   00
0308:  CLRF   01
030A:  CLRF   02
030C:  CLRF   03
030E:  RETURN 0
0310:  MOVF   14,W
0312:  BTFSC  FD8.2
0314:  BRA    0460
0316:  MOVWF  20
0318:  MOVF   18,W
031A:  BTFSC  FD8.2
031C:  BRA    0460
031E:  SUBWF  20,F
0320:  BNC   032C
0322:  MOVLW  7F
0324:  ADDWF  20,F
0326:  BTFSC  FD8.0
0328:  BRA    0460
032A:  BRA    0338
032C:  MOVLW  81
032E:  SUBWF  20,F
0330:  BTFSS  FD8.0
0332:  BRA    0460
0334:  BTFSC  FD8.2
0336:  BRA    0460
0338:  MOVFF  20,00
033C:  CLRF   01
033E:  CLRF   02
0340:  CLRF   03
0342:  CLRF   1F
0344:  MOVFF  15,1E
0348:  BSF    1E.7
034A:  MOVFF  16,1D
034E:  MOVFF  17,1C
0352:  MOVLW  19
0354:  MOVWF  20
0356:  MOVF   1B,W
0358:  SUBWF  1C,F
035A:  BC    0376
035C:  MOVLW  01
035E:  SUBWF  1D,F
0360:  BC    0376
0362:  SUBWF  1E,F
0364:  BC    0376
0366:  SUBWF  1F,F
0368:  BC    0376
036A:  INCF   1F,F
036C:  INCF   1E,F
036E:  INCF   1D,F
0370:  MOVF   1B,W
0372:  ADDWF  1C,F
0374:  BRA    03C6
0376:  MOVF   1A,W
0378:  SUBWF  1D,F
037A:  BC    03A0
037C:  MOVLW  01
037E:  SUBWF  1E,F
0380:  BC    03A0
0382:  SUBWF  1F,F
0384:  BC    03A0
0386:  INCF   1F,F
0388:  INCF   1E,F
038A:  MOVF   1A,W
038C:  ADDWF  1D,F
038E:  MOVF   1B,W
0390:  ADDWF  1C,F
0392:  BNC   03C6
0394:  INCF   1D,F
0396:  BNZ   03C6
0398:  INCF   1E,F
039A:  BNZ   03C6
039C:  INCF   1F,F
039E:  BRA    03C6
03A0:  MOVF   19,W
03A2:  IORLW  80
03A4:  SUBWF  1E,F
03A6:  BC    03C4
03A8:  MOVLW  01
03AA:  SUBWF  1F,F
03AC:  BC    03C4
03AE:  INCF   1F,F
03B0:  MOVF   19,W
03B2:  IORLW  80
03B4:  ADDWF  1E,F
03B6:  MOVF   1A,W
03B8:  ADDWF  1D,F
03BA:  BNC   038E
03BC:  INCF   1E,F
03BE:  BNZ   038E
03C0:  INCF   1F,F
03C2:  BRA    038E
03C4:  BSF    03.0
03C6:  DECFSZ 20,F
03C8:  BRA    03CC
03CA:  BRA    03E2
03CC:  BCF    FD8.0
03CE:  RLCF   1C,F
03D0:  RLCF   1D,F
03D2:  RLCF   1E,F
03D4:  RLCF   1F,F
03D6:  BCF    FD8.0
03D8:  RLCF   03,F
03DA:  RLCF   02,F
03DC:  RLCF   01,F
03DE:  RLCF   21,F
03E0:  BRA    0356
03E2:  BTFSS  21.0
03E4:  BRA    03F2
03E6:  BCF    FD8.0
03E8:  RRCF   01,F
03EA:  RRCF   02,F
03EC:  RRCF   03,F
03EE:  RRCF   21,F
03F0:  BRA    03F6
03F2:  DECF   00,F
03F4:  BZ    0460
03F6:  BTFSC  21.7
03F8:  BRA    0436
03FA:  BCF    FD8.0
03FC:  RLCF   1C,F
03FE:  RLCF   1D,F
0400:  RLCF   1E,F
0402:  RLCF   1F,F
0404:  MOVF   1B,W
0406:  SUBWF  1C,F
0408:  BC    0418
040A:  MOVLW  01
040C:  SUBWF  1D,F
040E:  BC    0418
0410:  SUBWF  1E,F
0412:  BC    0418
0414:  SUBWF  1F,F
0416:  BNC   044C
0418:  MOVF   1A,W
041A:  SUBWF  1D,F
041C:  BC    0428
041E:  MOVLW  01
0420:  SUBWF  1E,F
0422:  BC    0428
0424:  SUBWF  1F,F
0426:  BNC   044C
0428:  MOVF   19,W
042A:  IORLW  80
042C:  SUBWF  1E,F
042E:  BC    0436
0430:  MOVLW  01
0432:  SUBWF  1F,F
0434:  BNC   044C
0436:  INCF   03,F
0438:  BNZ   044C
043A:  INCF   02,F
043C:  BNZ   044C
043E:  INCF   01,F
0440:  BNZ   044C
0442:  INCF   00,F
0444:  BZ    0460
0446:  RRCF   01,F
0448:  RRCF   02,F
044A:  RRCF   03,F
044C:  MOVFF  15,20
0450:  MOVF   19,W
0452:  XORWF  20,F
0454:  BTFSS  20.7
0456:  BRA    045C
0458:  BSF    01.7
045A:  BRA    0468
045C:  BCF    01.7
045E:  BRA    0468
0460:  CLRF   00
0462:  CLRF   01
0464:  CLRF   02
0466:  CLRF   03
0468:  GOTO   0868 (RETURN)
046C:  TBLRD*+
046E:  MOVFF  FF6,11
0472:  MOVFF  FF7,12
0476:  MOVFF  FF5,1D
047A:  RCALL  0174
047C:  MOVFF  11,FF6
0480:  MOVFF  12,FF7
0484:  DECFSZ 10,F
0486:  BRA    046C
0488:  RETURN 0
048A:  MOVFF  FEA,18
048E:  MOVFF  FE9,17
0492:  SWAPF  11,W
0494:  IORLW  F0
0496:  MOVWF  13
0498:  ADDWF  13,F
049A:  ADDLW  E2
049C:  MOVWF  14
049E:  ADDLW  32
04A0:  MOVWF  16
04A2:  MOVF   11,W
04A4:  ANDLW  0F
04A6:  ADDWF  14,F
04A8:  ADDWF  14,F
04AA:  ADDWF  16,F
04AC:  ADDLW  E9
04AE:  MOVWF  15
04B0:  ADDWF  15,F
04B2:  ADDWF  15,F
04B4:  SWAPF  10,W
04B6:  ANDLW  0F
04B8:  ADDWF  15,F
04BA:  ADDWF  16,F
04BC:  RLCF   15,F
04BE:  RLCF   16,F
04C0:  COMF   16,F
04C2:  RLCF   16,F
04C4:  MOVF   10,W
04C6:  ANDLW  0F
04C8:  ADDWF  16,F
04CA:  RLCF   13,F
04CC:  MOVLW  07
04CE:  MOVWF  12
04D0:  MOVLW  0A
04D2:  DECF   15,F
04D4:  ADDWF  16,F
04D6:  BNC   04D2
04D8:  DECF   14,F
04DA:  ADDWF  15,F
04DC:  BNC   04D8
04DE:  DECF   13,F
04E0:  ADDWF  14,F
04E2:  BNC   04DE
04E4:  DECF   12,F
04E6:  ADDWF  13,F
04E8:  BNC   04E4
04EA:  CLRF   FEA
04EC:  MOVLW  12
04EE:  MOVWF  FE9
04F0:  MOVLW  07
04F2:  ANDWF  17,W
04F4:  BCF    17.6
04F6:  ADDWF  FE9,F
04F8:  MOVLW  00
04FA:  ADDWFC FEA,F
04FC:  MOVF   FE9,W
04FE:  SUBLW  16
0500:  BNZ   0508
0502:  MOVF   FEA,F
0504:  BNZ   0508
0506:  BSF    17.6
0508:  MOVF   FEF,W
050A:  MOVWF  00
050C:  BNZ   051E
050E:  BTFSC  17.6
0510:  BRA    051E
0512:  BTFSC  17.4
0514:  BRA    053C
0516:  BTFSC  17.3
0518:  BRA    051E
051A:  MOVLW  20
051C:  BRA    0524
051E:  BSF    17.3
0520:  BCF    17.4
0522:  MOVLW  30
0524:  ADDWF  00,F
0526:  MOVFF  FEA,11
052A:  MOVFF  FE9,10
052E:  MOVFF  00,1D
0532:  RCALL  0174
0534:  MOVFF  11,FEA
0538:  MOVFF  10,FE9
053C:  MOVF   FEE,W
053E:  BTFSS  17.6
0540:  BRA    04FC
0542:  GOTO   089C (RETURN)
0546:  MOVF   1D,W
0548:  SUBLW  B6
054A:  MOVWF  1D
054C:  CLRF   03
054E:  MOVFF  1E,21
0552:  BSF    1E.7
0554:  BCF    FD8.0
0556:  RRCF   1E,F
0558:  RRCF   1F,F
055A:  RRCF   20,F
055C:  RRCF   03,F
055E:  RRCF   02,F
0560:  RRCF   01,F
0562:  RRCF   00,F
0564:  DECFSZ 1D,F
0566:  BRA    0554
0568:  BTFSS  21.7
056A:  BRA    0582
056C:  COMF   00,F
056E:  COMF   01,F
0570:  COMF   02,F
0572:  COMF   03,F
0574:  INCF   00,F
0576:  BTFSC  FD8.2
0578:  INCF   01,F
057A:  BTFSC  FD8.2
057C:  INCF   02,F
057E:  BTFSC  FD8.2
0580:  INCF   03,F
0582:  GOTO   0662 (RETURN)
0586:  BTFSC  FD8.1
0588:  BRA    0590
058A:  CLRF   FEA
058C:  MOVLW  25
058E:  MOVWF  FE9
0590:  CLRF   00
0592:  CLRF   01
0594:  CLRF   02
0596:  CLRF   03
0598:  CLRF   25
059A:  CLRF   26
059C:  CLRF   27
059E:  CLRF   28
05A0:  MOVF   24,W
05A2:  IORWF  23,W
05A4:  IORWF  22,W
05A6:  IORWF  21,W
05A8:  BZ    0602
05AA:  MOVLW  20
05AC:  MOVWF  29
05AE:  BCF    FD8.0
05B0:  RLCF   1D,F
05B2:  RLCF   1E,F
05B4:  RLCF   1F,F
05B6:  RLCF   20,F
05B8:  RLCF   25,F
05BA:  RLCF   26,F
05BC:  RLCF   27,F
05BE:  RLCF   28,F
05C0:  MOVF   24,W
05C2:  SUBWF  28,W
05C4:  BNZ   05D6
05C6:  MOVF   23,W
05C8:  SUBWF  27,W
05CA:  BNZ   05D6
05CC:  MOVF   22,W
05CE:  SUBWF  26,W
05D0:  BNZ   05D6
05D2:  MOVF   21,W
05D4:  SUBWF  25,W
05D6:  BNC   05F6
05D8:  MOVF   21,W
05DA:  SUBWF  25,F
05DC:  MOVF   22,W
05DE:  BTFSS  FD8.0
05E0:  INCFSZ 22,W
05E2:  SUBWF  26,F
05E4:  MOVF   23,W
05E6:  BTFSS  FD8.0
05E8:  INCFSZ 23,W
05EA:  SUBWF  27,F
05EC:  MOVF   24,W
05EE:  BTFSS  FD8.0
05F0:  INCFSZ 24,W
05F2:  SUBWF  28,F
05F4:  BSF    FD8.0
05F6:  RLCF   00,F
05F8:  RLCF   01,F
05FA:  RLCF   02,F
05FC:  RLCF   03,F
05FE:  DECFSZ 29,F
0600:  BRA    05AE
0602:  MOVFF  25,FEF
0606:  MOVFF  26,FEC
060A:  MOVFF  27,FEC
060E:  MOVFF  28,FEC
0612:  RETURN 0
0614:  MOVF   FE9,W
0616:  MOVWF  15
0618:  MOVF   14,W
061A:  MOVWF  17
061C:  BZ    0650
061E:  MOVFF  13,20
0622:  MOVFF  12,1F
0626:  MOVFF  11,1E
062A:  MOVFF  10,1D
062E:  CLRF   24
0630:  CLRF   23
0632:  MOVLW  20
0634:  MOVWF  22
0636:  MOVLW  82
0638:  MOVWF  21
063A:  RCALL  021E
063C:  MOVFF  03,13
0640:  MOVFF  02,12
0644:  MOVFF  01,11
0648:  MOVFF  00,10
064C:  DECFSZ 17,F
064E:  BRA    061E
0650:  MOVFF  13,20
0654:  MOVFF  12,1F
0658:  MOVFF  11,1E
065C:  MOVFF  10,1D
0660:  BRA    0546
0662:  MOVFF  03,13
0666:  MOVFF  02,12
066A:  MOVFF  01,11
066E:  MOVFF  00,10
0672:  BTFSS  13.7
0674:  BRA    0690
0676:  DECF   15,F
0678:  BSF    15.5
067A:  COMF   10,F
067C:  COMF   11,F
067E:  COMF   12,F
0680:  COMF   13,F
0682:  INCF   10,F
0684:  BTFSC  FD8.2
0686:  INCF   11,F
0688:  BTFSC  FD8.2
068A:  INCF   12,F
068C:  BTFSC  FD8.2
068E:  INCF   13,F
0690:  MOVLW  3B
0692:  MOVWF  1C
0694:  MOVLW  9A
0696:  MOVWF  1B
0698:  MOVLW  CA
069A:  MOVWF  1A
069C:  CLRF   19
069E:  MOVLW  0A
06A0:  MOVWF  17
06A2:  MOVF   14,W
06A4:  BTFSC  FD8.2
06A6:  INCF   15,F
06A8:  BSF    FD8.1
06AA:  CLRF   FEA
06AC:  MOVLW  10
06AE:  MOVWF  FE9
06B0:  MOVFF  13,20
06B4:  MOVFF  12,1F
06B8:  MOVFF  11,1E
06BC:  MOVFF  10,1D
06C0:  MOVFF  1C,24
06C4:  MOVFF  1B,23
06C8:  MOVFF  1A,22
06CC:  MOVFF  19,21
06D0:  RCALL  0586
06D2:  MOVF   01,W
06D4:  MOVF   00,F
06D6:  BNZ   06F6
06D8:  INCF   14,W
06DA:  SUBWF  17,W
06DC:  BZ    06F6
06DE:  MOVF   15,W
06E0:  BZ    06FA
06E2:  ANDLW  0F
06E4:  SUBWF  17,W
06E6:  BZ    06EA
06E8:  BC    0758
06EA:  BTFSC  15.7
06EC:  BRA    0758
06EE:  BTFSC  15.6
06F0:  BRA    06FA
06F2:  MOVLW  20
06F4:  BRA    0750
06F6:  MOVLW  20
06F8:  ANDWF  15,F
06FA:  BTFSS  15.5
06FC:  BRA    0716
06FE:  BCF    15.5
0700:  MOVF   14,W
0702:  BTFSS  FD8.2
0704:  DECF   15,F
0706:  MOVF   00,W
0708:  MOVWF  15
070A:  MOVLW  2D
070C:  MOVWF  1D
070E:  RCALL  0174
0710:  MOVF   15,W
0712:  MOVWF  00
0714:  CLRF   15
0716:  MOVF   14,W
0718:  SUBWF  17,W
071A:  BNZ   0730
071C:  MOVF   00,W
071E:  MOVWF  15
0720:  MOVLW  2E
0722:  MOVWF  1D
0724:  RCALL  0174
0726:  MOVF   15,W
0728:  MOVWF  00
072A:  MOVLW  20
072C:  ANDWF  15,F
072E:  MOVLW  00
0730:  MOVLW  30
0732:  BTFSS  15.5
0734:  BRA    0750
0736:  BCF    15.5
0738:  MOVF   14,W
073A:  BTFSS  FD8.2
073C:  DECF   15,F
073E:  MOVF   00,W
0740:  MOVWF  15
0742:  MOVLW  2D
0744:  MOVWF  1D
0746:  RCALL  0174
0748:  MOVF   15,W
074A:  MOVWF  00
074C:  CLRF   15
074E:  MOVLW  30
0750:  ADDWF  00,F
0752:  MOVFF  00,1D
0756:  RCALL  0174
0758:  BCF    FD8.1
075A:  MOVFF  1C,20
075E:  MOVFF  1B,1F
0762:  MOVFF  1A,1E
0766:  MOVFF  19,1D
076A:  CLRF   24
076C:  CLRF   23
076E:  CLRF   22
0770:  MOVLW  0A
0772:  MOVWF  21
0774:  RCALL  0586
0776:  MOVFF  03,1C
077A:  MOVFF  02,1B
077E:  MOVFF  01,1A
0782:  MOVFF  00,19
0786:  DECFSZ 17,F
0788:  BRA    06A8
078A:  GOTO   08CE (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #USE DELAY(CLOCK=4000000) 
*
0016:  CLRF   FEA
0018:  MOVLW  1E
001A:  MOVWF  FE9
001C:  MOVF   FEF,W
001E:  BZ    003C
0020:  MOVLW  01
0022:  MOVWF  01
0024:  CLRF   00
0026:  DECFSZ 00,F
0028:  BRA    0026
002A:  DECFSZ 01,F
002C:  BRA    0024
002E:  MOVLW  4A
0030:  MOVWF  00
0032:  DECFSZ 00,F
0034:  BRA    0032
0036:  BRA    0038
0038:  DECFSZ FEF,F
003A:  BRA    0020
003C:  RETURN 0
.................... #INCLUDE <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0062:  MOVLW  0F
0064:  ANDWF  F95,W
0066:  IORLW  F0
0068:  MOVWF  F95
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
006A:  BSF    F8C.2
....................    delay_cycles(1); 
006C:  NOP   
....................    lcd_output_enable(1); 
006E:  BSF    F8C.0
....................    delay_cycles(1); 
0070:  NOP   
....................    high = lcd_read_nibble(); 
0072:  RCALL  0056
0074:  MOVFF  01,25
....................        
....................    lcd_output_enable(0); 
0078:  BCF    F8C.0
....................    delay_cycles(1); 
007A:  NOP   
....................    lcd_output_enable(1); 
007C:  BSF    F8C.0
....................    delay_us(1); 
007E:  NOP   
....................    low = lcd_read_nibble(); 
0080:  RCALL  0056
0082:  MOVFF  01,24
....................        
....................    lcd_output_enable(0); 
0086:  BCF    F8C.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0088:  MOVLW  0F
008A:  ANDWF  F95,W
008C:  MOVWF  F95
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
008E:  SWAPF  25,W
0090:  MOVWF  00
0092:  MOVLW  F0
0094:  ANDWF  00,F
0096:  MOVF   00,W
0098:  IORWF  24,W
009A:  MOVWF  01
009C:  GOTO   00AA (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0056:  MOVF   F83,W
0058:  MOVWF  00
005A:  SWAPF  00,W
005C:  ANDLW  0F
005E:  MOVWF  01
....................   #endif 
0060:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
003E:  SWAPF  25,W
0040:  ANDLW  F0
0042:  MOVWF  00
0044:  MOVLW  0F
0046:  ANDWF  F8C,W
0048:  IORWF  00,W
004A:  MOVWF  F8C
....................   #endif 
....................        
....................    delay_cycles(1); 
004C:  NOP   
....................    lcd_output_enable(1); 
004E:  BSF    F8C.0
....................    delay_us(2); 
0050:  BRA    0052
....................    lcd_output_enable(0); 
0052:  BCF    F8C.0
0054:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A0:  BCF    F95.0
....................    lcd_rs_tris(); 
00A2:  BCF    F95.1
....................    lcd_rw_tris(); 
00A4:  BCF    F95.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A6:  BCF    F8C.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
00A8:  BRA    0062
00AA:  MOVFF  01,24
00AE:  BTFSC  01.7
00B0:  BRA    00A8
....................    lcd_output_rs(address); 
00B2:  BCF    F8C.1
00B4:  BTFSC  22.0
00B6:  BSF    F8C.1
....................    delay_cycles(1); 
00B8:  NOP   
....................    lcd_output_rw(0); 
00BA:  BCF    F8C.2
....................    delay_cycles(1); 
00BC:  NOP   
....................    lcd_output_enable(0); 
00BE:  BCF    F8C.0
....................    lcd_send_nibble(n >> 4); 
00C0:  SWAPF  23,W
00C2:  MOVWF  24
00C4:  MOVLW  0F
00C6:  ANDWF  24,F
00C8:  MOVFF  24,25
00CC:  RCALL  003E
....................    lcd_send_nibble(n & 0xf); 
00CE:  MOVF   23,W
00D0:  ANDLW  0F
00D2:  MOVWF  24
00D4:  MOVWF  25
00D6:  RCALL  003E
00D8:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00DA:  MOVLW  28
00DC:  MOVWF  11
00DE:  MOVLW  0C
00E0:  MOVWF  12
00E2:  MOVLW  01
00E4:  MOVWF  13
00E6:  MOVLW  06
00E8:  MOVWF  14
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00EA:  BCF    F8C.0
....................    lcd_output_rs(0); 
00EC:  BCF    F8C.1
....................    lcd_output_rw(0); 
00EE:  BCF    F8C.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00F0:  MOVLW  0F
00F2:  ANDWF  F95,W
00F4:  MOVWF  F95
....................   #endif 
....................    lcd_enable_tris(); 
00F6:  BCF    F95.0
....................    lcd_rs_tris(); 
00F8:  BCF    F95.1
....................    lcd_rw_tris(); 
00FA:  BCF    F95.2
....................  #endif 
....................      
....................    delay_ms(15); 
00FC:  MOVLW  0F
00FE:  MOVWF  1E
0100:  RCALL  0016
....................    for(i=1;i<=3;++i) 
0102:  MOVLW  01
0104:  MOVWF  10
0106:  MOVF   10,W
0108:  SUBLW  03
010A:  BNC   011C
....................    { 
....................        lcd_send_nibble(3); 
010C:  MOVLW  03
010E:  MOVWF  25
0110:  RCALL  003E
....................        delay_ms(5); 
0112:  MOVLW  05
0114:  MOVWF  1E
0116:  RCALL  0016
0118:  INCF   10,F
011A:  BRA    0106
....................    } 
....................     
....................    lcd_send_nibble(2); 
011C:  MOVLW  02
011E:  MOVWF  25
0120:  RCALL  003E
....................    delay_ms(5); 
0122:  MOVLW  05
0124:  MOVWF  1E
0126:  RCALL  0016
....................    for(i=0;i<=3;++i) 
0128:  CLRF   10
012A:  MOVF   10,W
012C:  SUBLW  03
012E:  BNC   014E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0130:  CLRF   03
0132:  MOVF   10,W
0134:  ADDLW  11
0136:  MOVWF  FE9
0138:  MOVLW  00
013A:  ADDWFC 03,W
013C:  MOVWF  FEA
013E:  MOVFF  FEF,15
0142:  CLRF   22
0144:  MOVFF  15,23
0148:  RCALL  00A0
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
014A:  INCF   10,F
014C:  BRA    012A
014E:  GOTO   07CA (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0152:  DECFSZ 1F,W
0154:  BRA    0158
0156:  BRA    015E
....................       address=LCD_LINE_TWO; 
0158:  MOVLW  40
015A:  MOVWF  20
015C:  BRA    0160
....................    else 
....................       address=0; 
015E:  CLRF   20
....................       
....................    address+=x-1; 
0160:  MOVLW  01
0162:  SUBWF  1E,W
0164:  ADDWF  20,F
....................    lcd_send_byte(0,0x80|address); 
0166:  MOVF   20,W
0168:  IORLW  80
016A:  MOVWF  21
016C:  CLRF   22
016E:  MOVWF  23
0170:  RCALL  00A0
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0172:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0174:  MOVF   1D,W
0176:  XORLW  07
0178:  BZ    0188
017A:  XORLW  0B
017C:  BZ    0192
017E:  XORLW  06
0180:  BZ    01A2
0182:  XORLW  02
0184:  BZ    01AE
0186:  BRA    01B8
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0188:  MOVLW  01
018A:  MOVWF  1E
018C:  MOVWF  1F
018E:  RCALL  0152
0190:  BRA    01C2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0192:  CLRF   22
0194:  MOVLW  01
0196:  MOVWF  23
0198:  RCALL  00A0
....................                      delay_ms(2); 
019A:  MOVLW  02
019C:  MOVWF  1E
019E:  RCALL  0016
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01A0:  BRA    01C2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01A2:  MOVLW  01
01A4:  MOVWF  1E
01A6:  MOVLW  02
01A8:  MOVWF  1F
01AA:  RCALL  0152
01AC:  BRA    01C2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01AE:  CLRF   22
01B0:  MOVLW  10
01B2:  MOVWF  23
01B4:  RCALL  00A0
01B6:  BRA    01C2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01B8:  MOVLW  01
01BA:  MOVWF  22
01BC:  MOVFF  1D,23
01C0:  RCALL  00A0
....................      #endif 
....................    } 
01C2:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
....................  
.................... //configuracion entradas/salidas 
.................... //entradas 
....................    #define PIN_SetPoint  0    //[AN0]setpoint      set_adc_channel(0); set_adc_channel(PIN_SetPoint);  
....................    #define PIN_PocitionReal 1 //[AN1]posicion real set_adc_channel(1); set_adc_channel(PIN_PocitionReal);  
.................... //salidas 
....................     //control puenta H 
....................         //Grupos de rotacion  
....................             //set_pwm1_duty() [RC2] 
....................         //B 
....................             //set_pwm1_duty() [RC3 
.................... //bits 
.................... unsigned int16 bits_SetPoint=0; 
.................... unsigned int16 bits_PocitionReal=0; 
....................  
.................... //var PID 
.................... float Var_SetPoint=0; 
.................... float Var_PocitionReal=0; 
.................... void MAIN(){ 
*
078E:  CLRF   FF8
0790:  BCF    FD0.7
0792:  CLRF   05
0794:  CLRF   04
0796:  CLRF   07
0798:  CLRF   06
079A:  CLRF   0B
079C:  CLRF   0A
079E:  CLRF   09
07A0:  CLRF   08
07A2:  CLRF   0F
07A4:  CLRF   0E
07A6:  CLRF   0D
07A8:  CLRF   0C
07AA:  MOVF   FC1,W
07AC:  ANDLW  C0
07AE:  IORLW  0F
07B0:  MOVWF  FC1
07B2:  MOVLW  07
07B4:  MOVWF  FB4
....................     
....................    setup_adc(ADC_CLOCK_INTERNAL);   //Selecciono reloj interno para conversion     
07B6:  MOVF   FC0,W
07B8:  ANDLW  C0
07BA:  IORLW  07
07BC:  MOVWF  FC0
07BE:  BSF    FC0.7
07C0:  BSF    FC2.0
....................    setup_adc_ports(ALL_ANALOG); 
07C2:  MOVF   FC1,W
07C4:  ANDLW  C0
07C6:  MOVWF  FC1
....................    LCD_INIT();       //Inicializa el LCD 
07C8:  BRA    00DA
....................    LCD_PUTC("\f");   //Borrar el contenido del LCD 
07CA:  MOVLW  04
07CC:  MOVWF  FF6
07CE:  MOVLW  00
07D0:  MOVWF  FF7
07D2:  BRA    01C4
....................    WHILE(TRUE){ 
....................       set_adc_channel(PIN_SetPoint);          //Selecciono el canal 0 (RA0) 
07D4:  MOVLW  00
07D6:  MOVWF  01
07D8:  MOVF   FC2,W
07DA:  ANDLW  C3
07DC:  IORWF  01,W
07DE:  MOVWF  FC2
....................       bits_SetPoint=read_adc();              
07E0:  BSF    FC2.1
07E2:  BTFSC  FC2.1
07E4:  BRA    07E2
07E6:  MOVFF  FC3,04
07EA:  MOVFF  FC4,05
....................       delay_us(100); 
07EE:  MOVLW  20
07F0:  MOVWF  00
07F2:  DECFSZ 00,F
07F4:  BRA    07F2
07F6:  BRA    07F8
07F8:  NOP   
....................       set_adc_channel(PIN_PocitionReal);          //Selecciono el canal 0 (RA0) 
07FA:  MOVLW  04
07FC:  MOVWF  01
07FE:  MOVF   FC2,W
0800:  ANDLW  C3
0802:  IORWF  01,W
0804:  MOVWF  FC2
....................       bits_PocitionReal=read_adc();              
0806:  BSF    FC2.1
0808:  BTFSC  FC2.1
080A:  BRA    0808
080C:  MOVFF  FC3,06
0810:  MOVFF  FC4,07
....................       //(voltaje*valore_real*valro de conversion )/valor de muestreo  //valor de conversion menor de 100   
....................       //Var_SetPoint=bits_SetPoint*4.8;  
....................       Var_SetPoint = (5.0*bits_SetPoint)/1024.0; 
0814:  MOVFF  05,11
0818:  MOVFF  04,10
081C:  BRA    01E6
081E:  CLRF   20
0820:  CLRF   1F
0822:  MOVLW  20
0824:  MOVWF  1E
0826:  MOVLW  81
0828:  MOVWF  1D
082A:  MOVFF  03,24
082E:  MOVFF  02,23
0832:  MOVFF  01,22
0836:  MOVFF  00,21
083A:  RCALL  021E
083C:  MOVFF  03,13
0840:  MOVFF  02,12
0844:  MOVFF  01,11
0848:  MOVFF  00,10
084C:  MOVFF  03,17
0850:  MOVFF  02,16
0854:  MOVFF  01,15
0858:  MOVFF  00,14
085C:  CLRF   1B
085E:  CLRF   1A
0860:  CLRF   19
0862:  MOVLW  89
0864:  MOVWF  18
0866:  BRA    0310
0868:  MOVFF  03,0B
086C:  MOVFF  02,0A
0870:  MOVFF  01,09
0874:  MOVFF  00,08
....................      
....................       LCD_GOTOXY(1,1);        //Se ubica En la columna 5 fila 1 
0878:  MOVLW  01
087A:  MOVWF  1E
087C:  MOVWF  1F
087E:  RCALL  0152
....................       printf(lcd_putc,"ADC: %4Lu",bits_SetPoint);   
0880:  MOVLW  06
0882:  MOVWF  FF6
0884:  MOVLW  00
0886:  MOVWF  FF7
0888:  MOVLW  05
088A:  MOVWF  10
088C:  RCALL  046C
088E:  MOVLW  01
0890:  MOVWF  FE9
0892:  MOVFF  05,11
0896:  MOVFF  04,10
089A:  BRA    048A
....................  
....................       //printf(lcd_putc,"e= %u",bits_SetPoint); 
....................       LCD_GOTOXY(3,2);        //Ubicarse en la columna 3 fila 2 
089C:  MOVLW  03
089E:  MOVWF  1E
08A0:  MOVLW  02
08A2:  MOVWF  1F
08A4:  RCALL  0152
....................       //LCD_PUTC(numero); // Sacar el mensaje "Automatico" 
....................       printf(lcd_putc,"e= %f",Var_SetPoint); 
08A6:  MOVLW  10
08A8:  MOVWF  FF6
08AA:  MOVLW  00
08AC:  MOVWF  FF7
08AE:  MOVLW  03
08B0:  MOVWF  10
08B2:  RCALL  046C
08B4:  MOVLW  89
08B6:  MOVWF  FE9
08B8:  MOVFF  0B,13
08BC:  MOVFF  0A,12
08C0:  MOVFF  09,11
08C4:  MOVFF  08,10
08C8:  MOVLW  02
08CA:  MOVWF  14
08CC:  BRA    0614
08CE:  BRA    07D4
....................  
....................    } //Cierra while true 
.................... } 
08D0:  SLEEP 

Configuration Fuses:
   Word  1: C03F   PLL12 CPUDIV4 USBDIV XT FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
