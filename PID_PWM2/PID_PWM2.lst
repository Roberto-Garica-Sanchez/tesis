CCS PCH C Compiler, Version 5.015, 5967               18-ene.-21 16:00

               Filename:   D:\escuela\tesis\PID_PWM2\PID_PWM2.lst

               ROM used:   4690 bytes (14%)
                           Largest free fragment is 28078
               RAM used:   75 (4%) at main() level
                           101 (5%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   10C2
....................  
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  DATA 0C,00
0006:  DATA 62,00
0008:  DATA 56,00
000A:  DATA 62,00
000C:  DATA 56,00
000E:  DATA 0C,00
*
0202:  TBLRD*+
0204:  MOVF   FF5,F
0206:  BZ    0220
0208:  MOVFF  FF6,4B
020C:  MOVFF  FF7,4C
0210:  MOVFF  FF5,58
0214:  RCALL  01B2
0216:  MOVFF  4B,FF6
021A:  MOVFF  4C,FF7
021E:  BRA    0202
0220:  RETURN 0
*
028E:  MOVLW  8E
0290:  MOVWF  00
0292:  MOVFF  4C,01
0296:  MOVFF  4B,02
029A:  CLRF   03
029C:  MOVF   01,F
029E:  BNZ   02B2
02A0:  MOVFF  02,01
02A4:  CLRF   02
02A6:  MOVLW  08
02A8:  SUBWF  00,F
02AA:  MOVF   01,F
02AC:  BNZ   02B2
02AE:  CLRF   00
02B0:  BRA    02C2
02B2:  BCF    FD8.0
02B4:  BTFSC  01.7
02B6:  BRA    02C0
02B8:  RLCF   02,F
02BA:  RLCF   01,F
02BC:  DECF   00,F
02BE:  BRA    02B2
02C0:  BCF    01.7
02C2:  RETURN 0
02C4:  MOVF   58,W
02C6:  BTFSC  FD8.2
02C8:  BRA    03AC
02CA:  MOVWF  00
02CC:  MOVF   5C,W
02CE:  BTFSC  FD8.2
02D0:  BRA    03AC
02D2:  ADDWF  00,F
02D4:  BNC   02DE
02D6:  MOVLW  81
02D8:  ADDWF  00,F
02DA:  BC    03AC
02DC:  BRA    02E6
02DE:  MOVLW  7F
02E0:  SUBWF  00,F
02E2:  BNC   03AC
02E4:  BZ    03AC
02E6:  MOVFF  59,60
02EA:  MOVF   5D,W
02EC:  XORWF  x60,F
02EE:  BSF    59.7
02F0:  BSF    5D.7
02F2:  MOVF   5B,W
02F4:  MULWF  5F
02F6:  MOVFF  FF4,62
02FA:  MOVF   5A,W
02FC:  MULWF  5E
02FE:  MOVFF  FF4,03
0302:  MOVFF  FF3,61
0306:  MULWF  5F
0308:  MOVF   FF3,W
030A:  ADDWF  x62,F
030C:  MOVF   FF4,W
030E:  ADDWFC x61,F
0310:  MOVLW  00
0312:  ADDWFC 03,F
0314:  MOVF   5B,W
0316:  MULWF  5E
0318:  MOVF   FF3,W
031A:  ADDWF  x62,F
031C:  MOVF   FF4,W
031E:  ADDWFC x61,F
0320:  MOVLW  00
0322:  CLRF   02
0324:  ADDWFC 03,F
0326:  ADDWFC 02,F
0328:  MOVF   59,W
032A:  MULWF  5F
032C:  MOVF   FF3,W
032E:  ADDWF  x61,F
0330:  MOVF   FF4,W
0332:  ADDWFC 03,F
0334:  MOVLW  00
0336:  ADDWFC 02,F
0338:  MOVF   59,W
033A:  MULWF  5E
033C:  MOVF   FF3,W
033E:  ADDWF  03,F
0340:  MOVF   FF4,W
0342:  ADDWFC 02,F
0344:  MOVLW  00
0346:  CLRF   01
0348:  ADDWFC 01,F
034A:  MOVF   5B,W
034C:  MULWF  5D
034E:  MOVF   FF3,W
0350:  ADDWF  x61,F
0352:  MOVF   FF4,W
0354:  ADDWFC 03,F
0356:  MOVLW  00
0358:  ADDWFC 02,F
035A:  ADDWFC 01,F
035C:  MOVF   5A,W
035E:  MULWF  5D
0360:  MOVF   FF3,W
0362:  ADDWF  03,F
0364:  MOVF   FF4,W
0366:  ADDWFC 02,F
0368:  MOVLW  00
036A:  ADDWFC 01,F
036C:  MOVF   59,W
036E:  MULWF  5D
0370:  MOVF   FF3,W
0372:  ADDWF  02,F
0374:  MOVF   FF4,W
0376:  ADDWFC 01,F
0378:  INCF   00,F
037A:  BTFSC  01.7
037C:  BRA    0388
037E:  RLCF   x61,F
0380:  RLCF   03,F
0382:  RLCF   02,F
0384:  RLCF   01,F
0386:  DECF   00,F
0388:  MOVLW  00
038A:  BTFSS  x61.7
038C:  BRA    03A2
038E:  INCF   03,F
0390:  ADDWFC 02,F
0392:  ADDWFC 01,F
0394:  MOVF   01,W
0396:  BNZ   03A2
0398:  MOVF   02,W
039A:  BNZ   03A2
039C:  MOVF   03,W
039E:  BNZ   03A2
03A0:  INCF   00,F
03A2:  BTFSC  x60.7
03A4:  BSF    01.7
03A6:  BTFSS  x60.7
03A8:  BCF    01.7
03AA:  BRA    03B4
03AC:  CLRF   00
03AE:  CLRF   01
03B0:  CLRF   02
03B2:  CLRF   03
03B4:  RETURN 0
03B6:  MOVF   4F,W
03B8:  BTFSC  FD8.2
03BA:  BRA    0506
03BC:  MOVWF  5B
03BE:  MOVF   53,W
03C0:  BTFSC  FD8.2
03C2:  BRA    0506
03C4:  SUBWF  5B,F
03C6:  BNC   03D2
03C8:  MOVLW  7F
03CA:  ADDWF  5B,F
03CC:  BTFSC  FD8.0
03CE:  BRA    0506
03D0:  BRA    03DE
03D2:  MOVLW  81
03D4:  SUBWF  5B,F
03D6:  BTFSS  FD8.0
03D8:  BRA    0506
03DA:  BTFSC  FD8.2
03DC:  BRA    0506
03DE:  MOVFF  5B,00
03E2:  CLRF   01
03E4:  CLRF   02
03E6:  CLRF   03
03E8:  CLRF   5A
03EA:  MOVFF  50,59
03EE:  BSF    59.7
03F0:  MOVFF  51,58
03F4:  MOVFF  52,57
03F8:  MOVLW  19
03FA:  MOVWF  5B
03FC:  MOVF   56,W
03FE:  SUBWF  57,F
0400:  BC    041C
0402:  MOVLW  01
0404:  SUBWF  58,F
0406:  BC    041C
0408:  SUBWF  59,F
040A:  BC    041C
040C:  SUBWF  5A,F
040E:  BC    041C
0410:  INCF   5A,F
0412:  INCF   59,F
0414:  INCF   58,F
0416:  MOVF   56,W
0418:  ADDWF  57,F
041A:  BRA    046C
041C:  MOVF   55,W
041E:  SUBWF  58,F
0420:  BC    0446
0422:  MOVLW  01
0424:  SUBWF  59,F
0426:  BC    0446
0428:  SUBWF  5A,F
042A:  BC    0446
042C:  INCF   5A,F
042E:  INCF   59,F
0430:  MOVF   55,W
0432:  ADDWF  58,F
0434:  MOVF   56,W
0436:  ADDWF  57,F
0438:  BNC   046C
043A:  INCF   58,F
043C:  BNZ   046C
043E:  INCF   59,F
0440:  BNZ   046C
0442:  INCF   5A,F
0444:  BRA    046C
0446:  MOVF   54,W
0448:  IORLW  80
044A:  SUBWF  59,F
044C:  BC    046A
044E:  MOVLW  01
0450:  SUBWF  5A,F
0452:  BC    046A
0454:  INCF   5A,F
0456:  MOVF   54,W
0458:  IORLW  80
045A:  ADDWF  59,F
045C:  MOVF   55,W
045E:  ADDWF  58,F
0460:  BNC   0434
0462:  INCF   59,F
0464:  BNZ   0434
0466:  INCF   5A,F
0468:  BRA    0434
046A:  BSF    03.0
046C:  DECFSZ 5B,F
046E:  BRA    0472
0470:  BRA    0488
0472:  BCF    FD8.0
0474:  RLCF   57,F
0476:  RLCF   58,F
0478:  RLCF   59,F
047A:  RLCF   5A,F
047C:  BCF    FD8.0
047E:  RLCF   03,F
0480:  RLCF   02,F
0482:  RLCF   01,F
0484:  RLCF   5C,F
0486:  BRA    03FC
0488:  BTFSS  5C.0
048A:  BRA    0498
048C:  BCF    FD8.0
048E:  RRCF   01,F
0490:  RRCF   02,F
0492:  RRCF   03,F
0494:  RRCF   5C,F
0496:  BRA    049C
0498:  DECF   00,F
049A:  BZ    0506
049C:  BTFSC  5C.7
049E:  BRA    04DC
04A0:  BCF    FD8.0
04A2:  RLCF   57,F
04A4:  RLCF   58,F
04A6:  RLCF   59,F
04A8:  RLCF   5A,F
04AA:  MOVF   56,W
04AC:  SUBWF  57,F
04AE:  BC    04BE
04B0:  MOVLW  01
04B2:  SUBWF  58,F
04B4:  BC    04BE
04B6:  SUBWF  59,F
04B8:  BC    04BE
04BA:  SUBWF  5A,F
04BC:  BNC   04F2
04BE:  MOVF   55,W
04C0:  SUBWF  58,F
04C2:  BC    04CE
04C4:  MOVLW  01
04C6:  SUBWF  59,F
04C8:  BC    04CE
04CA:  SUBWF  5A,F
04CC:  BNC   04F2
04CE:  MOVF   54,W
04D0:  IORLW  80
04D2:  SUBWF  59,F
04D4:  BC    04DC
04D6:  MOVLW  01
04D8:  SUBWF  5A,F
04DA:  BNC   04F2
04DC:  INCF   03,F
04DE:  BNZ   04F2
04E0:  INCF   02,F
04E2:  BNZ   04F2
04E4:  INCF   01,F
04E6:  BNZ   04F2
04E8:  INCF   00,F
04EA:  BZ    0506
04EC:  RRCF   01,F
04EE:  RRCF   02,F
04F0:  RRCF   03,F
04F2:  MOVFF  50,5B
04F6:  MOVF   54,W
04F8:  XORWF  5B,F
04FA:  BTFSS  5B.7
04FC:  BRA    0502
04FE:  BSF    01.7
0500:  BRA    050E
0502:  BCF    01.7
0504:  BRA    050E
0506:  CLRF   00
0508:  CLRF   01
050A:  CLRF   02
050C:  CLRF   03
050E:  RETURN 0
*
0600:  MOVLW  80
0602:  BTFSC  FD8.1
0604:  XORWF  54,F
0606:  CLRF   59
0608:  CLRF   5A
060A:  MOVFF  50,58
060E:  MOVF   54,W
0610:  XORWF  58,F
0612:  MOVF   4F,W
0614:  BTFSC  FD8.2
0616:  BRA    07D0
0618:  MOVWF  57
061A:  MOVWF  00
061C:  MOVF   53,W
061E:  BTFSC  FD8.2
0620:  BRA    07E2
0622:  SUBWF  57,F
0624:  BTFSC  FD8.2
0626:  BRA    072A
0628:  BNC   06A4
062A:  MOVFF  54,5D
062E:  BSF    5D.7
0630:  MOVFF  55,5C
0634:  MOVFF  56,5B
0638:  CLRF   5A
063A:  BCF    FD8.0
063C:  RRCF   5D,F
063E:  RRCF   5C,F
0640:  RRCF   5B,F
0642:  RRCF   5A,F
0644:  DECFSZ 57,F
0646:  BRA    0638
0648:  BTFSS  58.7
064A:  BRA    0652
064C:  BSF    59.0
064E:  BRA    080A
0650:  BCF    59.0
0652:  BCF    57.0
0654:  BSF    59.4
0656:  CLRF   FEA
0658:  MOVLW  52
065A:  MOVWF  FE9
065C:  BRA    0830
065E:  BCF    59.4
0660:  BTFSC  58.7
0662:  BRA    0678
0664:  BTFSS  57.0
0666:  BRA    068E
0668:  RRCF   5D,F
066A:  RRCF   5C,F
066C:  RRCF   5B,F
066E:  RRCF   5A,F
0670:  INCF   00,F
0672:  BTFSC  FD8.2
0674:  BRA    0800
0676:  BRA    068E
0678:  BTFSC  5D.7
067A:  BRA    0694
067C:  BCF    FD8.0
067E:  RLCF   5A,F
0680:  RLCF   5B,F
0682:  RLCF   5C,F
0684:  RLCF   5D,F
0686:  DECF   00,F
0688:  BTFSC  FD8.2
068A:  BRA    0800
068C:  BRA    0678
068E:  BSF    59.6
0690:  BRA    0768
0692:  BCF    59.6
0694:  MOVFF  50,58
0698:  BTFSS  50.7
069A:  BRA    06A0
069C:  BSF    5D.7
069E:  BRA    07F2
06A0:  BCF    5D.7
06A2:  BRA    07F2
06A4:  MOVFF  53,57
06A8:  MOVFF  53,00
06AC:  MOVF   4F,W
06AE:  SUBWF  57,F
06B0:  MOVFF  50,5D
06B4:  BSF    5D.7
06B6:  MOVFF  51,5C
06BA:  MOVFF  52,5B
06BE:  CLRF   5A
06C0:  BCF    FD8.0
06C2:  RRCF   5D,F
06C4:  RRCF   5C,F
06C6:  RRCF   5B,F
06C8:  RRCF   5A,F
06CA:  DECFSZ 57,F
06CC:  BRA    06BE
06CE:  BTFSS  58.7
06D0:  BRA    06D8
06D2:  BSF    59.1
06D4:  BRA    080A
06D6:  BCF    59.1
06D8:  BCF    57.0
06DA:  BSF    59.5
06DC:  CLRF   FEA
06DE:  MOVLW  56
06E0:  MOVWF  FE9
06E2:  BRA    0830
06E4:  BCF    59.5
06E6:  BTFSC  58.7
06E8:  BRA    06FE
06EA:  BTFSS  57.0
06EC:  BRA    0714
06EE:  RRCF   5D,F
06F0:  RRCF   5C,F
06F2:  RRCF   5B,F
06F4:  RRCF   5A,F
06F6:  INCF   00,F
06F8:  BTFSC  FD8.2
06FA:  BRA    0800
06FC:  BRA    0714
06FE:  BTFSC  5D.7
0700:  BRA    071A
0702:  BCF    FD8.0
0704:  RLCF   5A,F
0706:  RLCF   5B,F
0708:  RLCF   5C,F
070A:  RLCF   5D,F
070C:  DECF   00,F
070E:  BTFSC  FD8.2
0710:  BRA    0800
0712:  BRA    06FE
0714:  BSF    59.7
0716:  BRA    0768
0718:  BCF    59.7
071A:  MOVFF  54,58
071E:  BTFSS  54.7
0720:  BRA    0726
0722:  BSF    5D.7
0724:  BRA    07F2
0726:  BCF    5D.7
0728:  BRA    07F2
072A:  MOVFF  54,5D
072E:  BSF    5D.7
0730:  MOVFF  55,5C
0734:  MOVFF  56,5B
0738:  BTFSS  58.7
073A:  BRA    0744
073C:  BCF    5D.7
073E:  BSF    59.2
0740:  BRA    080A
0742:  BCF    59.2
0744:  CLRF   5A
0746:  BCF    57.0
0748:  CLRF   FEA
074A:  MOVLW  52
074C:  MOVWF  FE9
074E:  BRA    0830
0750:  BTFSC  58.7
0752:  BRA    078C
0754:  MOVFF  50,58
0758:  BTFSS  57.0
075A:  BRA    0768
075C:  RRCF   5D,F
075E:  RRCF   5C,F
0760:  RRCF   5B,F
0762:  RRCF   5A,F
0764:  INCF   00,F
0766:  BZ    0800
0768:  BTFSS  5A.7
076A:  BRA    0782
076C:  INCF   5B,F
076E:  BNZ   0782
0770:  INCF   5C,F
0772:  BNZ   0782
0774:  INCF   5D,F
0776:  BNZ   0782
0778:  RRCF   5D,F
077A:  RRCF   5C,F
077C:  RRCF   5B,F
077E:  INCF   00,F
0780:  BZ    0800
0782:  BTFSC  59.6
0784:  BRA    0692
0786:  BTFSC  59.7
0788:  BRA    0718
078A:  BRA    07C4
078C:  MOVLW  80
078E:  XORWF  5D,F
0790:  BTFSS  5D.7
0792:  BRA    079C
0794:  BRA    080A
0796:  MOVFF  54,58
079A:  BRA    07B0
079C:  MOVFF  50,58
07A0:  MOVF   5D,F
07A2:  BNZ   07B0
07A4:  MOVF   5C,F
07A6:  BNZ   07B0
07A8:  MOVF   5B,F
07AA:  BNZ   07B0
07AC:  CLRF   00
07AE:  BRA    07F2
07B0:  BTFSC  5D.7
07B2:  BRA    07C4
07B4:  BCF    FD8.0
07B6:  RLCF   5A,F
07B8:  RLCF   5B,F
07BA:  RLCF   5C,F
07BC:  RLCF   5D,F
07BE:  DECFSZ 00,F
07C0:  BRA    07B0
07C2:  BRA    0800
07C4:  BTFSS  58.7
07C6:  BRA    07CC
07C8:  BSF    5D.7
07CA:  BRA    07F2
07CC:  BCF    5D.7
07CE:  BRA    07F2
07D0:  MOVFF  53,00
07D4:  MOVFF  54,5D
07D8:  MOVFF  55,5C
07DC:  MOVFF  56,5B
07E0:  BRA    07F2
07E2:  MOVFF  4F,00
07E6:  MOVFF  50,5D
07EA:  MOVFF  51,5C
07EE:  MOVFF  52,5B
07F2:  MOVFF  5D,01
07F6:  MOVFF  5C,02
07FA:  MOVFF  5B,03
07FE:  BRA    0868
0800:  CLRF   00
0802:  CLRF   01
0804:  CLRF   02
0806:  CLRF   03
0808:  BRA    0868
080A:  CLRF   5A
080C:  COMF   5B,F
080E:  COMF   5C,F
0810:  COMF   5D,F
0812:  COMF   5A,F
0814:  INCF   5A,F
0816:  BNZ   0822
0818:  INCF   5B,F
081A:  BNZ   0822
081C:  INCF   5C,F
081E:  BNZ   0822
0820:  INCF   5D,F
0822:  BTFSC  59.0
0824:  BRA    0650
0826:  BTFSC  59.1
0828:  BRA    06D6
082A:  BTFSC  59.2
082C:  BRA    0742
082E:  BRA    0796
0830:  MOVF   FEF,W
0832:  ADDWF  5B,F
0834:  BNC   0840
0836:  INCF   5C,F
0838:  BNZ   0840
083A:  INCF   5D,F
083C:  BTFSC  FD8.2
083E:  BSF    57.0
0840:  MOVF   FED,F
0842:  MOVF   FEF,W
0844:  ADDWF  5C,F
0846:  BNC   084E
0848:  INCF   5D,F
084A:  BTFSC  FD8.2
084C:  BSF    57.0
084E:  MOVF   FED,F
0850:  MOVF   FEF,W
0852:  BTFSC  FEF.7
0854:  BRA    0858
0856:  XORLW  80
0858:  ADDWF  5D,F
085A:  BTFSC  FD8.0
085C:  BSF    57.0
085E:  BTFSC  59.4
0860:  BRA    065E
0862:  BTFSC  59.5
0864:  BRA    06E4
0866:  BRA    0750
0868:  RETURN 0
*
0B34:  MOVFF  4C,53
0B38:  MOVF   50,W
0B3A:  XORWF  53,F
0B3C:  BTFSS  53.7
0B3E:  BRA    0B4A
0B40:  BCF    FD8.2
0B42:  BCF    FD8.0
0B44:  BTFSC  4C.7
0B46:  BSF    FD8.0
0B48:  BRA    0BA8
0B4A:  MOVFF  4C,53
0B4E:  MOVFF  4F,54
0B52:  MOVF   4B,W
0B54:  SUBWF  54,F
0B56:  BZ    0B64
0B58:  BTFSS  53.7
0B5A:  BRA    0BA8
0B5C:  MOVF   FD8,W
0B5E:  XORLW  01
0B60:  MOVWF  FD8
0B62:  BRA    0BA8
0B64:  MOVFF  50,54
0B68:  MOVF   4C,W
0B6A:  SUBWF  54,F
0B6C:  BZ    0B7A
0B6E:  BTFSS  53.7
0B70:  BRA    0BA8
0B72:  MOVF   FD8,W
0B74:  XORLW  01
0B76:  MOVWF  FD8
0B78:  BRA    0BA8
0B7A:  MOVFF  51,54
0B7E:  MOVF   4D,W
0B80:  SUBWF  54,F
0B82:  BZ    0B90
0B84:  BTFSS  53.7
0B86:  BRA    0BA8
0B88:  MOVF   FD8,W
0B8A:  XORLW  01
0B8C:  MOVWF  FD8
0B8E:  BRA    0BA8
0B90:  MOVFF  52,54
0B94:  MOVF   4E,W
0B96:  SUBWF  54,F
0B98:  BZ    0BA6
0B9A:  BTFSS  53.7
0B9C:  BRA    0BA8
0B9E:  MOVF   FD8,W
0BA0:  XORLW  01
0BA2:  MOVWF  FD8
0BA4:  BRA    0BA8
0BA6:  BCF    FD8.0
0BA8:  RETURN 0
*
0C38:  MOVLW  8E
0C3A:  MOVWF  00
0C3C:  MOVF   4B,W
0C3E:  SUBWF  00,F
0C40:  MOVFF  4C,02
0C44:  MOVFF  4D,01
0C48:  BSF    02.7
0C4A:  MOVF   00,F
0C4C:  BZ    0C60
0C4E:  BCF    FD8.0
0C50:  MOVF   02,F
0C52:  BNZ   0C58
0C54:  MOVF   01,F
0C56:  BZ    0C60
0C58:  RRCF   02,F
0C5A:  RRCF   01,F
0C5C:  DECFSZ 00,F
0C5E:  BRA    0C4E
0C60:  BTFSS  4C.7
0C62:  BRA    0C6E
0C64:  COMF   01,F
0C66:  COMF   02,F
0C68:  INCF   01,F
0C6A:  BTFSC  FD8.2
0C6C:  INCF   02,F
0C6E:  GOTO   0CD2 (RETURN)
*
0DB6:  MOVFF  FEA,53
0DBA:  MOVFF  FE9,52
0DBE:  SWAPF  4C,W
0DC0:  IORLW  F0
0DC2:  MOVWF  4E
0DC4:  ADDWF  4E,F
0DC6:  ADDLW  E2
0DC8:  MOVWF  4F
0DCA:  ADDLW  32
0DCC:  MOVWF  51
0DCE:  MOVF   4C,W
0DD0:  ANDLW  0F
0DD2:  ADDWF  4F,F
0DD4:  ADDWF  4F,F
0DD6:  ADDWF  51,F
0DD8:  ADDLW  E9
0DDA:  MOVWF  50
0DDC:  ADDWF  50,F
0DDE:  ADDWF  50,F
0DE0:  SWAPF  4B,W
0DE2:  ANDLW  0F
0DE4:  ADDWF  50,F
0DE6:  ADDWF  51,F
0DE8:  RLCF   50,F
0DEA:  RLCF   51,F
0DEC:  COMF   51,F
0DEE:  RLCF   51,F
0DF0:  MOVF   4B,W
0DF2:  ANDLW  0F
0DF4:  ADDWF  51,F
0DF6:  RLCF   4E,F
0DF8:  MOVLW  07
0DFA:  MOVWF  4D
0DFC:  MOVLW  0A
0DFE:  DECF   50,F
0E00:  ADDWF  51,F
0E02:  BNC   0DFE
0E04:  DECF   4F,F
0E06:  ADDWF  50,F
0E08:  BNC   0E04
0E0A:  DECF   4E,F
0E0C:  ADDWF  4F,F
0E0E:  BNC   0E0A
0E10:  DECF   4D,F
0E12:  ADDWF  4E,F
0E14:  BNC   0E10
0E16:  CLRF   FEA
0E18:  MOVLW  4D
0E1A:  MOVWF  FE9
0E1C:  MOVLW  07
0E1E:  ANDWF  52,W
0E20:  BCF    52.6
0E22:  ADDWF  FE9,F
0E24:  MOVLW  00
0E26:  ADDWFC FEA,F
0E28:  MOVF   FE9,W
0E2A:  SUBLW  51
0E2C:  BNZ   0E34
0E2E:  MOVF   FEA,F
0E30:  BNZ   0E34
0E32:  BSF    52.6
0E34:  MOVF   FEF,W
0E36:  MOVWF  00
0E38:  BNZ   0E4A
0E3A:  BTFSC  52.6
0E3C:  BRA    0E4A
0E3E:  BTFSC  52.4
0E40:  BRA    0E6A
0E42:  BTFSC  52.3
0E44:  BRA    0E4A
0E46:  MOVLW  20
0E48:  BRA    0E50
0E4A:  BSF    52.3
0E4C:  BCF    52.4
0E4E:  MOVLW  30
0E50:  ADDWF  00,F
0E52:  MOVFF  FEA,4C
0E56:  MOVFF  FE9,4B
0E5A:  MOVFF  00,58
0E5E:  CALL   01B2
0E62:  MOVFF  4C,FEA
0E66:  MOVFF  4B,FE9
0E6A:  MOVF   FEE,W
0E6C:  BTFSS  52.6
0E6E:  BRA    0E28
0E70:  RETURN 0
0E72:  MOVF   58,W
0E74:  SUBLW  B6
0E76:  MOVWF  58
0E78:  CLRF   03
0E7A:  MOVFF  59,5C
0E7E:  BSF    59.7
0E80:  BCF    FD8.0
0E82:  RRCF   59,F
0E84:  RRCF   5A,F
0E86:  RRCF   5B,F
0E88:  RRCF   03,F
0E8A:  RRCF   02,F
0E8C:  RRCF   01,F
0E8E:  RRCF   00,F
0E90:  DECFSZ 58,F
0E92:  BRA    0E80
0E94:  BTFSS  5C.7
0E96:  BRA    0EAE
0E98:  COMF   00,F
0E9A:  COMF   01,F
0E9C:  COMF   02,F
0E9E:  COMF   03,F
0EA0:  INCF   00,F
0EA2:  BTFSC  FD8.2
0EA4:  INCF   01,F
0EA6:  BTFSC  FD8.2
0EA8:  INCF   02,F
0EAA:  BTFSC  FD8.2
0EAC:  INCF   03,F
0EAE:  GOTO   0F90 (RETURN)
0EB2:  BTFSC  FD8.1
0EB4:  BRA    0EBC
0EB6:  CLRF   FEA
0EB8:  MOVLW  60
0EBA:  MOVWF  FE9
0EBC:  CLRF   00
0EBE:  CLRF   01
0EC0:  CLRF   02
0EC2:  CLRF   03
0EC4:  CLRF   x60
0EC6:  CLRF   x61
0EC8:  CLRF   x62
0ECA:  CLRF   x63
0ECC:  MOVF   5F,W
0ECE:  IORWF  5E,W
0ED0:  IORWF  5D,W
0ED2:  IORWF  5C,W
0ED4:  BZ    0F2E
0ED6:  MOVLW  20
0ED8:  MOVWF  x64
0EDA:  BCF    FD8.0
0EDC:  RLCF   58,F
0EDE:  RLCF   59,F
0EE0:  RLCF   5A,F
0EE2:  RLCF   5B,F
0EE4:  RLCF   x60,F
0EE6:  RLCF   x61,F
0EE8:  RLCF   x62,F
0EEA:  RLCF   x63,F
0EEC:  MOVF   5F,W
0EEE:  SUBWF  x63,W
0EF0:  BNZ   0F02
0EF2:  MOVF   5E,W
0EF4:  SUBWF  x62,W
0EF6:  BNZ   0F02
0EF8:  MOVF   5D,W
0EFA:  SUBWF  x61,W
0EFC:  BNZ   0F02
0EFE:  MOVF   5C,W
0F00:  SUBWF  x60,W
0F02:  BNC   0F22
0F04:  MOVF   5C,W
0F06:  SUBWF  x60,F
0F08:  MOVF   5D,W
0F0A:  BTFSS  FD8.0
0F0C:  INCFSZ 5D,W
0F0E:  SUBWF  x61,F
0F10:  MOVF   5E,W
0F12:  BTFSS  FD8.0
0F14:  INCFSZ 5E,W
0F16:  SUBWF  x62,F
0F18:  MOVF   5F,W
0F1A:  BTFSS  FD8.0
0F1C:  INCFSZ 5F,W
0F1E:  SUBWF  x63,F
0F20:  BSF    FD8.0
0F22:  RLCF   00,F
0F24:  RLCF   01,F
0F26:  RLCF   02,F
0F28:  RLCF   03,F
0F2A:  DECFSZ x64,F
0F2C:  BRA    0EDA
0F2E:  MOVFF  60,FEF
0F32:  MOVFF  61,FEC
0F36:  MOVFF  62,FEC
0F3A:  MOVFF  63,FEC
0F3E:  RETURN 0
0F40:  MOVF   FE9,W
0F42:  MOVWF  50
0F44:  MOVF   4F,W
0F46:  MOVWF  52
0F48:  BZ    0F7E
0F4A:  MOVFF  4E,5B
0F4E:  MOVFF  4D,5A
0F52:  MOVFF  4C,59
0F56:  MOVFF  4B,58
0F5A:  CLRF   5F
0F5C:  CLRF   5E
0F5E:  MOVLW  20
0F60:  MOVWF  5D
0F62:  MOVLW  82
0F64:  MOVWF  5C
0F66:  CALL   02C4
0F6A:  MOVFF  03,4E
0F6E:  MOVFF  02,4D
0F72:  MOVFF  01,4C
0F76:  MOVFF  00,4B
0F7A:  DECFSZ 52,F
0F7C:  BRA    0F4A
0F7E:  MOVFF  4E,5B
0F82:  MOVFF  4D,5A
0F86:  MOVFF  4C,59
0F8A:  MOVFF  4B,58
0F8E:  BRA    0E72
0F90:  MOVFF  03,4E
0F94:  MOVFF  02,4D
0F98:  MOVFF  01,4C
0F9C:  MOVFF  00,4B
0FA0:  BTFSS  4E.7
0FA2:  BRA    0FBE
0FA4:  DECF   50,F
0FA6:  BSF    50.5
0FA8:  COMF   4B,F
0FAA:  COMF   4C,F
0FAC:  COMF   4D,F
0FAE:  COMF   4E,F
0FB0:  INCF   4B,F
0FB2:  BTFSC  FD8.2
0FB4:  INCF   4C,F
0FB6:  BTFSC  FD8.2
0FB8:  INCF   4D,F
0FBA:  BTFSC  FD8.2
0FBC:  INCF   4E,F
0FBE:  MOVLW  3B
0FC0:  MOVWF  57
0FC2:  MOVLW  9A
0FC4:  MOVWF  56
0FC6:  MOVLW  CA
0FC8:  MOVWF  55
0FCA:  CLRF   54
0FCC:  MOVLW  0A
0FCE:  MOVWF  52
0FD0:  MOVF   4F,W
0FD2:  BTFSC  FD8.2
0FD4:  INCF   50,F
0FD6:  BSF    FD8.1
0FD8:  CLRF   FEA
0FDA:  MOVLW  4B
0FDC:  MOVWF  FE9
0FDE:  MOVFF  4E,5B
0FE2:  MOVFF  4D,5A
0FE6:  MOVFF  4C,59
0FEA:  MOVFF  4B,58
0FEE:  MOVFF  57,5F
0FF2:  MOVFF  56,5E
0FF6:  MOVFF  55,5D
0FFA:  MOVFF  54,5C
0FFE:  RCALL  0EB2
1000:  MOVF   01,W
1002:  MOVF   00,F
1004:  BNZ   1024
1006:  INCF   4F,W
1008:  SUBWF  52,W
100A:  BZ    1024
100C:  MOVF   50,W
100E:  BZ    1028
1010:  ANDLW  0F
1012:  SUBWF  52,W
1014:  BZ    1018
1016:  BC    108E
1018:  BTFSC  50.7
101A:  BRA    108E
101C:  BTFSC  50.6
101E:  BRA    1028
1020:  MOVLW  20
1022:  BRA    1084
1024:  MOVLW  20
1026:  ANDWF  50,F
1028:  BTFSS  50.5
102A:  BRA    1046
102C:  BCF    50.5
102E:  MOVF   4F,W
1030:  BTFSS  FD8.2
1032:  DECF   50,F
1034:  MOVF   00,W
1036:  MOVWF  50
1038:  MOVLW  2D
103A:  MOVWF  58
103C:  CALL   01B2
1040:  MOVF   50,W
1042:  MOVWF  00
1044:  CLRF   50
1046:  MOVF   4F,W
1048:  SUBWF  52,W
104A:  BNZ   1062
104C:  MOVF   00,W
104E:  MOVWF  50
1050:  MOVLW  2E
1052:  MOVWF  58
1054:  CALL   01B2
1058:  MOVF   50,W
105A:  MOVWF  00
105C:  MOVLW  20
105E:  ANDWF  50,F
1060:  MOVLW  00
1062:  MOVLW  30
1064:  BTFSS  50.5
1066:  BRA    1084
1068:  BCF    50.5
106A:  MOVF   4F,W
106C:  BTFSS  FD8.2
106E:  DECF   50,F
1070:  MOVF   00,W
1072:  MOVWF  50
1074:  MOVLW  2D
1076:  MOVWF  58
1078:  CALL   01B2
107C:  MOVF   50,W
107E:  MOVWF  00
1080:  CLRF   50
1082:  MOVLW  30
1084:  ADDWF  00,F
1086:  MOVFF  00,58
108A:  CALL   01B2
108E:  BCF    FD8.1
1090:  MOVFF  57,5B
1094:  MOVFF  56,5A
1098:  MOVFF  55,59
109C:  MOVFF  54,58
10A0:  CLRF   5F
10A2:  CLRF   5E
10A4:  CLRF   5D
10A6:  MOVLW  0A
10A8:  MOVWF  5C
10AA:  RCALL  0EB2
10AC:  MOVFF  03,57
10B0:  MOVFF  02,56
10B4:  MOVFF  01,55
10B8:  MOVFF  00,54
10BC:  DECFSZ 52,F
10BE:  BRA    0FD6
10C0:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10  
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,PUT,BROWNOUT,INTRC_IO   
.................... #use delay(clock=4000000)  
*
0054:  CLRF   FEA
0056:  MOVLW  59
0058:  MOVWF  FE9
005A:  MOVF   FEF,W
005C:  BZ    007A
005E:  MOVLW  01
0060:  MOVWF  01
0062:  CLRF   00
0064:  DECFSZ 00,F
0066:  BRA    0064
0068:  DECFSZ 01,F
006A:  BRA    0062
006C:  MOVLW  4A
006E:  MOVWF  00
0070:  DECFSZ 00,F
0072:  BRA    0070
0074:  BRA    0076
0076:  DECFSZ FEF,F
0078:  BRA    005E
007A:  RETURN 0
.................... #INCLUDE <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00A0:  MOVLW  0F
00A2:  ANDWF  F95,W
00A4:  IORLW  F0
00A6:  MOVWF  F95
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A8:  BSF    F8C.2
....................    delay_cycles(1); 
00AA:  NOP   
....................    lcd_output_enable(1); 
00AC:  BSF    F8C.0
....................    delay_cycles(1); 
00AE:  NOP   
....................    high = lcd_read_nibble(); 
00B0:  RCALL  0094
00B2:  MOVFF  01,60
....................        
....................    lcd_output_enable(0); 
00B6:  BCF    F8C.0
....................    delay_cycles(1); 
00B8:  NOP   
....................    lcd_output_enable(1); 
00BA:  BSF    F8C.0
....................    delay_us(1); 
00BC:  NOP   
....................    low = lcd_read_nibble(); 
00BE:  RCALL  0094
00C0:  MOVFF  01,5F
....................        
....................    lcd_output_enable(0); 
00C4:  BCF    F8C.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00C6:  MOVLW  0F
00C8:  ANDWF  F95,W
00CA:  MOVWF  F95
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CC:  SWAPF  x60,W
00CE:  MOVWF  00
00D0:  MOVLW  F0
00D2:  ANDWF  00,F
00D4:  MOVF   00,W
00D6:  IORWF  5F,W
00D8:  MOVWF  01
00DA:  GOTO   00E8 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0094:  MOVF   F83,W
0096:  MOVWF  00
0098:  SWAPF  00,W
009A:  ANDLW  0F
009C:  MOVWF  01
....................   #endif 
009E:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
007C:  SWAPF  x60,W
007E:  ANDLW  F0
0080:  MOVWF  00
0082:  MOVLW  0F
0084:  ANDWF  F8C,W
0086:  IORWF  00,W
0088:  MOVWF  F8C
....................   #endif 
....................        
....................    delay_cycles(1); 
008A:  NOP   
....................    lcd_output_enable(1); 
008C:  BSF    F8C.0
....................    delay_us(2); 
008E:  BRA    0090
....................    lcd_output_enable(0); 
0090:  BCF    F8C.0
0092:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00DE:  BCF    F95.0
....................    lcd_rs_tris(); 
00E0:  BCF    F95.1
....................    lcd_rw_tris(); 
00E2:  BCF    F95.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00E4:  BCF    F8C.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
00E6:  BRA    00A0
00E8:  MOVFF  01,5F
00EC:  BTFSC  01.7
00EE:  BRA    00E6
....................    lcd_output_rs(address); 
00F0:  BCF    F8C.1
00F2:  BTFSC  5D.0
00F4:  BSF    F8C.1
....................    delay_cycles(1); 
00F6:  NOP   
....................    lcd_output_rw(0); 
00F8:  BCF    F8C.2
....................    delay_cycles(1); 
00FA:  NOP   
....................    lcd_output_enable(0); 
00FC:  BCF    F8C.0
....................    lcd_send_nibble(n >> 4); 
00FE:  SWAPF  5E,W
0100:  MOVWF  5F
0102:  MOVLW  0F
0104:  ANDWF  5F,F
0106:  MOVFF  5F,60
010A:  RCALL  007C
....................    lcd_send_nibble(n & 0xf); 
010C:  MOVF   5E,W
010E:  ANDLW  0F
0110:  MOVWF  5F
0112:  MOVWF  x60
0114:  RCALL  007C
0116:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0118:  MOVLW  28
011A:  MOVWF  4C
011C:  MOVLW  0C
011E:  MOVWF  4D
0120:  MOVLW  01
0122:  MOVWF  4E
0124:  MOVLW  06
0126:  MOVWF  4F
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0128:  BCF    F8C.0
....................    lcd_output_rs(0); 
012A:  BCF    F8C.1
....................    lcd_output_rw(0); 
012C:  BCF    F8C.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
012E:  MOVLW  0F
0130:  ANDWF  F95,W
0132:  MOVWF  F95
....................   #endif 
....................    lcd_enable_tris(); 
0134:  BCF    F95.0
....................    lcd_rs_tris(); 
0136:  BCF    F95.1
....................    lcd_rw_tris(); 
0138:  BCF    F95.2
....................  #endif 
....................      
....................    delay_ms(15); 
013A:  MOVLW  0F
013C:  MOVWF  59
013E:  RCALL  0054
....................    for(i=1;i<=3;++i) 
0140:  MOVLW  01
0142:  MOVWF  4B
0144:  MOVF   4B,W
0146:  SUBLW  03
0148:  BNC   015A
....................    { 
....................        lcd_send_nibble(3); 
014A:  MOVLW  03
014C:  MOVWF  x60
014E:  RCALL  007C
....................        delay_ms(5); 
0150:  MOVLW  05
0152:  MOVWF  59
0154:  RCALL  0054
0156:  INCF   4B,F
0158:  BRA    0144
....................    } 
....................     
....................    lcd_send_nibble(2); 
015A:  MOVLW  02
015C:  MOVWF  x60
015E:  RCALL  007C
....................    delay_ms(5); 
0160:  MOVLW  05
0162:  MOVWF  59
0164:  RCALL  0054
....................    for(i=0;i<=3;++i) 
0166:  CLRF   4B
0168:  MOVF   4B,W
016A:  SUBLW  03
016C:  BNC   018C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
016E:  CLRF   03
0170:  MOVF   4B,W
0172:  ADDLW  4C
0174:  MOVWF  FE9
0176:  MOVLW  00
0178:  ADDWFC 03,W
017A:  MOVWF  FEA
017C:  MOVFF  FEF,50
0180:  CLRF   5D
0182:  MOVFF  50,5E
0186:  RCALL  00DE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0188:  INCF   4B,F
018A:  BRA    0168
018C:  GOTO   115E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0190:  DECFSZ 5A,W
0192:  BRA    0196
0194:  BRA    019C
....................       address=LCD_LINE_TWO; 
0196:  MOVLW  40
0198:  MOVWF  5B
019A:  BRA    019E
....................    else 
....................       address=0; 
019C:  CLRF   5B
....................       
....................    address+=x-1; 
019E:  MOVLW  01
01A0:  SUBWF  59,W
01A2:  ADDWF  5B,F
....................    lcd_send_byte(0,0x80|address); 
01A4:  MOVF   5B,W
01A6:  IORLW  80
01A8:  MOVWF  5C
01AA:  CLRF   5D
01AC:  MOVWF  5E
01AE:  RCALL  00DE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01B0:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01B2:  MOVF   58,W
01B4:  XORLW  07
01B6:  BZ    01C6
01B8:  XORLW  0B
01BA:  BZ    01D0
01BC:  XORLW  06
01BE:  BZ    01E0
01C0:  XORLW  02
01C2:  BZ    01EC
01C4:  BRA    01F6
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01C6:  MOVLW  01
01C8:  MOVWF  59
01CA:  MOVWF  5A
01CC:  RCALL  0190
01CE:  BRA    0200
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01D0:  CLRF   5D
01D2:  MOVLW  01
01D4:  MOVWF  5E
01D6:  RCALL  00DE
....................                      delay_ms(2); 
01D8:  MOVLW  02
01DA:  MOVWF  59
01DC:  RCALL  0054
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01DE:  BRA    0200
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01E0:  MOVLW  01
01E2:  MOVWF  59
01E4:  MOVLW  02
01E6:  MOVWF  5A
01E8:  RCALL  0190
01EA:  BRA    0200
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01EC:  CLRF   5D
01EE:  MOVLW  10
01F0:  MOVWF  5E
01F2:  RCALL  00DE
01F4:  BRA    0200
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01F6:  MOVLW  01
01F8:  MOVWF  5D
01FA:  MOVFF  58,5E
01FE:  RCALL  00DE
....................      #endif 
....................    } 
0200:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #USE STANDARD_IO(A) 
.................... #USE STANDARD_IO(B) 
.................... #USE STANDARD_IO(C) 
.................... #USE STANDARD_IO(D) 
.................... #USE STANDARD_IO(E) 
.................... #include <PID_PWM2.h> 
....................  
.................... #USE STANDARD_IO(A) 
.................... #USE STANDARD_IO(B) 
.................... #USE STANDARD_IO(C) 
.................... #USE STANDARD_IO(D) 
.................... #USE STANDARD_IO(E) 
.................... //####################################################################### 
.................... //programa diseñado para controlar un motor mediante el uso de una puente H  
.................... //Control de giro, velocidad  
.................... //inplementando un PID para mejorar la precision 
....................  
.................... #define PIN_SetPoint  0    //[AN0]setpoint      set_adc_channel(0); 
.................... #define PIN_PocitionReal 1 //[AN1]posicion real set_adc_channel(1); 
.................... //variables tipo bits 
.................... unsigned int16 bits_SetPoint=0; 
.................... unsigned int16 bits_PocitionReal=0; 
.................... unsigned int16 bits_difer=0; 
.................... unsigned int16 bits_RES=0; 
.................... //variable control PWM 
.................... int16 duty=0; 
.................... int Timer2=249;         //Se carga timer 2 con 249 
.................... int Poscaler=1;         //Preescaler solo puede tomar valores de: 1 
.................... //variable control giro motor  
.................... int cambio,giro=1;//giro 1 si es negativos los valores  
.................... //#########     PID 
.................... float Var_SetPoint=0; 
.................... float Var_PocitionReal=0; 
.................... float Var_error_0=0; 
.................... float Var_error_1=0; 
.................... float Var_error_2=0; 
.................... float a,b,c;               //variables temporales 
.................... float t=1;                 //periodo de muestreo  
.................... int   k=0;                 //contrador de muestras 
.................... float Var_res_0;           //Salidas 
.................... float Var_res_1;           //Salidas 
.................... //#########    ganancias 
.................... float kp=1;                //proporcional 
.................... float kd=0.2;              //Derivativa 
.................... float ki=0.2;              //integral 
.................... void star_PWM_2HILOS(void){     
....................    setup_timer_2(t2_div_by_4,Timer2,Poscaler);    
*
0010:  MOVLW  01
0012:  SUBWF  0F,W
0014:  MOVWF  01
0016:  RLCF   01,W
0018:  MOVWF  00
001A:  RLCF   00,F
001C:  RLCF   00,F
001E:  MOVLW  F8
0020:  ANDWF  00,F
0022:  MOVF   00,W
0024:  IORLW  05
0026:  MOVWF  FCA
0028:  MOVFF  0E,FCB
....................    setup_ccp1(ccp_pwm);      //Configurar modulo CCP1 en modo PWM 
002C:  BCF    F94.2
002E:  BCF    F8B.2
0030:  MOVLW  0C
0032:  MOVWF  FBD
0034:  CLRF   FB7
0036:  CLRF   FB6
....................    setup_ccp2(ccp_pwm);      //Configurar modulo CCP2 en modo PWM 
0038:  BCF    F94.1
003A:  BCF    F8B.1
003C:  MOVWF  FBA
....................    //Configurar ADC configuracion  
....................    //de los puertos que funcionan en analogico  
....................    setup_adc_ports(all_analog);         
003E:  MOVF   FC1,W
0040:  ANDLW  C0
0042:  MOVWF  FC1
....................    setup_adc(adc_clock_internal);       
0044:  MOVF   FC0,W
0046:  ANDLW  C0
0048:  IORLW  07
004A:  MOVWF  FC0
004C:  BSF    FC0.7
004E:  BSF    FC2.0
0050:  GOTO   115A (RETURN)
.................... } 
.................... int16 read_SetPoint(){    
....................       //leer setpoint  
....................       set_adc_channel(PIN_SetPoint);//selecciona valore deseado setpoint   
*
0222:  MOVLW  00
0224:  MOVWF  01
0226:  MOVF   FC2,W
0228:  ANDLW  C3
022A:  IORWF  01,W
022C:  MOVWF  FC2
....................       delay_us(100);        
022E:  MOVLW  20
0230:  MOVWF  00
0232:  DECFSZ 00,F
0234:  BRA    0232
0236:  BRA    0238
0238:  NOP   
....................       return bits_SetPoint=read_adc();  
023A:  BSF    FC2.1
023C:  BTFSC  FC2.1
023E:  BRA    023C
0240:  MOVFF  FC4,03
0244:  MOVFF  FC3,04
0248:  MOVFF  FC4,05
024C:  MOVFF  04,01
0250:  MOVFF  05,02
0254:  GOTO   116E (RETURN)
.................... } 
.................... int16 read_PocitionReal(){      
....................    //leer posicion real  
....................    set_adc_channel(PIN_PocitionReal);  //seleciona la posicion real  
0258:  MOVLW  04
025A:  MOVWF  01
025C:  MOVF   FC2,W
025E:  ANDLW  C3
0260:  IORWF  01,W
0262:  MOVWF  FC2
....................    delay_us(100);        
0264:  MOVLW  20
0266:  MOVWF  00
0268:  DECFSZ 00,F
026A:  BRA    0268
026C:  BRA    026E
026E:  NOP   
....................    return bits_PocitionReal=read_adc();       //leer          
0270:  BSF    FC2.1
0272:  BTFSC  FC2.1
0274:  BRA    0272
0276:  MOVFF  FC4,03
027A:  MOVFF  FC3,06
027E:  MOVFF  FC4,07
0282:  MOVFF  06,01
0286:  MOVFF  07,02
028A:  GOTO   1172 (RETURN)
.................... } 
.................... float conver_bits_to_vol_SetPoint(){ 
....................    return Var_SetPoint      = (5.0*bits_SetPoint)/1024.0;  
*
0510:  MOVFF  05,4C
0514:  MOVFF  04,4B
0518:  RCALL  028E
051A:  CLRF   5B
051C:  CLRF   5A
051E:  MOVLW  20
0520:  MOVWF  59
0522:  MOVLW  81
0524:  MOVWF  58
0526:  MOVFF  03,5F
052A:  MOVFF  02,5E
052E:  MOVFF  01,5D
0532:  MOVFF  00,5C
0536:  RCALL  02C4
0538:  MOVFF  03,4E
053C:  MOVFF  02,4D
0540:  MOVFF  01,4C
0544:  MOVFF  00,4B
0548:  MOVFF  03,52
054C:  MOVFF  02,51
0550:  MOVFF  01,50
0554:  MOVFF  00,4F
0558:  CLRF   56
055A:  CLRF   55
055C:  CLRF   54
055E:  MOVLW  89
0560:  MOVWF  53
0562:  RCALL  03B6
0564:  MOVFF  03,15
0568:  MOVFF  02,14
056C:  MOVFF  01,13
0570:  MOVFF  00,12
0574:  MOVFF  12,00
0578:  MOVFF  13,01
057C:  MOVFF  14,02
0580:  MOVFF  15,03
0584:  GOTO   1176 (RETURN)
.................... } 
.................... float conver_bits_to_vol_PocitionReal(){ 
....................    return Var_PocitionReal  = (5.0*bits_PocitionReal)/1024.0; 
0588:  MOVFF  07,4C
058C:  MOVFF  06,4B
0590:  RCALL  028E
0592:  CLRF   5B
0594:  CLRF   5A
0596:  MOVLW  20
0598:  MOVWF  59
059A:  MOVLW  81
059C:  MOVWF  58
059E:  MOVFF  03,5F
05A2:  MOVFF  02,5E
05A6:  MOVFF  01,5D
05AA:  MOVFF  00,5C
05AE:  RCALL  02C4
05B0:  MOVFF  03,4E
05B4:  MOVFF  02,4D
05B8:  MOVFF  01,4C
05BC:  MOVFF  00,4B
05C0:  MOVFF  03,52
05C4:  MOVFF  02,51
05C8:  MOVFF  01,50
05CC:  MOVFF  00,4F
05D0:  CLRF   56
05D2:  CLRF   55
05D4:  CLRF   54
05D6:  MOVLW  89
05D8:  MOVWF  53
05DA:  RCALL  03B6
05DC:  MOVFF  03,19
05E0:  MOVFF  02,18
05E4:  MOVFF  01,17
05E8:  MOVFF  00,16
05EC:  MOVFF  16,00
05F0:  MOVFF  17,01
05F4:  MOVFF  18,02
05F8:  MOVFF  19,03
05FC:  GOTO   117A (RETURN)
.................... } 
.................... void calculos_PID(){    
....................    Var_error_2=Var_error_1; 
*
086A:  MOVFF  21,25
086E:  MOVFF  20,24
0872:  MOVFF  1F,23
0876:  MOVFF  1E,22
....................    Var_error_1=Var_error_0;   
087A:  MOVFF  1D,21
087E:  MOVFF  1C,20
0882:  MOVFF  1B,1F
0886:  MOVFF  1A,1E
....................    Var_error_0=Var_PocitionReal-Var_SetPoint;             
088A:  BSF    FD8.1
088C:  MOVFF  19,52
0890:  MOVFF  18,51
0894:  MOVFF  17,50
0898:  MOVFF  16,4F
089C:  MOVFF  15,56
08A0:  MOVFF  14,55
08A4:  MOVFF  13,54
08A8:  MOVFF  12,53
08AC:  RCALL  0600
08AE:  MOVFF  03,1D
08B2:  MOVFF  02,1C
08B6:  MOVFF  01,1B
08BA:  MOVFF  00,1A
....................    //calculo                
....................       a=Var_error_0  *( kp + (ki*t) )+( kd/t ); 
08BE:  MOVFF  4A,5B
08C2:  MOVFF  49,5A
08C6:  MOVFF  48,59
08CA:  MOVFF  47,58
08CE:  MOVFF  35,5F
08D2:  MOVFF  34,5E
08D6:  MOVFF  33,5D
08DA:  MOVFF  32,5C
08DE:  RCALL  02C4
08E0:  BCF    FD8.1
08E2:  MOVFF  42,52
08E6:  MOVFF  41,51
08EA:  MOVFF  40,50
08EE:  MOVFF  3F,4F
08F2:  MOVFF  03,56
08F6:  MOVFF  02,55
08FA:  MOVFF  01,54
08FE:  MOVFF  00,53
0902:  RCALL  0600
0904:  MOVFF  1D,5B
0908:  MOVFF  1C,5A
090C:  MOVFF  1B,59
0910:  MOVFF  1A,58
0914:  MOVFF  03,5F
0918:  MOVFF  02,5E
091C:  MOVFF  01,5D
0920:  MOVFF  00,5C
0924:  RCALL  02C4
0926:  MOVFF  03,4E
092A:  MOVFF  02,4D
092E:  MOVFF  01,4C
0932:  MOVFF  00,4B
0936:  MOVFF  46,52
093A:  MOVFF  45,51
093E:  MOVFF  44,50
0942:  MOVFF  43,4F
0946:  MOVFF  35,56
094A:  MOVFF  34,55
094E:  MOVFF  33,54
0952:  MOVFF  32,53
0956:  RCALL  03B6
0958:  BCF    FD8.1
095A:  MOVFF  4E,52
095E:  MOVFF  4D,51
0962:  MOVFF  4C,50
0966:  MOVFF  4B,4F
096A:  MOVFF  03,56
096E:  MOVFF  02,55
0972:  MOVFF  01,54
0976:  MOVFF  00,53
097A:  RCALL  0600
097C:  MOVFF  03,29
0980:  MOVFF  02,28
0984:  MOVFF  01,27
0988:  MOVFF  00,26
....................       b=Var_error_1*( (-2*(kd/t) - kp) ); 
098C:  MOVFF  46,52
0990:  MOVFF  45,51
0994:  MOVFF  44,50
0998:  MOVFF  43,4F
099C:  MOVFF  35,56
09A0:  MOVFF  34,55
09A4:  MOVFF  33,54
09A8:  MOVFF  32,53
09AC:  RCALL  03B6
09AE:  CLRF   5B
09B0:  CLRF   5A
09B2:  MOVLW  80
09B4:  MOVWF  59
09B6:  MOVWF  58
09B8:  MOVFF  03,5F
09BC:  MOVFF  02,5E
09C0:  MOVFF  01,5D
09C4:  MOVFF  00,5C
09C8:  RCALL  02C4
09CA:  MOVFF  03,4E
09CE:  MOVFF  02,4D
09D2:  MOVFF  01,4C
09D6:  MOVFF  00,4B
09DA:  BSF    FD8.1
09DC:  MOVFF  03,52
09E0:  MOVFF  02,51
09E4:  MOVFF  01,50
09E8:  MOVFF  00,4F
09EC:  MOVFF  42,56
09F0:  MOVFF  41,55
09F4:  MOVFF  40,54
09F8:  MOVFF  3F,53
09FC:  RCALL  0600
09FE:  MOVFF  21,5B
0A02:  MOVFF  20,5A
0A06:  MOVFF  1F,59
0A0A:  MOVFF  1E,58
0A0E:  MOVFF  03,5F
0A12:  MOVFF  02,5E
0A16:  MOVFF  01,5D
0A1A:  MOVFF  00,5C
0A1E:  RCALL  02C4
0A20:  MOVFF  03,2D
0A24:  MOVFF  02,2C
0A28:  MOVFF  01,2B
0A2C:  MOVFF  00,2A
....................       c=Var_error_2*( (kd/t) +Var_res_1 ); 
0A30:  MOVFF  46,52
0A34:  MOVFF  45,51
0A38:  MOVFF  44,50
0A3C:  MOVFF  43,4F
0A40:  MOVFF  35,56
0A44:  MOVFF  34,55
0A48:  MOVFF  33,54
0A4C:  MOVFF  32,53
0A50:  RCALL  03B6
0A52:  MOVFF  03,4E
0A56:  MOVFF  02,4D
0A5A:  MOVFF  01,4C
0A5E:  MOVFF  00,4B
0A62:  BCF    FD8.1
0A64:  MOVFF  03,52
0A68:  MOVFF  02,51
0A6C:  MOVFF  01,50
0A70:  MOVFF  00,4F
0A74:  MOVFF  3E,56
0A78:  MOVFF  3D,55
0A7C:  MOVFF  3C,54
0A80:  MOVFF  3B,53
0A84:  RCALL  0600
0A86:  MOVFF  25,5B
0A8A:  MOVFF  24,5A
0A8E:  MOVFF  23,59
0A92:  MOVFF  22,58
0A96:  MOVFF  03,5F
0A9A:  MOVFF  02,5E
0A9E:  MOVFF  01,5D
0AA2:  MOVFF  00,5C
0AA6:  RCALL  02C4
0AA8:  MOVFF  03,31
0AAC:  MOVFF  02,30
0AB0:  MOVFF  01,2F
0AB4:  MOVFF  00,2E
....................       Var_res_1=Var_res_0; 
0AB8:  MOVFF  3A,3E
0ABC:  MOVFF  39,3D
0AC0:  MOVFF  38,3C
0AC4:  MOVFF  37,3B
....................       Var_res_0=a+b+c;      
0AC8:  BCF    FD8.1
0ACA:  MOVFF  29,52
0ACE:  MOVFF  28,51
0AD2:  MOVFF  27,50
0AD6:  MOVFF  26,4F
0ADA:  MOVFF  2D,56
0ADE:  MOVFF  2C,55
0AE2:  MOVFF  2B,54
0AE6:  MOVFF  2A,53
0AEA:  RCALL  0600
0AEC:  MOVFF  03,4E
0AF0:  MOVFF  02,4D
0AF4:  MOVFF  01,4C
0AF8:  MOVFF  00,4B
0AFC:  BCF    FD8.1
0AFE:  MOVFF  03,52
0B02:  MOVFF  02,51
0B06:  MOVFF  01,50
0B0A:  MOVFF  00,4F
0B0E:  MOVFF  31,56
0B12:  MOVFF  30,55
0B16:  MOVFF  2F,54
0B1A:  MOVFF  2E,53
0B1E:  RCALL  0600
0B20:  MOVFF  03,3A
0B24:  MOVFF  02,39
0B28:  MOVFF  01,38
0B2C:  MOVFF  00,37
0B30:  GOTO   117E (RETURN)
.................... } 
.................... void control_sentido_giro(){//incluse un proceso para evitar un desvordamiento de valor por el PWM 
....................    //conversion para PWM 
....................    if(Var_res_0<0){//control de giro  
*
0BAA:  MOVFF  3A,4E
0BAE:  MOVFF  39,4D
0BB2:  MOVFF  38,4C
0BB6:  MOVFF  37,4B
0BBA:  CLRF   52
0BBC:  CLRF   51
0BBE:  CLRF   50
0BC0:  CLRF   4F
0BC2:  RCALL  0B34
0BC4:  BNC   0BFC
....................       Var_res_0=Var_res_0*-1; 
0BC6:  MOVFF  3A,5B
0BCA:  MOVFF  39,5A
0BCE:  MOVFF  38,59
0BD2:  MOVFF  37,58
0BD6:  CLRF   5F
0BD8:  CLRF   5E
0BDA:  MOVLW  80
0BDC:  MOVWF  5D
0BDE:  MOVLW  7F
0BE0:  MOVWF  5C
0BE2:  CALL   02C4
0BE6:  MOVFF  03,3A
0BEA:  MOVFF  02,39
0BEE:  MOVFF  01,38
0BF2:  MOVFF  00,37
....................       giro=2; 
0BF6:  MOVLW  02
0BF8:  MOVWF  11
....................    }else{giro=1;} 
0BFA:  BRA    0C00
0BFC:  MOVLW  01
0BFE:  MOVWF  11
....................    if(Var_res_0>=4.95){//control contra desbordamiento   
0C00:  MOVLW  66
0C02:  MOVWF  4E
0C04:  MOVWF  4D
0C06:  MOVLW  1E
0C08:  MOVWF  4C
0C0A:  MOVLW  81
0C0C:  MOVWF  4B
0C0E:  MOVFF  3A,52
0C12:  MOVFF  39,51
0C16:  MOVFF  38,50
0C1A:  MOVFF  37,4F
0C1E:  RCALL  0B34
0C20:  BC    0C24
0C22:  BNZ   0C34
....................       Var_res_0=4.99; 
0C24:  MOVLW  14
0C26:  MOVWF  3A
0C28:  MOVLW  AE
0C2A:  MOVWF  39
0C2C:  MOVLW  1F
0C2E:  MOVWF  38
0C30:  MOVLW  81
0C32:  MOVWF  37
....................    } 
0C34:  GOTO   1180 (RETURN)
.................... } 
.................... void conver_vol_to_bits_res_PID(){         
....................    bits_RES      = (1024*Var_res_0)/5; 
*
0C72:  CLRF   5B
0C74:  CLRF   5A
0C76:  CLRF   59
0C78:  MOVLW  89
0C7A:  MOVWF  58
0C7C:  MOVFF  3A,5F
0C80:  MOVFF  39,5E
0C84:  MOVFF  38,5D
0C88:  MOVFF  37,5C
0C8C:  CALL   02C4
0C90:  MOVFF  03,4E
0C94:  MOVFF  02,4D
0C98:  MOVFF  01,4C
0C9C:  MOVFF  00,4B
0CA0:  MOVFF  03,52
0CA4:  MOVFF  02,51
0CA8:  MOVFF  01,50
0CAC:  MOVFF  00,4F
0CB0:  CLRF   56
0CB2:  CLRF   55
0CB4:  MOVLW  20
0CB6:  MOVWF  54
0CB8:  MOVLW  81
0CBA:  MOVWF  53
0CBC:  CALL   03B6
0CC0:  MOVFF  03,4E
0CC4:  MOVFF  02,4D
0CC8:  MOVFF  01,4C
0CCC:  MOVFF  00,4B
0CD0:  BRA    0C38
0CD2:  MOVFF  02,0B
0CD6:  MOVFF  01,0A
0CDA:  GOTO   1182 (RETURN)
.................... } 
.................... void salidas_PWM(){        
....................    if(Var_PocitionReal<Var_SetPoint){//valores positivos  
0CDE:  MOVFF  19,4E
0CE2:  MOVFF  18,4D
0CE6:  MOVFF  17,4C
0CEA:  MOVFF  16,4B
0CEE:  MOVFF  15,52
0CF2:  MOVFF  14,51
0CF6:  MOVFF  13,50
0CFA:  MOVFF  12,4F
0CFE:  RCALL  0B34
0D00:  BNC   0D2E
....................       set_pwm1_duty(bits_RES);   //write salida de señal PWM  
0D02:  MOVFF  0B,02
0D06:  MOVFF  0A,01
0D0A:  RRCF   02,F
0D0C:  RRCF   01,F
0D0E:  RRCF   02,F
0D10:  RRCF   01,F
0D12:  RRCF   02,F
0D14:  MOVFF  01,FBE
0D18:  RRCF   02,F
0D1A:  RRCF   02,W
0D1C:  ANDLW  30
0D1E:  MOVWF  00
0D20:  MOVF   FBD,W
0D22:  ANDLW  CF
0D24:  IORWF  00,W
0D26:  MOVWF  FBD
....................       output_high(PIN_B1); //led indicador de giro  
0D28:  BCF    F93.1
0D2A:  BSF    F8A.1
....................    }else{ 
0D2C:  BRA    0D34
....................       output_low(PIN_B1);  
0D2E:  BCF    F93.1
0D30:  BCF    F8A.1
....................       set_pwm1_duty(0); 
0D32:  CLRF   FBE
....................    } 
....................    if(Var_PocitionReal>Var_SetPoint){  //valores negativos           
0D34:  MOVFF  15,4E
0D38:  MOVFF  14,4D
0D3C:  MOVFF  13,4C
0D40:  MOVFF  12,4B
0D44:  MOVFF  19,52
0D48:  MOVFF  18,51
0D4C:  MOVFF  17,50
0D50:  MOVFF  16,4F
0D54:  RCALL  0B34
0D56:  BNC   0D84
....................       set_pwm2_duty(bits_RES);         //write salida de señal PWM           
0D58:  MOVFF  0B,02
0D5C:  MOVFF  0A,01
0D60:  RRCF   02,F
0D62:  RRCF   01,F
0D64:  RRCF   02,F
0D66:  RRCF   01,F
0D68:  RRCF   02,F
0D6A:  MOVFF  01,FBB
0D6E:  RRCF   02,F
0D70:  RRCF   02,W
0D72:  ANDLW  30
0D74:  MOVWF  00
0D76:  MOVF   FBA,W
0D78:  ANDLW  CF
0D7A:  IORWF  00,W
0D7C:  MOVWF  FBA
....................       output_high(PIN_B2);             //led indicador de giro  
0D7E:  BCF    F93.2
0D80:  BSF    F8A.2
....................    }else{ 
0D82:  BRA    0D8A
....................       output_low(PIN_B2); 
0D84:  BCF    F93.2
0D86:  BCF    F8A.2
....................       set_pwm2_duty(0); 
0D88:  CLRF   FBB
....................    } //si el sentido de giro no corresponde apaga el led y PWM 
....................    if(Var_SetPoint==Var_PocitionReal){ 
0D8A:  MOVFF  15,4E
0D8E:  MOVFF  14,4D
0D92:  MOVFF  13,4C
0D96:  MOVFF  12,4B
0D9A:  MOVFF  19,52
0D9E:  MOVFF  18,51
0DA2:  MOVFF  17,50
0DA6:  MOVFF  16,4F
0DAA:  RCALL  0B34
0DAC:  BNZ   0DB2
....................       set_pwm2_duty(0); 
0DAE:  CLRF   FBB
....................       set_pwm1_duty(0); 
0DB0:  CLRF   FBE
....................    }        
0DB2:  GOTO   1184 (RETURN)
.................... } 
....................  
.................... /* 
.................... //configuracion entradas/salidas 
.................... //entradas 
....................    #define PIN_SetPoint  0    //[AN0]setpoint      set_adc_channel(0); 
....................    #define PIN_PocitionReal 1 //[AN1]posicion real set_adc_channel(1); 
.................... //salidas 
....................    //control puenta H 
....................       //comando de control de giro del motor 
....................             //set_pwm1_duty() [RC2] 
....................             //set_pwm1_duty() [RC3] 
.................... //variables tipo bits 
.................... unsigned int16 bits_SetPoint=0; 
.................... unsigned int16 bits_PocitionReal=0; 
.................... unsigned int16 bits_difer=0; 
.................... unsigned int16 bits_RES=0; 
.................... //variable control PWM 
.................... int16 duty=0; 
.................... int Timer2,Poscaler; 
.................... //variable control giro motor  
.................... int cambio,giro=1;//giro 1 si es negativos los valores  
.................... //#########     PID 
.................... float Var_SetPoint=0; 
.................... float Var_PocitionReal=0; 
.................... float Var_error_0=0; 
.................... float Var_error_1=0; 
.................... float Var_error_2=0; 
.................... float a,b,c;               //variables temporales 
.................... float t=1;                 //periodo de muestreo  
.................... int k=0;                   //contrador de muestras 
.................... float Var_res_0;           //Salidas 
.................... float Var_res_1;           //Salidas 
.................... //#########    ganancias 
.................... float kp=1;                //proporcional 
.................... float kd=0.2;              //Derivativa 
.................... float ki=0.2;              //integral 
.................... */ 
.................... void main() {  
*
10C2:  CLRF   FF8
10C4:  BCF    FD0.7
10C6:  MOVLW  60
10C8:  MOVWF  FD3
10CA:  MOVF   FD3,W
10CC:  CLRF   05
10CE:  CLRF   04
10D0:  CLRF   07
10D2:  CLRF   06
10D4:  CLRF   09
10D6:  CLRF   08
10D8:  CLRF   0B
10DA:  CLRF   0A
10DC:  CLRF   0D
10DE:  CLRF   0C
10E0:  MOVLW  F9
10E2:  MOVWF  0E
10E4:  MOVLW  01
10E6:  MOVWF  0F
10E8:  MOVLW  01
10EA:  MOVWF  11
10EC:  CLRF   15
10EE:  CLRF   14
10F0:  CLRF   13
10F2:  CLRF   12
10F4:  CLRF   19
10F6:  CLRF   18
10F8:  CLRF   17
10FA:  CLRF   16
10FC:  CLRF   1D
10FE:  CLRF   1C
1100:  CLRF   1B
1102:  CLRF   1A
1104:  CLRF   21
1106:  CLRF   20
1108:  CLRF   1F
110A:  CLRF   1E
110C:  CLRF   25
110E:  CLRF   24
1110:  CLRF   23
1112:  CLRF   22
1114:  CLRF   35
1116:  CLRF   34
1118:  CLRF   33
111A:  MOVLW  7F
111C:  MOVWF  32
111E:  CLRF   36
1120:  CLRF   42
1122:  CLRF   41
1124:  CLRF   40
1126:  MOVLW  7F
1128:  MOVWF  3F
112A:  MOVLW  CD
112C:  MOVWF  46
112E:  MOVLW  CC
1130:  MOVWF  45
1132:  MOVLW  4C
1134:  MOVWF  44
1136:  MOVLW  7C
1138:  MOVWF  43
113A:  MOVLW  CD
113C:  MOVWF  4A
113E:  MOVLW  CC
1140:  MOVWF  49
1142:  MOVLW  4C
1144:  MOVWF  48
1146:  MOVLW  7C
1148:  MOVWF  47
114A:  MOVF   FC1,W
114C:  ANDLW  C0
114E:  IORLW  0F
1150:  MOVWF  FC1
1152:  MOVLW  07
1154:  MOVWF  FB4
....................    /* 
....................    Timer2=249;    //Se carga timer 2 con 249 
....................    Poscaler=1;  //Preescaler solo puede tomar valores de: 1 
....................    //Configuracion de Timer 2 para establecer frec. PWM a 1kHz 
....................    setup_timer_2(t2_div_by_4,Timer2,Poscaler);    
....................    setup_ccp1(ccp_pwm);      //Configurar modulo CCP1 en modo PWM 
....................    setup_ccp2(ccp_pwm);      //Configurar modulo CCP2 en modo PWM 
....................    //Configurar ADC configuracion  
....................    //de los puertos que funcionan en analogico  
....................    setup_adc_ports(all_analog);         
....................    setup_adc(adc_clock_internal);       
....................    */ 
....................    star_PWM_2HILOS(); 
1156:  GOTO   0010
....................    LCD_INIT();       //Inicializa el LCD 
115A:  GOTO   0118
....................    LCD_PUTC("\f");   //Borrar el contenido del LCD 
115E:  MOVLW  04
1160:  MOVWF  FF6
1162:  MOVLW  00
1164:  MOVWF  FF7
1166:  CALL   0202
....................    while(true){ 
....................       /* 
....................          //leer setpoint  
....................          set_adc_channel(PIN_SetPoint);//selecciona valore deseado setpoint   
....................          delay_us(100);        
....................          bits_SetPoint=read_adc();    
....................          //leer posicion real  
....................          set_adc_channel(PIN_PocitionReal);  //seleciona la posicion real  
....................          delay_us(100);        
....................          bits_PocitionReal=read_adc();       //leer 
....................       */    
....................       read_SetPoint(); 
116A:  GOTO   0222
....................       read_PocitionReal(); 
116E:  GOTO   0258
....................       conver_bits_to_vol_SetPoint(); 
1172:  GOTO   0510
....................       conver_bits_to_vol_PocitionReal(); 
1176:  GOTO   0588
....................       calculos_PID(); 
117A:  GOTO   086A
....................       control_sentido_giro(); 
117E:  BRA    0BAA
....................       conver_vol_to_bits_res_PID(); 
1180:  BRA    0C72
....................       salidas_PWM(); 
1182:  BRA    0CDE
....................       //calculos  
....................       //convierte los bits en voltaje  
....................       /* 
....................       Var_SetPoint      = (5.0*bits_SetPoint)/1024.0;  
....................       Var_PocitionReal  = (5.0*bits_PocitionReal)/1024.0; 
....................       */ 
....................       ///  bits_difer=bits_PocitionReal-bits_SetPoint; //ningun uso  
....................       //diferencia de voltaje  
....................       //c=Var_PocitionReal-Var_SetPoint; 
....................       //PID Calculos  
....................       /* 
....................       Var_error_2=Var_error_1; 
....................       Var_error_1=Var_error_0;   
....................       Var_error_0=Var_PocitionReal-Var_SetPoint;             
....................       //calculo                
....................             a=Var_error_0  *( kp + (ki*t) )+( kd/t ); 
....................             b=Var_error_1*( (-2*(kd/t) - kp) ); 
....................             c=Var_error_2*( (kd/t) +Var_res_1 ); 
....................             Var_res_1=Var_res_0; 
....................             Var_res_0=a+b+c;                
....................       */ 
....................      /* 
....................          //conversion para PWM 
....................          if(Var_res_0<0){//control de giro  
....................             Var_res_0=Var_res_0*-1; 
....................             giro=2; 
....................          }else{giro=1;} 
....................          if(Var_res_0>=4.90){//control contra desbordamiento   
....................             Var_res_0=4.99; 
....................          } 
....................          bits_RES      = (1024*Var_res_0)/5; 
....................          */ 
....................          //incremento en contrador  
....................             //k=k+1;                      
....................       //interface 
....................       LCD_GOTOXY(1,1);        
1184:  MOVLW  01
1186:  MOVWF  59
1188:  MOVWF  5A
118A:  CALL   0190
....................       printf(lcd_putc," %4Lu",bits_difer); lcd_putc("b");   
118E:  MOVLW  20
1190:  MOVWF  58
1192:  CALL   01B2
1196:  MOVLW  01
1198:  MOVWF  FE9
119A:  MOVFF  09,4C
119E:  MOVFF  08,4B
11A2:  RCALL  0DB6
11A4:  MOVLW  06
11A6:  MOVWF  FF6
11A8:  MOVLW  00
11AA:  MOVWF  FF7
11AC:  CALL   0202
....................       printf(lcd_putc," %f",Var_error_0); lcd_putc("V");    
11B0:  MOVLW  20
11B2:  MOVWF  58
11B4:  CALL   01B2
11B8:  MOVLW  89
11BA:  MOVWF  FE9
11BC:  MOVFF  1D,4E
11C0:  MOVFF  1C,4D
11C4:  MOVFF  1B,4C
11C8:  MOVFF  1A,4B
11CC:  MOVLW  02
11CE:  MOVWF  4F
11D0:  RCALL  0F40
11D2:  MOVLW  08
11D4:  MOVWF  FF6
11D6:  MOVLW  00
11D8:  MOVWF  FF7
11DA:  CALL   0202
....................       LCD_GOTOXY(1,2);         
11DE:  MOVLW  01
11E0:  MOVWF  59
11E2:  MOVLW  02
11E4:  MOVWF  5A
11E6:  CALL   0190
....................       printf(lcd_putc," %4Lu",bits_RES);  lcd_putc("b");       
11EA:  MOVLW  20
11EC:  MOVWF  58
11EE:  CALL   01B2
11F2:  MOVLW  01
11F4:  MOVWF  FE9
11F6:  MOVFF  0B,4C
11FA:  MOVFF  0A,4B
11FE:  RCALL  0DB6
1200:  MOVLW  0A
1202:  MOVWF  FF6
1204:  MOVLW  00
1206:  MOVWF  FF7
1208:  CALL   0202
....................       printf(lcd_putc," %f",Var_res_0);   lcd_putc("V");    
120C:  MOVLW  20
120E:  MOVWF  58
1210:  CALL   01B2
1214:  MOVLW  89
1216:  MOVWF  FE9
1218:  MOVFF  3A,4E
121C:  MOVFF  39,4D
1220:  MOVFF  38,4C
1224:  MOVFF  37,4B
1228:  MOVLW  02
122A:  MOVWF  4F
122C:  RCALL  0F40
122E:  MOVLW  0C
1230:  MOVWF  FF6
1232:  MOVLW  00
1234:  MOVWF  FF7
1236:  CALL   0202
....................       delay_ms(100); 
123A:  MOVLW  64
123C:  MOVWF  59
123E:  CALL   0054
....................       LCD_PUTC("\f");   //Borrar el contenido del LCD            
1242:  MOVLW  0E
1244:  MOVWF  FF6
1246:  MOVLW  00
1248:  MOVWF  FF7
124A:  CALL   0202
124E:  BRA    116A
....................       // EL SISGUIENTE CODIGO SE ENCARGA DE CONVERTIR 
....................       // el valor de salida del pid en valores validos 
....................       // para el puente h de dos hilos el sentido 
....................       // de giro se definira por el signo ->0<+ 
....................        
....................       /* 
....................       if(Var_PocitionReal<Var_SetPoint){//valores positivos  
....................          set_pwm1_duty(bits_RES);   //write salida de señal PWM  
....................          output_high(PIN_B1); //led indicador de giro  
....................       }else{ 
....................          output_low(PIN_B1);  
....................          set_pwm1_duty(0); 
....................       } 
....................       if(Var_PocitionReal>Var_SetPoint){  //valores negativos           
....................          set_pwm2_duty(bits_RES);         //write salida de señal PWM           
....................          output_high(PIN_B2);             //led indicador de giro  
....................       }else{ 
....................          output_low(PIN_B2); 
....................          set_pwm2_duty(0); 
....................       } //si el sentido de giro no corresponde apaga el led y PWM 
....................       if(Var_SetPoint==Var_PocitionReal){ 
....................          set_pwm2_duty(0); 
....................          set_pwm1_duty(0); 
....................       }        
....................       */ 
....................    } 
.................... } 
....................  
1250:  SLEEP 

Configuration Fuses:
   Word  1: C83F   PLL12 CPUDIV4 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
