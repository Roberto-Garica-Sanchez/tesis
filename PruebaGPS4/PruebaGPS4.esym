C L "MAIN" 0 37 10 "FUNCTION"
D G "__PCH__" 0 203 ""5.015""
D G "__DEVICE__" 0 203 "4550"
D G "__DATE__" 0 203 ""11-ene.-21""
D G "__TIME__" 0 203 ""11:57:30""
D G "time_offset" 0 1 "-18000" "define a clock offset of 3600 seconds (1 hour) ==> UTC + 1"
D G "LCD_RS_PIN" 0 4 "PIN_D0"
D G "LCD_RW_PIN" 0 5 "PIN_D1"
D G "LCD_ENABLE_PIN" 0 6 "PIN_D2"
D G "LCD_DATA4" 0 7 "PIN_D4"
D G "LCD_DATA5" 0 8 "PIN_D5"
D G "LCD_DATA6" 0 9 "PIN_D6"
D G "LCD_DATA7" 0 10 "PIN_D7"
c L "set_tris_a" 1 1 6 "FUNCTION"
v L "value" 1 45 "int8" `54 
f B "set_tris_a" 1 45 "void(int8 value)" `53 
v L "value" 1 46 "int8" `56 
f B "set_tris_b" 1 46 "void(int8 value)" `55 
v L "value" 1 47 "int8" `58 
f B "set_tris_c" 1 47 "void(int8 value)" `57 
v L "value" 1 48 "int8" `60 
f B "set_tris_d" 1 48 "void(int8 value)" `59 
v L "value" 1 49 "int8" `62 
f B "set_tris_e" 1 49 "void(int8 value)" `61 
f B "get_tris_a" 1 50 "int8()" `63 
f B "get_tris_b" 1 51 "int8()" `64 
f B "get_tris_c" 1 52 "int8()" `65 
f B "get_tris_d" 1 53 "int8()" `66 
f B "get_tris_e" 1 54 "int8()" `67 
v L "value" 1 55 "int8" `69 
f B "output_a" 1 55 "void(int8 value)" `68 
v L "value" 1 56 "int8" `71 
f B "output_b" 1 56 "void(int8 value)" `70 
v L "value" 1 57 "int8" `73 
f B "output_c" 1 57 "void(int8 value)" `72 
v L "value" 1 58 "int8" `75 
f B "output_d" 1 58 "void(int8 value)" `74 
v L "value" 1 59 "int8" `77 
f B "output_e" 1 59 "void(int8 value)" `76 
f B "input_a" 1 60 "int8()" `78 
f B "input_b" 1 61 "int8()" `79 
f B "input_c" 1 62 "int8()" `80 
f B "input_d" 1 63 "int8()" `81 
f B "input_e" 1 64 "int8()" `82 
f B "input_change_a" 1 65 "int8()" `83 
f B "input_change_b" 1 66 "int8()" `84 
f B "input_change_c" 1 67 "int8()" `85 
f B "input_change_d" 1 68 "int8()" `86 
f B "input_change_e" 1 69 "int8()" `87 
v L "pin" 1 70 "int16" `89 
f B "input" 1 70 "int8(int16 pin)" `88 
v L "pin" 1 71 "int16" `91 
f B "input_state" 1 71 "int8(int16 pin)" `90 
v L "pin" 1 72 "int16" `93 
f B "output_low" 1 72 "void(int16 pin)" `92 
v L "pin" 1 73 "int16" `95 
f B "output_high" 1 73 "void(int16 pin)" `94 
v L "pin" 1 74 "int16" `97 
f B "output_toggle" 1 74 "void(int16 pin)" `96 
v L "pin" 1 75 "int16" `99 
v L "level" 1 75 "int8" `100 
f B "output_bit" 1 75 "void(int16 pin,int8 level)" `98 
v L "pin" 1 76 "int16" `102 
f B "output_float" 1 76 "void(int16 pin)" `101 
v L "pin" 1 77 "int16" `104 
f B "output_drive" 1 77 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 81 "31744"
d G "PIN_A1" 1 82 "31745"
d G "PIN_A2" 1 83 "31746"
d G "PIN_A3" 1 84 "31747"
d G "PIN_A4" 1 85 "31748"
d G "PIN_A5" 1 86 "31749"
d G "PIN_A6" 1 87 "31750"
d G "PIN_B0" 1 89 "31752"
d G "PIN_B1" 1 90 "31753"
d G "PIN_B2" 1 91 "31754"
d G "PIN_B3" 1 92 "31755"
d G "PIN_B4" 1 93 "31756"
d G "PIN_B5" 1 94 "31757"
d G "PIN_B6" 1 95 "31758"
d G "PIN_B7" 1 96 "31759"
d G "PIN_C0" 1 98 "31760"
d G "PIN_C1" 1 99 "31761"
d G "PIN_C2" 1 100 "31762"
d G "PIN_C4" 1 101 "31764"
d G "PIN_C5" 1 102 "31765"
d G "PIN_C6" 1 103 "31766"
d G "PIN_C7" 1 104 "31767"
d G "PIN_D0" 1 106 "31768"
d G "PIN_D1" 1 107 "31769"
d G "PIN_D2" 1 108 "31770"
d G "PIN_D3" 1 109 "31771"
d G "PIN_D4" 1 110 "31772"
d G "PIN_D5" 1 111 "31773"
d G "PIN_D6" 1 112 "31774"
d G "PIN_D7" 1 113 "31775"
d G "PIN_E0" 1 115 "31776"
d G "PIN_E1" 1 116 "31777"
d G "PIN_E2" 1 117 "31778"
d G "PIN_E3" 1 118 "31779"
d G "PIN_E7" 1 119 "31783"
d G "FALSE" 1 122 "0"
d G "TRUE" 1 123 "1"
d G "BYTE" 1 125 "int8"
d G "BOOLEAN" 1 126 "int1"
d G "getc" 1 128 "getch"
d G "fgetc" 1 129 "getch"
d G "getchar" 1 130 "getch"
d G "putc" 1 131 "putchar"
d G "fputc" 1 132 "putchar"
d G "fgets" 1 133 "gets"
d G "fputs" 1 134 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 139 "int8()" `105 
f B "reset_cpu" 1 140 "void()" `106 
f B "sleep" 1 141 "void()" `107 
v L "type" 1 142 "int8" `109 
f G "sleep" 1 142 "void(int8 type)" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 144 "7"
d G "MCLR_FROM_SLEEP" 1 145 "11"
d G "MCLR_FROM_RUN" 1 146 "15"
d G "NORMAL_POWER_UP" 1 147 "12"
d G "BROWNOUT_RESTART" 1 148 "14"
d G "WDT_FROM_SLEEP" 1 149 "3"
d G "RESET_INSTRUCTION" 1 150 "0"
d G "SLEEP_FULL" 1 153 "0" "Default"
d G "SLEEP_IDLE" 1 154 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 161 "int8" `111 
f B "setup_timer_0" 1 161 "void(int8 mode)" `110 
v L "value" 1 162 "int16" `113 
f B "set_timer0" 1 162 "void(int16 value)" `112 
f B "get_timer0" 1 163 "int16()" `114 
v L "mode" 1 164 "int8" `116 
v L "prescaler" 1 164 "int8" `117 
f B "setup_counters" 1 164 "void(int8 mode,int8 prescaler)" `115 
v L "value" 1 165 "int16" `119 
f B "set_rtcc" 1 165 "void(int16 value)" `118 
f B "get_rtcc" 1 166 "int16()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 168 "0"
d G "T0_EXT_L_TO_H" 1 169 "32"
d G "T0_EXT_H_TO_L" 1 170 "48"
d G "T0_DIV_1" 1 172 "8"
d G "T0_DIV_2" 1 173 "0"
d G "T0_DIV_4" 1 174 "1"
d G "T0_DIV_8" 1 175 "2"
d G "T0_DIV_16" 1 176 "3"
d G "T0_DIV_32" 1 177 "4"
d G "T0_DIV_64" 1 178 "5"
d G "T0_DIV_128" 1 179 "6"
d G "T0_DIV_256" 1 180 "7"
d G "T0_OFF" 1 182 "0x80"
d G "T0_8_BIT" 1 184 "0x40"
d G "RTCC_INTERNAL" 1 186 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 187 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 188 "48"
d G "RTCC_DIV_1" 1 189 "8"
d G "RTCC_DIV_2" 1 190 "0"
d G "RTCC_DIV_4" 1 191 "1"
d G "RTCC_DIV_8" 1 192 "2"
d G "RTCC_DIV_16" 1 193 "3"
d G "RTCC_DIV_32" 1 194 "4"
d G "RTCC_DIV_64" 1 195 "5"
d G "RTCC_DIV_128" 1 196 "6"
d G "RTCC_DIV_256" 1 197 "7"
d G "RTCC_OFF" 1 198 "0x80"
d G "RTCC_8_BIT" 1 199 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
v L "mode" 1 210 "int16" `122 
f B "setup_wdt" 1 210 "void(int16 mode)" `121 
f B "restart_wdt" 1 211 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 213 "0x100"
d G "WDT_OFF" 1 214 "0"
d G "WDT_4MS" 1 216 "0x300"
d G "WDT_8MS" 1 217 "0x500"
d G "WDT_16MS" 1 218 "0x700"
d G "WDT_32MS" 1 219 "0x900"
d G "WDT_64MS" 1 220 "0xB00"
d G "WDT_128MS" 1 221 "0xD00"
d G "WDT_256MS" 1 222 "0xF00"
d G "WDT_512MS" 1 223 "0x1100"
d G "WDT_1S" 1 224 "0x1300"
d G "WDT_2S" 1 225 "0x1500"
d G "WDT_4S" 1 226 "0x1700"
d G "WDT_8S" 1 227 "0x1900"
d G "WDT_16" 1 228 "0x1B00"
d G "WDT_32S" 1 229 "0x1D00"
d G "WDT_64S" 1 230 "0x1F00"
d G "WDT_128S" 1 231 "0x2100"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 237 "int16" `125 
f B "setup_timer_1" 1 237 "void(int16 mode)" `124 
f B "get_timer1" 1 238 "int16()" `126 
v L "value" 1 239 "int16" `128 
f B "set_timer1" 1 239 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 242 "0"
d G "T1_INTERNAL" 1 243 "0x85"
d G "T1_EXTERNAL" 1 244 "0x87"
d G "T1_EXTERNAL_SYNC" 1 245 "0x83"
d G "T1_CLK_OUT" 1 247 "8"
d G "T1_DIV_BY_1" 1 249 "0"
d G "T1_DIV_BY_2" 1 250 "0x10"
d G "T1_DIV_BY_4" 1 251 "0x20"
d G "T1_DIV_BY_8" 1 252 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 257 "int8" `130 
v L "period" 1 257 "int8" `131 
v L "postscale" 1 257 "int8" `132 
f B "setup_timer_2" 1 257 "void(int8 mode,int8 period,int8 postscale)" `129 
f B "get_timer2" 1 258 "int8()" `133 
v L "value" 1 259 "int8" `135 
f B "set_timer2" 1 259 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 261 "0"
d G "T2_DIV_BY_1" 1 262 "4"
d G "T2_DIV_BY_4" 1 263 "5"
d G "T2_DIV_BY_16" 1 264 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
v L "mode" 1 269 "int16" `137 
f B "setup_timer_3" 1 269 "void(int16 mode)" `136 
f B "get_timer3" 1 270 "int16()" `138 
v L "value" 1 271 "int16" `140 
f B "set_timer3" 1 271 "void(int16 value)" `139  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 274 "0"
d G "T3_INTERNAL" 1 275 "0x85"
d G "T3_EXTERNAL" 1 276 "0x87"
d G "T3_EXTERNAL_SYNC" 1 277 "0x83"
d G "T3_DIV_BY_1" 1 279 "0"
d G "T3_DIV_BY_2" 1 280 "0x10"
d G "T3_DIV_BY_4" 1 281 "0x20"
d G "T3_DIV_BY_8" 1 282 "0x30"
c L "set_timer3" 1 1 4 "FUNCTION"
v L "mode" 1 288 "int32" `142 
f B "setup_ccp1" 1 288 "void(int32 mode)" `141 
v L "mode" 1 289 "int32" `144 
v L "pwm" 1 289 "int8" `145 
f G "setup_ccp1" 1 289 "void(int32 mode,int8 pwm)" `143 
v L "value" 1 290 "int16" `147 
f B "set_pwm1_duty" 1 290 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 292 "0"
d G "CCP_CAPTURE_FE" 1 293 "4"
d G "CCP_CAPTURE_RE" 1 294 "5"
d G "CCP_CAPTURE_DIV_4" 1 295 "6"
d G "CCP_CAPTURE_DIV_16" 1 296 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 297 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 298 "9"
d G "CCP_COMPARE_INT" 1 299 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 300 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 301 "0xB"
d G "CCP_PWM" 1 302 "0xC"
d G "CCP_PWM_PLUS_1" 1 303 "0x1c"
d G "CCP_PWM_PLUS_2" 1 304 "0x2c"
d G "CCP_PWM_PLUS_3" 1 305 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 311 "0x48"
d G "T3_CCP2" 1 312 "0x8"
d G "CCP_PWM_H_H" 1 315 "0x0c"
d G "CCP_PWM_H_L" 1 316 "0x0d"
d G "CCP_PWM_L_H" 1 317 "0x0e"
d G "CCP_PWM_L_L" 1 318 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 320 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 321 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 322 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 324 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 325 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 326 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 327 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 328 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 329 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 330 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 332 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 333 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 334 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 336 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 337 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 338 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 340 "0x80000000"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
v L "mode" 1 344 "int32" `152 
f B "setup_ccp2" 1 344 "void(int32 mode)" `151 
v L "mode" 1 345 "int32" `154 
v L "pwm" 1 345 "int8" `155 
f G "setup_ccp2" 1 345 "void(int32 mode,int8 pwm)" `153 
v L "value" 1 346 "int16" `157 
f B "set_pwm2_duty" 1 346 "void(int16 value)" `156 
c L "set_pwm2_duty" 1 1 5 "FUNCTION"
v L "mode" 1 355 "int8" `162 
f B "setup_psp" 1 355 "void(int8 mode)" `161 
f B "psp_output_full" 1 356 "int8()" `163 
f B "psp_input_full" 1 357 "int8()" `164 
f B "psp_overflow" 1 358 "int8()" `165  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 360 "0x10"
d G "PSP_DISABLED" 1 361 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
v L "mode" 1 368 "int32" `168 
f B "setup_spi" 1 368 "void(int32 mode)" `167 
v L "value" 1 369 "int8" `170 
f B "spi_write" 1 369 "void(int8 value)" `169 
f B "spi_read" 1 370 "int8()" `171 
v L "value" 1 371 "int8" `173 
f G "spi_read" 1 371 "int8(int8 value)" `172 
f B "spi_data_in" 1 372 "int8()" `174 
v L "mode" 1 373 "int32" `176 
f B "setup_spi2" 1 373 "void(int32 mode)" `175 
v L "value" 1 374 "int8" `178 
f B "spi_write2" 1 374 "void(int8 value)" `177 
f B "spi_read2" 1 375 "int8()" `179 
v L "value" 1 376 "int8" `181 
f G "spi_read2" 1 376 "int8(int8 value)" `180 
f B "spi_data_in2" 1 377 "int8()" `182  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 379 "0x00"
d G "SPI_MASTER" 1 380 "0x20"
d G "SPI_SLAVE" 1 381 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 382 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 383 "0x00"
d G "SPI_CLK_DIV_4" 1 384 "0x00"
d G "SPI_CLK_DIV_16" 1 385 "0x01"
d G "SPI_CLK_DIV_64" 1 386 "0x02"
d G "SPI_CLK_T2" 1 387 "0x03"
d G "SPI_SS_DISABLED" 1 388 "0x01"
d G "SPI_XMIT_L_TO_H" 1 390 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 391 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 393 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 394 "0x8000"
d G "SPI_L_TO_H" 1 397 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 398 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 1 2 "FUNCTION"
v L "baud" 1 402 "int32" `184 
f B "setup_uart" 1 402 "void(int32 baud)" `183 
v L "baud" 1 403 "int32" `186 
v L "stream" 1 403 "int8" `187 
f G "setup_uart" 1 403 "void(int32 baud,int8 stream)" `185 
v L "baud" 1 404 "int32" `189 
v L "stream" 1 404 "int8" `190 
v L "clock" 1 404 "int32" `191 
f G "setup_uart" 1 404 "void(int32 baud,int8 stream,int32 clock)" `188 
v L "baud" 1 405 "int32" `193 
f B "set_uart_speed" 1 405 "void(int32 baud)" `192 
v L "baud" 1 406 "int32" `195 
v L "stream" 1 406 "int8" `196 
f G "set_uart_speed" 1 406 "void(int32 baud,int8 stream)" `194 
v L "baud" 1 407 "int32" `198 
v L "stream" 1 407 "int8" `199 
v L "clock" 1 407 "int32" `200 
f G "set_uart_speed" 1 407 "void(int32 baud,int8 stream,int32 clock)" `197  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 411 "2"
d G "UART_DATA" 1 412 "4"
d G "UART_AUTODETECT" 1 413 "8"
d G "UART_AUTODETECT_NOWAIT" 1 414 "9"
d G "UART_WAKEUP_ON_RDA" 1 415 "10"
d G "UART_SEND_BREAK" 1 416 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
v L "mode" 1 420 "int32" `202 
f B "setup_comparator" 1 420 "void(int32 mode)" `201  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 422 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 423 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 424 "0xbcf05"
d G "NC_NC_NC_NC" 1 425 "0x0ff07"
d G "A0_A3_A1_A2" 1 426 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 427 "0x9ef01"
d G "A0_VR_A1_VR" 1 428 "0x3ff06"
d G "A3_VR_A2_VR" 1 429 "0xcff0e"
d G "CP1_INVERT" 1 430 "0x0000010"
d G "CP2_INVERT" 1 431 "0x0000020"
c L "setup_comparator" 1 1 2 "FUNCTION"
v L "mode" 1 438 "int8" `206 
f B "setup_vref" 1 438 "void(int8 mode)" `205  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 440 "0xa0"
d G "VREF_HIGH" 1 441 "0x80"
d G "VREF_F5" 1 443 "0x40"
d G "VREF_COMP" 1 444 "0x10"
c L "setup_vref" 1 1 2 "FUNCTION"
v L "mode" 1 448 "int8" `208 
f B "setup_low_volt_detect" 1 448 "void(int8 mode)" `207  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 450 "0x1F"
d G "LVD_45" 1 451 "0x1E"
d G "LVD_42" 1 452 "0x1D"
d G "LVD_40" 1 453 "0x1C"
d G "LVD_38" 1 454 "0x1B"
d G "LVD_36" 1 455 "0x1A"
d G "LVD_35" 1 456 "0x19"
d G "LVD_33" 1 457 "0x18"
d G "LVD_30" 1 458 "0x17"
d G "LVD_28" 1 459 "0x16"
d G "LVD_27" 1 460 "0x15"
d G "LVD_25" 1 461 "0x14"
d G "LVD_24" 1 462 "0x13"
d G "LVD_23" 1 463 "0x12"
d G "LVD_22" 1 464 "0x11"
d G "LVD_21" 1 465 "0x10"
d G "LVD_TRIGGER_BELOW" 1 467 "0"
d G "LVD_TRIGGER_ABOVE" 1 468 "0x80"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
v L "mode" 1 473 "int16" `210 
f B "setup_oscillator" 1 473 "int8(int16 mode)" `209 
v L "mode" 1 474 "int16" `212 
v L "tune" 1 474 "sint8" `213 
f G "setup_oscillator" 1 474 "int8(int16 mode,sint8 tune)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 477 "0"
d G "OSC_125KHZ" 1 478 "0x10"
d G "OSC_250KHZ" 1 479 "0x20"
d G "OSC_500KHZ" 1 480 "0x30"
d G "OSC_1MHZ" 1 481 "0x40"
d G "OSC_2MHZ" 1 482 "0x50"
d G "OSC_4MHZ" 1 483 "0x60"
d G "OSC_8MHZ" 1 484 "0x70"
d G "OSC_TIMER1" 1 486 "1"
d G "OSC_INTRC" 1 487 "2"
d G "OSC_NORMAL" 1 488 "0"
d G "OSC_IDLE_MODE" 1 490 "0x80"
d G "OSC_31250" 1 491 "0x8000"
d G "OSC_STATE_STABLE" 1 495 "4"
d G "OSC_STATE_EXT_RUNNING" 1 496 "8"
c L "setup_oscillator" 1 1 4 "FUNCTION"
v L "mode" 1 503 "int16" `215 
f B "setup_adc" 1 503 "void(int16 mode)" `214 
f B "read_adc" 1 504 "int8()" `216 
v L "mode" 1 505 "int8" `218 
f G "read_adc" 1 505 "int8(int8 mode)" `217 
f G "read_adc" 1 506 "int16()" `219 
v L "mode" 1 507 "int8" `221 
f G "read_adc" 1 507 "int16(int8 mode)" `220 
f B "adc_done" 1 508 "int8()" `222  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 510 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 511 "0x100"
d G "ADC_CLOCK_DIV_4" 1 512 "0x04"
d G "ADC_CLOCK_DIV_8" 1 513 "0x01"
d G "ADC_CLOCK_DIV_16" 1 514 "0x05"
d G "ADC_CLOCK_DIV_32" 1 515 "0x02"
d G "ADC_CLOCK_DIV_64" 1 516 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 517 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 519 "0x00"
d G "ADC_TAD_MUL_2" 1 520 "0x08"
d G "ADC_TAD_MUL_4" 1 521 "0x10"
d G "ADC_TAD_MUL_6" 1 522 "0x18"
d G "ADC_TAD_MUL_8" 1 523 "0x20"
d G "ADC_TAD_MUL_12" 1 524 "0x28"
d G "ADC_TAD_MUL_16" 1 525 "0x30"
d G "ADC_TAD_MUL_20" 1 526 "0x38"
c L "adc_done" 1 1 1 "FUNCTION"
v L "pins" 1 529 "int8" `224 
f B "setup_adc_ports" 1 529 "void(int8 pins)" `223 
v L "pins" 1 530 "int8" `226 
v L "reference" 1 530 "int8" `227 
f G "setup_adc_ports" 1 530 "void(int8 pins,int8 reference)" `225 
v L "channel" 1 531 "int8" `229 
f B "set_adc_channel" 1 531 "void(int8 channel)" `228  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 534 "0x0F" "None"
d G "ALL_ANALOG" 1 535 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 536 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 537 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 538 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 539 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 540 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 541 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 542 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 543 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 544 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 545 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 546 "0x0D" "A0 A1"
d G "AN0" 1 547 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 548 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 549 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 550 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 551 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 552 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 553 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 554 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 555 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 556 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 557 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 558 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 559 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 562 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 563 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 564 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 565 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 568 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 569 "1"
d G "ADC_READ_ONLY" 1 570 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 576 "sint8" `231 
f B "abs" 1 576 "sint8(sint8 x)" `230 
v L "x" 1 577 "sint16" `233 
f G "abs" 1 577 "sint16(sint16 x)" `232 
v L "x" 1 578 "sint32" `235 
f G "abs" 1 578 "sint32(sint32 x)" `234 
v L "x" 1 579 "float" `237 
f G "abs" 1 579 "float(float x)" `236 
v L "??65535" 1 580 "int8" `239 
v L "??65535" 1 580 "int8" `240 
f B "_mul" 1 580 "int16(int8 ,int8 )" `238 
v L "??65535" 1 581 "sint8" `239 
v L "??65535" 1 581 "sint8" `243 
f G "_mul" 1 581 "sint16(sint8 ,sint8 )" `241 
v L "??65535" 1 582 "int16" `239 
v L "??65535" 1 582 "int16" `246 
f G "_mul" 1 582 "int32(int16 ,int16 )" `244 
v L "??65535" 1 583 "sint16" `239 
v L "??65535" 1 583 "sint16" `249 
f G "_mul" 1 583 "sint32(sint16 ,sint16 )" `247  "Memory Manipulation Prototypes:"
v L "bank" 1 586 "int8" `251 
v L "offset" 1 586 "int8" `252 
f B "read_bank" 1 586 "int8(int8 bank,int8 offset)" `250 
v L "bank" 1 587 "int8" `254 
v L "offset" 1 587 "int8" `255 
v L "value" 1 587 "int8" `256 
f B "write_bank" 1 587 "void(int8 bank,int8 offset,int8 value)" `253 
v L "dest" 1 588 "*int8" `258 
v L "src" 1 588 "*int8" `259 
f B "strcpy" 1 588 "void(*int8 dest,*int8 src)" `257 
v L "dest" 1 589 "*int8" `261 
v L "src" 1 589 "*int8" `262 
f B "strcopy" 1 589 "void(*int8 dest,*int8 src)" `260 
v L "destination" 1 590 "*int8" `264 
v L "value" 1 590 "int8" `265 
v L "num" 1 590 "int16" `266 
f B "memset" 1 590 "void(*int8 destination,int8 value,int16 num)" `263 
v L "destination" 1 591 "*int8" `268 
v L "source" 1 591 "*int8" `269 
v L "num" 1 591 "int16" `270 
f B "memcpy" 1 591 "void(*int8 destination,*int8 source,int16 num)" `267  "String Prototypes:"
v L "cvalue" 1 594 "int8" `272 
f B "toupper" 1 594 "int8(int8 cvalue)" `271 
v L "cvalue" 1 595 "int8" `274 
f B "tolower" 1 595 "int8(int8 cvalue)" `273 
v L "string" 1 596 "*int8" `276 
v L "cstring" 1 596 "*int8" `277 
f B "sprintf" 1 596 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `275  "Data Manipulators Prototypes:"
v L "address" 1 599 "*int8" `280 
v L "bytes" 1 599 "int8" `281 
v L "value" 1 599 "int8" `282 
f B "shift_left" 1 599 "int8(*int8 address,int8 bytes,int8 value)" `279 
v L "address" 1 600 "*int8" `284 
v L "bytes" 1 600 "int8" `285 
v L "value" 1 600 "int8" `286 
f B "shift_right" 1 600 "int8(*int8 address,int8 bytes,int8 value)" `283 
v L "address" 1 601 "*int8" `288 
v L "bytes" 1 601 "int8" `289 
f B "rotate_left" 1 601 "void(*int8 address,int8 bytes)" `287 
v L "address" 1 602 "*int8" `291 
v L "bytes" 1 602 "int8" `292 
f B "rotate_right" 1 602 "void(*int8 address,int8 bytes)" `290 
v L "value" 1 603 "int8" `294 
f B "swap" 1 603 "void(int8 value)" `293 
v L "var" 1 604 "int16" `296 
v L "offset" 1 604 "int8" `297 
f B "make8" 1 604 "int8(int16 var,int8 offset)" `295 
v L "var" 1 605 "int32" `296 
v L "offset" 1 605 "int8" `300 
f G "make8" 1 605 "int8(int32 var,int8 offset)" `298 
v L "varhigh" 1 606 "int8" `302 
v L "varlow" 1 606 "int8" `303 
f B "make16" 1 606 "int16(int8 varhigh,int8 varlow)" `301 
v L "var1" 1 607 "int16" `305 
f B "make32" 1 607 "int32(int16 var1)" `304 
v L "var1" 1 608 "int16" `307 
v L "var2" 1 608 "int16" `308 
f G "make32" 1 608 "int32(int16 var1,int16 var2)" `306 
v L "var1" 1 609 "int16" `307 
v L "var2" 1 609 "int8" `311 
f G "make32" 1 609 "int32(int16 var1,int8 var2)" `309 
v L "var1" 1 610 "int16" `313 
v L "var2" 1 610 "int8" `314 
v L "var3" 1 610 "int8" `315 
f G "make32" 1 610 "int32(int16 var1,int8 var2,int8 var3)" `312 
v L "var1" 1 611 "int8" `317 
f G "make32" 1 611 "int32(int8 var1)" `316 
v L "var1" 1 612 "int8" `307 
v L "var2" 1 612 "int8" `320 
f G "make32" 1 612 "int32(int8 var1,int8 var2)" `318 
v L "var1" 1 613 "int8" `313 
v L "var2" 1 613 "int8" `314 
v L "var3" 1 613 "int8" `324 
f G "make32" 1 613 "int32(int8 var1,int8 var2,int8 var3)" `321 
v L "var1" 1 614 "int8" `326 
v L "var2" 1 614 "int8" `327 
v L "var3" 1 614 "int8" `328 
v L "var4" 1 614 "int8" `329 
f G "make32" 1 614 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `325 
v L "var1" 1 615 "int8" `307 
v L "var2" 1 615 "int16" `332 
f G "make32" 1 615 "int32(int8 var1,int16 var2)" `330 
v L "var1" 1 616 "int8" `313 
v L "var2" 1 616 "int16" `314 
v L "var3" 1 616 "int8" `336 
f G "make32" 1 616 "int32(int8 var1,int16 var2,int8 var3)" `333 
v L "var1" 1 617 "int8" `313 
v L "var2" 1 617 "int8" `314 
v L "var3" 1 617 "int16" `340 
f G "make32" 1 617 "int32(int8 var1,int8 var2,int16 var3)" `337 
v L "var" 1 618 "int8" `342 
v L "bit" 1 618 "int8" `343 
f B "bit_set" 1 618 "void(int8 var,int8 bit)" `341 
v L "var" 1 619 "int16" `342 
v L "bit" 1 619 "int8" `346 
f G "bit_set" 1 619 "void(int16 var,int8 bit)" `344 
v L "var" 1 620 "int32" `342 
v L "bit" 1 620 "int8" `349 
f G "bit_set" 1 620 "void(int32 var,int8 bit)" `347 
v L "var" 1 621 "int8" `351 
v L "bit" 1 621 "int8" `352 
f B "bit_clear" 1 621 "void(int8 var,int8 bit)" `350 
v L "var" 1 622 "int16" `351 
v L "bit" 1 622 "int8" `355 
f G "bit_clear" 1 622 "void(int16 var,int8 bit)" `353 
v L "var" 1 623 "int32" `351 
v L "bit" 1 623 "int8" `358 
f G "bit_clear" 1 623 "void(int32 var,int8 bit)" `356 
v L "var" 1 624 "int8" `360 
v L "bit" 1 624 "int8" `361 
f B "bit_test" 1 624 "int8(int8 var,int8 bit)" `359 
v L "var" 1 625 "int16" `360 
v L "bit" 1 625 "int8" `364 
f G "bit_test" 1 625 "int8(int16 var,int8 bit)" `362 
v L "var" 1 626 "int32" `360 
v L "bit" 1 626 "int8" `367 
f G "bit_test" 1 626 "int8(int32 var,int8 bit)" `365  "#use delay() Prototypes:"
v L "count" 1 629 "int8" `369 
f B "delay_cycles" 1 629 "void(int8 count)" `368 
v L "time" 1 630 "int16" `371 
f B "delay_ms" 1 630 "void(int16 time)" `370 
v L "time" 1 631 "int16" `373 
f B "delay_us" 1 631 "void(int16 time)" `372  "#use rs232() Prototypes:"
v L "cdata" 1 634 "int8" `375 
f B "putchar" 1 634 "void(int8 cdata)" `374 
v L "cdata" 1 635 "int8" `377 
v L "stream" 1 635 "int8" `378 
f G "putchar" 1 635 "void(int8 cdata,int8 stream)" `376 
v L "string" 1 636 "*int8" `380 
f B "puts" 1 636 "void(*int8 string)" `379 
v L "string" 1 637 "*int8" `382 
v L "stream" 1 637 "int8" `383 
f G "puts" 1 637 "void(*int8 string,int8 stream)" `381 
f B "getch" 1 638 "int8()" `384 
v L "stream" 1 639 "int8" `386 
f G "getch" 1 639 "int8(int8 stream)" `385 
v L "string" 1 640 "*int8" `388 
f B "gets" 1 640 "void(*int8 string)" `387 
v L "string" 1 641 "*int8" `390 
v L "stream" 1 641 "int8" `391 
f G "gets" 1 641 "void(*int8 string,int8 stream)" `389 
f B "kbhit" 1 642 "int8()" `392 
v L "stream" 1 643 "int8" `394 
f G "kbhit" 1 643 "int8(int8 stream)" `393 
v L "string" 1 644 "*int8" `396 
f B "printf" 1 644 "void(*int8 string,*int8 _VA_LIST)" `395 
v L "stream" 1 645 "int8" `399 
v L "string" 1 645 "*int8" `400 
f B "fprintf" 1 645 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `398 
f B "putc_send" 1 646 "void()" `402 
v L "stream" 1 647 "int8" `404 
f B "fputc_send" 1 647 "void(int8 stream)" `403 
f B "rcv_buffer_full" 1 648 "int8()" `405 
v L "stream" 1 649 "int8" `407 
f G "rcv_buffer_full" 1 649 "int8(int8 stream)" `406 
f B "rcv_buffer_bytes" 1 650 "int16()" `408 
v L "stream" 1 651 "int8" `410 
f G "rcv_buffer_bytes" 1 651 "int16(int8 stream)" `409 
f B "tx_buffer_full" 1 652 "int8()" `411 
v L "stream" 1 653 "int8" `413 
f G "tx_buffer_full" 1 653 "int8(int8 stream)" `412 
f B "tx_buffer_bytes" 1 654 "int16()" `414 
v L "stream" 1 655 "int8" `416 
f G "tx_buffer_bytes" 1 655 "int16(int8 stream)" `415  "#use i2c() Prototypes:"
f B "i2c_read" 1 658 "int8()" `417 
v L "stream" 1 659 "int8" `419 
f G "i2c_read" 1 659 "int8(int8 stream)" `418 
v L "stream" 1 660 "int8" `421 
v L "ack" 1 660 "int8" `422 
f G "i2c_read" 1 660 "int8(int8 stream,int8 ack)" `420 
v L "data" 1 661 "int8" `424 
f B "i2c_write" 1 661 "int8(int8 data)" `423 
v L "stream" 1 662 "int8" `426 
v L "data" 1 662 "int8" `427 
f G "i2c_write" 1 662 "int8(int8 stream,int8 data)" `425 
f B "i2c_start" 1 663 "void()" `428 
v L "stream" 1 664 "int8" `430 
f G "i2c_start" 1 664 "void(int8 stream)" `429 
v L "stream" 1 665 "int8" `432 
v L "restart" 1 665 "int8" `433 
f G "i2c_start" 1 665 "void(int8 stream,int8 restart)" `431 
f B "i2c_stop" 1 666 "void()" `434 
v L "stream" 1 667 "int8" `436 
f G "i2c_stop" 1 667 "void(int8 stream)" `435 
f B "i2c_isr_state" 1 668 "int8()" `437 
v L "addr" 1 669 "int8" `439 
f B "i2c_slaveaddr" 1 669 "void(int8 addr)" `438 
v L "stream" 1 670 "int8" `441 
v L "addr" 1 670 "int8" `442 
f G "i2c_slaveaddr" 1 670 "void(int8 stream,int8 addr)" `440 
f B "i2c_poll" 1 671 "int8()" `443 
v L "stream" 1 672 "int8" `445 
f G "i2c_poll" 1 672 "int8(int8 stream)" `444 
v L "baud" 1 673 "int32" `447 
f B "i2c_init" 1 673 "void(int32 baud)" `446 
v L "stream" 1 674 "int8" `449 
v L "baud" 1 674 "int32" `450 
f G "i2c_init" 1 674 "void(int8 stream,int32 baud)" `448  "#use spi() Prototypes:"
f B "spi_xfer" 1 677 "int8()" `451 
f G "spi_xfer" 1 678 "int16()" `452 
f G "spi_xfer" 1 679 "int32()" `453 
v L "data" 1 680 "int8" `455 
f G "spi_xfer" 1 680 "int8(int8 data)" `454 
v L "data" 1 681 "int16" `457 
f G "spi_xfer" 1 681 "int16(int16 data)" `456 
v L "data" 1 682 "int32" `459 
f G "spi_xfer" 1 682 "int32(int32 data)" `458 
v L "stream" 1 683 "int8" `461 
v L "data" 1 683 "int8" `462 
f G "spi_xfer" 1 683 "int8(int8 stream,int8 data)" `460 
v L "stream" 1 684 "int8" `461 
v L "data" 1 684 "int16" `465 
f G "spi_xfer" 1 684 "int16(int8 stream,int16 data)" `463 
v L "stream" 1 685 "int8" `461 
v L "data" 1 685 "int32" `468 
f G "spi_xfer" 1 685 "int32(int8 stream,int32 data)" `466 
v L "stream" 1 686 "int8" `470 
v L "data" 1 686 "int8" `471 
v L "bits" 1 686 "int8" `472 
f G "spi_xfer" 1 686 "int8(int8 stream,int8 data,int8 bits)" `469 
v L "stream" 1 687 "int8" `470 
v L "data" 1 687 "int16" `471 
v L "bits" 1 687 "int8" `476 
f G "spi_xfer" 1 687 "int16(int8 stream,int16 data,int8 bits)" `473 
v L "stream" 1 688 "int8" `470 
v L "data" 1 688 "int32" `471 
v L "bits" 1 688 "int8" `480 
f G "spi_xfer" 1 688 "int32(int8 stream,int32 data,int8 bits)" `477 
v L "baud" 1 689 "int32" `482 
f B "spi_init" 1 689 "void(int32 baud)" `481 
v L "stream" 1 690 "int8" `484 
v L "baud" 1 690 "int32" `485 
f G "spi_init" 1 690 "void(int8 stream,int32 baud)" `483 
v L "baud" 1 691 "int32" `487 
f B "spi_speed" 1 691 "void(int32 baud)" `486 
v L "stream" 1 692 "int8" `489 
v L "baud" 1 692 "int32" `490 
f G "spi_speed" 1 692 "void(int8 stream,int32 baud)" `488 
v L "stream" 1 693 "int8" `492 
v L "baud" 1 693 "int32" `493 
v L "clock" 1 693 "int32" `494 
f G "spi_speed" 1 693 "void(int8 stream,int32 baud,int32 clock)" `491 
v L "data" 1 694 "int8" `496 
f B "spi_prewrite" 1 694 "void(int8 data)" `495 
v L "data" 1 695 "int16" `498 
f G "spi_prewrite" 1 695 "void(int16 data)" `497 
v L "data" 1 696 "int32" `500 
f G "spi_prewrite" 1 696 "void(int32 data)" `499 
v L "??65535" 1 697 "int8" `502 
v L "data" 1 697 "int8" `503 
f G "spi_prewrite" 1 697 "void(int8 ,int8 data)" `501 
v L "??65535" 1 698 "int8" `502 
v L "data" 1 698 "int16" `506 
f G "spi_prewrite" 1 698 "void(int8 ,int16 data)" `504 
v L "??65535" 1 699 "int8" `502 
v L "data" 1 699 "int32" `509 
f G "spi_prewrite" 1 699 "void(int8 ,int32 data)" `507 
f B "spi_xfer_in" 1 700 "int8()" `510 
f G "spi_xfer_in" 1 701 "int16()" `511 
f G "spi_xfer_in" 1 702 "int32()" `512 
v L "bits" 1 703 "int8" `514 
f G "spi_xfer_in" 1 703 "int8(int8 bits)" `513 
v L "bits" 1 704 "int8" `516 
f G "spi_xfer_in" 1 704 "int16(int8 bits)" `515 
v L "bits" 1 705 "int8" `518 
f G "spi_xfer_in" 1 705 "int32(int8 bits)" `517 
v L "stream" 1 706 "int8" `520 
v L "bits" 1 706 "int8" `521 
f G "spi_xfer_in" 1 706 "int8(int8 stream,int8 bits)" `519 
v L "stream" 1 707 "int8" `520 
v L "bits" 1 707 "int8" `524 
f G "spi_xfer_in" 1 707 "int16(int8 stream,int8 bits)" `522 
v L "stream" 1 708 "int8" `520 
v L "bits" 1 708 "int8" `527 
f G "spi_xfer_in" 1 708 "int32(int8 stream,int8 bits)" `525  "#use rtos() Prototypes:"
f B "rtos_run" 1 711 "void()" `528 
f B "rtos_yield" 1 712 "void()" `529 
v L "task" 1 713 "int8" `531 
f B "rtos_enable" 1 713 "void(int8 task)" `530 
v L "task" 1 714 "int8" `533 
f B "rtos_disable" 1 714 "void(int8 task)" `532 
f B "rtos_terminate" 1 715 "void()" `534 
v L "flag" 1 716 "int8" `536 
f B "rtos_await" 1 716 "void(int8 flag)" `535 
v L "sem" 1 717 "int8" `538 
f B "rtos_wait" 1 717 "void(int8 sem)" `537 
v L "sem" 1 718 "int8" `540 
f B "rtos_signal" 1 718 "void(int8 sem)" `539 
v L "task" 1 719 "int8" `542 
v L "msg" 1 719 "int8" `543 
f B "rtos_msg_send" 1 719 "void(int8 task,int8 msg)" `541 
f B "rtos_msg_read" 1 720 "int8()" `544 
f B "rtos_msg_poll" 1 721 "int8()" `545 
v L "task" 1 722 "int8" `547 
f B "rtos_overrun" 1 722 "int8(int8 task)" `546 
v L "task" 1 723 "int8" `549 
v L "stat" 1 723 "*int8" `550 
f B "rtos_stats" 1 723 "void(int8 task,*int8 stat)" `548  "#use timer() Prototypes:"
f B "get_ticks" 1 726 "int8()" `551 
f G "get_ticks" 1 727 "int16()" `552 
f G "get_ticks" 1 728 "int32()" `553 
v L "stream" 1 729 "int8" `555 
f G "get_ticks" 1 729 "int8(int8 stream)" `554 
v L "stream" 1 730 "int8" `557 
f G "get_ticks" 1 730 "int16(int8 stream)" `556 
v L "stream" 1 731 "int8" `559 
f G "get_ticks" 1 731 "int32(int8 stream)" `558 
v L "value" 1 732 "int8" `561 
f B "set_ticks" 1 732 "void(int8 value)" `560 
v L "value" 1 733 "int16" `563 
f G "set_ticks" 1 733 "void(int16 value)" `562 
v L "value" 1 734 "int32" `565 
f G "set_ticks" 1 734 "void(int32 value)" `564 
v L "stream" 1 735 "int8" `567 
v L "value" 1 735 "int8" `568 
f G "set_ticks" 1 735 "void(int8 stream,int8 value)" `566 
v L "stream" 1 736 "int8" `567 
v L "value" 1 736 "int16" `571 
f G "set_ticks" 1 736 "void(int8 stream,int16 value)" `569 
v L "stream" 1 737 "int8" `567 
v L "value" 1 737 "int32" `574 
f G "set_ticks" 1 737 "void(int8 stream,int32 value)" `572  "#use pwm() Prototypes:"
f B "pwm_on" 1 740 "void()" `575 
v L "stream" 1 741 "int8" `577 
f G "pwm_on" 1 741 "void(int8 stream)" `576 
f B "pwm_off" 1 742 "void()" `578 
v L "stream" 1 743 "int8" `580 
f G "pwm_off" 1 743 "void(int8 stream)" `579 
v L "duty" 1 744 "int16" `582 
f B "pwm_set_duty" 1 744 "void(int16 duty)" `581 
v L "stream" 1 745 "int8" `584 
v L "duty" 1 745 "int16" `585 
f G "pwm_set_duty" 1 745 "void(int8 stream,int16 duty)" `583 
v L "percent" 1 746 "int16" `587 
f B "pwm_set_duty_percent" 1 746 "void(int16 percent)" `586 
v L "stream" 1 747 "int8" `589 
v L "percent" 1 747 "int16" `590 
f G "pwm_set_duty_percent" 1 747 "void(int8 stream,int16 percent)" `588 
v L "frequency" 1 748 "int32" `592 
f B "pwm_set_frequency" 1 748 "void(int32 frequency)" `591 
v L "stream" 1 749 "int8" `594 
v L "frequency" 1 749 "int32" `595 
f G "pwm_set_frequency" 1 749 "void(int8 stream,int32 frequency)" `593  "#use capture() Prototypes:"
f B "get_capture_time" 1 752 "int16()" `596 
v L "stream" 1 753 "int8" `598 
f G "get_capture_time" 1 753 "int16(int8 stream)" `597 
f B "get_capture_event" 1 754 "int8()" `599 
v L "stream" 1 755 "int8" `601 
f G "get_capture_event" 1 755 "int8(int8 stream)" `600  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 768 "int16" `603 
f B "goto_address" 1 768 "void(int16 address)" `602 
v L "label" 1 769 "int16" `605 
f B "label_address" 1 769 "int16(int16 label)" `604  "Program Memory Prototypes:"
v L "address" 1 772 "int16" `607 
v L "dataptr" 1 772 "*int8" `608 
v L "count" 1 772 "int16" `609 
f B "read_program_memory" 1 772 "void(int16 address,*int8 dataptr,int16 count)" `606 
v L "address" 1 773 "int16" `611 
f B "read_program_eeprom" 1 773 "int16(int16 address)" `610 
v L "address" 1 774 "int16" `613 
f B "erase_program_eeprom" 1 774 "void(int16 address)" `612 
v L "address" 1 775 "int16" `615 
v L "dataptr" 1 775 "*int8" `616 
v L "count" 1 775 "int16" `617 
f B "write_program_memory" 1 775 "void(int16 address,*int8 dataptr,int16 count)" `614 
v L "address" 1 776 "int16" `619 
v L "data" 1 776 "int16" `620 
f B "write_program_eeprom" 1 776 "void(int16 address,int16 data)" `618  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 781 "int16" `621 
v L "address" 1 786 "__EEADDRESS__" `623 
f B "read_eeprom" 1 786 "int8(__EEADDRESS__ address)" `622 
v L "address" 1 787 "__EEADDRESS__" `625 
v L "value" 1 787 "int8" `626 
f B "write_eeprom" 1 787 "void(__EEADDRESS__ address,int8 value)" `624  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
v L "interrupt" 1 794 "int32" `628 
f B "enable_interrupts" 1 794 "void(int32 interrupt)" `627 
v L "interrupt" 1 795 "int32" `630 
f B "disable_interrupts" 1 795 "void(int32 interrupt)" `629 
v L "interrupt" 1 796 "int32" `632 
f B "clear_interrupt" 1 796 "void(int32 interrupt)" `631 
v L "interrupt" 1 797 "int32" `634 
f B "interrupt_active" 1 797 "int8(int32 interrupt)" `633 
v L "interrupt" 1 798 "int32" `636 
f B "interrupt_enabled" 1 798 "int8(int32 interrupt)" `635 
v L "source" 1 799 "int8" `638 
v L "edge" 1 799 "int8" `639 
f B "ext_int_edge" 1 799 "void(int8 source,int8 edge)" `637 
v L "address" 1 800 "int16" `641 
f B "jump_to_irs" 1 800 "void(int16 address)" `640  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 802 "0x40"
d G "H_TO_L" 1 803 "0"
d G "GLOBAL" 1 805 "0xF2C0"
d G "PERIPH" 1 806 "0xF240"
d G "INT_RTCC" 1 807 "0x00F220"
d G "INT_TIMER0" 1 808 "0x00F220"
d G "INT_TIMER1" 1 809 "0x009D01"
d G "INT_TIMER2" 1 810 "0x009D02"
d G "INT_TIMER3" 1 811 "0x00A002"
d G "INT_EXT_L2H" 1 812 "0x5000F210"
d G "INT_EXT_H2L" 1 813 "0x6000F210"
d G "INT_EXT" 1 814 "0x00F210"
d G "INT_EXT1_L2H" 1 815 "0x5001F008"
d G "INT_EXT1_H2L" 1 816 "0x6001F008"
d G "INT_EXT1" 1 817 "0x00F008"
d G "INT_EXT2_L2H" 1 818 "0x5002F010"
d G "INT_EXT2_H2L" 1 819 "0x6002F010"
d G "INT_EXT2" 1 820 "0x00F010"
d G "INT_RB" 1 821 "0x00FFF208"
d G "INT_AD" 1 822 "0x009D40"
d G "INT_RDA" 1 823 "0x009D20"
d G "INT_TBE" 1 824 "0x009D10"
d G "INT_SSP" 1 825 "0x009D08"
d G "INT_CCP1" 1 826 "0x009D04"
d G "INT_CCP2" 1 827 "0x00A001"
d G "INT_BUSCOL" 1 828 "0x00A008"
d G "INT_LOWVOLT" 1 829 "0x00A004"
d G "INT_COMP" 1 830 "0x00A040"
d G "INT_EEPROM" 1 831 "0x00A010"
d G "INT_OSCF" 1 832 "0x00A080"
d G "INT_SPP" 1 833 "0x009D80"
d G "INT_USB" 1 834 "0x00A020"
C L "jump_to_irs" 0 12 2 "FUNCTION"
D G "__LCD_C__" 2 76 ""
C L "jump_to_irs" 2 2 2 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `658  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 2 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 2 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 2 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 2 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 2 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 2 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 2 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 2 187 "20"
f G "lcd_read_nibble" 2 190 "int8()" `659 
F G "lcd_read_byte" 2 193 "int8()" `660 
V L "low" 2 194 "int8" `661 
V L "high" 2 194 "int8" `662 
F G "lcd_read_nibble" 2 240 "int8()" `659 
V L "n" 2 242 "int8" `663 
C L "lcd_read_nibble" 2 2 1 "FUNCTION"
V L "n" 2 256 "int8" `665 
F G "lcd_send_nibble" 2 257 "void(int8 n)" `664 
C L "lcd_send_nibble" 2 2 1 "FUNCTION"
V L "address" 2 274 "int8" `667 
V L "n" 2 274 "int8" `668 
F G "lcd_send_byte" 2 275 "void(int8 address,int8 n)" `666 
F G "lcd_init" 2 300 "void()" `669 
V L "i" 2 301 "int8" `670 
V L "LCD_INIT_STRING" 2 302 "int8[4]" `671 
C L "lcd_init" 2 2 2 "FUNCTION"
V L "x" 2 345 "int8" `673 
V L "y" 2 345 "int8" `674 
F G "lcd_gotoxy" 2 346 "void(int8 x,int8 y)" `672 
V L "address" 2 347 "int8" `675 
V L "c" 2 363 "int8" `677 
F G "lcd_putc" 2 364 "void(int8 c)" `676 
V L "x" 2 406 "int8" `679 
V L "y" 2 406 "int8" `680 
F G "lcd_getc" 2 407 "int8(int8 x,int8 y)" `678 
V L "value" 2 408 "int8" `681 
C L "lcd_getc" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 5 "FUNCTION"
V L "which" 2 424 "int8" `683 
V L "ptr" 2 424 "*int8" `684 
F G "lcd_set_cgram_char" 2 425 "void(int8 which,*int8 ptr)" `682 
V L "i" 2 426 "int8" `685 
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
V L "on" 2 443 "int8" `687 
F G "lcd_cursor_on" 2 444 "void(int8 on)" `686 
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
D G "_GPRMC_" 3 6 "1"
D G "_GPGGA_" 3 7 "2"
D G "_OTHER_" 3 8 "3"
D G "_STDINT" 4 19 ""
T G "int8_t" 4 23 "sint8" `688 
T G "uint8_t" 4 24 "int8" `689 
T G "int16_t" 4 25 "sint16" `690 
T G "uint16_t" 4 26 "int16" `691 
T G "int32_t" 4 27 "sint32" `692 
T G "uint32_t" 4 28 "int32" `693 
D G "INT8_MAX" 4 37 " (128)"
D G "INT8_MIN" 4 38 " (-127)"
D G "UINT8_MAX" 4 39 " (255)"
D G "INT16_MAX" 4 41 " (32767)"
D G "INT16_MIN" 4 42 " (-32768)"
D G "UINT16_MAX" 4 43 " (65535)"
D G "INT32_MAX" 4 45 " (2147483647)"
D G "INT32_MIN" 4 46 " (-2147483648)"
D G "UINT32_MAX" 4 47 " (4294967295)"
T G "int_least8_t" 4 61 "sint8" `694 
T G "uint_least8_t" 4 62 "int8" `695 
T G "int_least16_t" 4 63 "sint16" `696 
T G "uint_least16_t" 4 64 "int16" `697 
T G "int_least32_t" 4 65 "sint32" `698 
T G "uint_least32_t" 4 66 "int32" `699 
D G "INT_LEAST8_MAX" 4 75 " (128)"
D G "INT_LEAST8_MIN" 4 76 " (-127)"
D G "UINT_LEAST8_MAX" 4 77 " (255)"
D G "INT_LEAST16_MAX" 4 79 " (32767)"
D G "INT_LEAST16_MIN" 4 80 " (-32768)"
D G "UINT_LEAST16_MAX" 4 81 " (65535)"
D G "INT_LEAST32_MAX" 4 83 " (2147483647)"
D G "INT_LEAST32_MIN" 4 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 4 85 " (4294967295)"
T G "int_fast8_t" 4 112 "sint8" `700 
T G "uint_fast8_t" 4 113 "int8" `701 
D G "INT_FAST8_MAX" 4 114 " (128)"
D G "INT_FAST8_MIN" 4 115 " (-127)"
D G "UINT_FAST8_MAX" 4 116 " (255)"
T G "int_fast16_t" 4 117 "sint16" `702 
T G "uint_fast16_t" 4 118 "int16" `703 
T G "int_fast32_t" 4 121 "sint32" `704 
T G "uint_fast32_t" 4 122 "int32" `705 
D G "INT_FAST16_MAX" 4 124 " (32767)"
D G "INT_FAST16_MIN" 4 125 " (-32768)"
D G "UINT_FAST16_MAX" 4 126 " (65535)"
D G "INT_FAST32_MAX" 4 128 " (2147483647)"
D G "INT_FAST32_MIN" 4 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 4 130 " (4294967295)"
D G "_STDLIB" 5 12 ""
D G "RAND_MAX" 5 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 5 25 "1"
T G "div_t" 5 33 "{sint8 quot,sint8 rem}" `709 
T G "ldiv_t" 5 38 "{sint16 quot,sint16 rem}" `713  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 18 "unsigned int16"
D G "size_t" 6 24 "unsigned int16"
D G "wchar_t" 6 26 "char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 5 43 2 "FUNCTION"
C L "atoi" 5 46 1 "*"
C L "atoi" 5 46 1 "*"
V L "s" 5 50 "*int8" `715 
f G "atoi" 5 50 "sint8(*int8 s)" `714  "Syntax: signed int32  atoi32(char * s)"
V L "s" 5 58 "*int8" `717 
f G "atoi32" 5 58 "sint32(*int8 s)" `716  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 5 46 2 "FUNCTION"
V L "num" 5 79 "sint32" `719 
V L "base" 5 79 "int8" `720 
V L "s" 5 79 "*int8" `721 
f G "itoa" 5 79 "*int8(sint32 num,int8 base,*int8 s)" `718  "Standard template: signed int16  atol(char * s)"
C L "itoa" 5 81 1 "*"
C L "itoa" 5 81 1 "*"
V L "s" 5 85 "*int8" `723 
f G "atol" 5 85 "sint16(*int8 s)" `722  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
V L "s" 5 93 "*int8" `725 
V L "endptr" 5 93 "*int8" `726 
V L "base" 5 93 "sint8" `727 
f G "strtol" 5 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `724  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
V L "s" 5 101 "*int8" `729 
V L "endptr" 5 101 "*int8" `730 
V L "base" 5 101 "sint8" `731 
f G "strtoul" 5 101 "int16(*int8 s,*int8 endptr,sint8 base)" `728  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 5 95 2 "FUNCTION"
C L "strtoul" 5 103 1 "*"
C L "strtoul" 5 103 1 "*"
C L "strtoul" 5 103 1 "*"
V L "s" 5 110 "*int8" `733 
V L "endptr" 5 110 "*int8" `734 
f G "strtof" 5 110 "float(*int8 s,*int8 endptr)" `732  "provided for compatibility"
D G "strtof48" 5 116 "(s, e) strtof(s, e)"
D G "strtod" 5 117 "(s, e) strtof(s, e)"
C L "strtof" 5 103 1 "FUNCTION"
C L "strtof" 5 120 1 "*"
D G "atof" 5 124 "(s)   strtof(s, 0)"
C L "strtof" 5 120 1 "FUNCTION"
C L "strtof" 5 143 1 "*"
C L "strtof" 5 143 1 "*"
C L "strtof" 5 143 1 "*"
V L "s" 5 149 "*int8" `736 
f G "atoe" 5 149 "float(*int8 s)" `735  "Pseudo-random sequence generation functions"
C L "atoe" 5 143 1 "FUNCTION"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
f G "rand" 5 169 "int16()" `737  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
V L "seed" 5 191 "int32" `739 
f G "srand" 5 191 "void(int32 seed)" `738  "Memory management functions"
C L "srand" 5 171 3 "FUNCTION"
V L "string" 5 205 "*int8" `741 
f G "system" 5 205 "sint8(*int8 string)" `740  "Searching and sorting utilities"
C L "system" 5 171 1 "FUNCTION"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 4 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
D G "labs" 5 249 "abs"
V L "numer" 5 251 "sint8" `743 
V L "denom" 5 251 "sint8" `744 
f G "div" 5 251 "div_t(sint8 numer,sint8 denom)" `742 
V L "numer" 5 252 "sint16" `746 
V L "denom" 5 252 "sint16" `747 
f G "ldiv" 5 252 "ldiv_t(sint16 numer,sint16 denom)" `745  "Multibyte character functions"
C L "ldiv" 5 229 4 "FUNCTION"
C L "ldiv" 6 2 7 "FUNCTION"
D G "_STRING" 7 12 ""
C L "ldiv" 6 2 7 "FUNCTION"
D G "_CTYPE" 8 12 ""
D G "islower" 8 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 8 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 8 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 8 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 8 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 8 19 "(x)  ((x)==' ')"
D G "isxdigit" 8 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 8 21 "(x)  ((x)<' ')"
D G "isprint" 8 22 "(x)  ((x)>=' ')"
D G "isgraph" 8 23 "(x)  ((x)>' ')"
D G "ispunct" 8 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 7 19 10 "FUNCTION"
V L "s1" 7 34 "*int8" `749 
V L "s2" 7 34 "*int8" `750 
V L "n" 7 34 "int16" `751 
F G "memmove" 7 35 "*int8(*int8 s1,*int8 s2,int16 n)" `748 
V L "sc1" 7 36 "*int8" `752 
V L "sc2" 7 37 "*int8" `753 
D G "strcopy" 7 54 "strcpy"
C L "strncpy" 7 19 4 "FUNCTION"
V L "s1" 7 61 "*int8" `755 
V L "s2" 7 61 "*int8" `756 
V L "n" 7 61 "int16" `757 
F G "strncpy" 7 62 "*int8(*int8 s1,*int8 s2,int16 n)" `754 
V L "s" 7 63 "*int8" `758 
C L "strcat" 7 19 3 "FUNCTION"
V L "s1" 7 78 "*int8" `760 
V L "s2" 7 78 "*int8" `761 
F G "strcat" 7 79 "*int8(*int8 s1,*int8 s2)" `759 
V L "s" 7 80 "*int8" `762 
C L "strncat" 7 19 2 "FUNCTION"
V L "s1" 7 96 "*int8" `764 
V L "s2" 7 96 "*int8" `765 
V L "n" 7 96 "int16" `766 
F G "strncat" 7 97 "*int8(*int8 s1,*int8 s2,int16 n)" `763 
V L "s" 7 98 "*int8" `767 
C L "memcmp" 7 19 3 "FUNCTION"
V L "s1" 7 120 "*int8" `769 
V L "s2" 7 120 "*int8" `770 
V L "n" 7 120 "int16" `771 
F G "memcmp" 7 121 "sint8(*int8 s1,*int8 s2,int16 n)" `768 
V L "su1" 7 122 "*int8" `772 
V L "su2" 7 122 "*int8" `773 
C L "strcmp" 7 19 2 "FUNCTION"
V L "s1" 7 134 "*int8" `775 
V L "s2" 7 134 "*int8" `776 
F G "strcmp" 7 135 "sint8(*int8 s1,*int8 s2)" `774 
C L "strcoll" 7 19 2 "FUNCTION"
V L "s1" 7 144 "*int8" `778 
V L "s2" 7 144 "*int8" `779 
F G "strcoll" 7 145 "sint8(*int8 s1,*int8 s2)" `777 
C L "strncmp" 7 19 4 "FUNCTION"
V L "s1" 7 157 "*int8" `781 
V L "s2" 7 157 "*int8" `782 
V L "n" 7 157 "int16" `783 
F G "strncmp" 7 158 "sint8(*int8 s1,*int8 s2,int16 n)" `780 
C L "strxfrm" 7 19 3 "FUNCTION"
V L "s1" 7 169 "*int8" `785 
V L "s2" 7 169 "*int8" `786 
V L "n" 7 169 "int16" `787 
F G "strxfrm" 7 170 "int16(*int8 s1,*int8 s2,int16 n)" `784 
V L "s" 7 171 "*int8" `788 
V L "n1" 7 172 "int8" `789 
C L "memchr" 7 19 3 "FUNCTION"
V L "s" 7 191 "*int8" `791 
V L "c" 7 191 "int8" `792 
V L "n" 7 191 "int16" `793 
F G "memchr" 7 192 "*int8(*int8 s,int8 c,int16 n)" `790 
V L "uc" 7 193 "int8" `794 
V L "su" 7 194 "*int8" `795 
C L "strchr" 7 19 2 "FUNCTION"
V L "s" 7 205 "*int8" `797 
V L "c" 7 205 "int8" `798 
F G "strchr" 7 206 "*int8(*int8 s,int8 c)" `796 
C L "strcspn" 7 19 4 "FUNCTION"
V L "s1" 7 217 "*int8" `800 
V L "s2" 7 217 "*int8" `801 
F G "strcspn" 7 218 "int8(*int8 s1,*int8 s2)" `799 
V L "sc1" 7 219 "*int8" `802 
V L "sc2" 7 219 "*int8" `803 
C L "strpbrk" 7 19 4 "FUNCTION"
V L "s1" 7 232 "*int8" `805 
V L "s2" 7 232 "*int8" `806 
F G "strpbrk" 7 233 "*int8(*int8 s1,*int8 s2)" `804 
V L "sc1" 7 234 "*int8" `807 
V L "sc2" 7 234 "*int8" `808 
C L "strrchr" 7 19 2 "FUNCTION"
V L "s" 7 247 "*int8" `810 
V L "c" 7 247 "int8" `811 
F G "strrchr" 7 248 "*int8(*int8 s,int8 c)" `809 
V L "p" 7 249 "*int8" `812 
C L "strspn" 7 19 2 "FUNCTION"
V L "s1" 7 262 "*int8" `814 
V L "s2" 7 262 "*int8" `815 
F G "strspn" 7 263 "int8(*int8 s1,*int8 s2)" `813 
V L "sc1" 7 264 "*int8" `816 
V L "sc2" 7 264 "*int8" `817 
C L "strstr" 7 19 6 "FUNCTION"
V L "s1" 7 281 "*int8" `819 
V L "s2" 7 281 "*int8" `820 
F G "strstr" 7 282 "*int8(*int8 s1,*int8 s2)" `818 
V L "s" 7 283 "*int8" `821 
V L "t" 7 283 "*int8" `822 
C L "strtok" 7 19 13 "FUNCTION"
V L "s1" 7 320 "*int8" `824 
V L "s2" 7 320 "*int8" `825 
F G "strtok" 7 321 "*int8(*int8 s1,*int8 s2)" `823 
V L "beg" 7 322 "*int8" `826 
V L "end" 7 322 "*int8" `827 
V L "save" 7 323 "*int8" `828 
C L "strlen" 7 19 6 "FUNCTION"
V L "s" 7 369 "*int8" `830 
F G "strlen" 7 370 "int8(*int8 s)" `829 
V L "sc" 7 371 "*int8" `831 
C L "stricmp" 7 19 2 "FUNCTION"
V L "s1" 7 380 "*int8" `833 
V L "s2" 7 380 "*int8" `834 
F G "stricmp" 7 381 "sint8(*int8 s1,*int8 s2)" `832 
C L "strlwr" 7 19 3 "FUNCTION"
V L "s" 7 394 "*int8" `838 
F G "strlwr" 7 395 "*int8(*int8 s)" `837 
V L "p" 7 396 "*int8" `839 
C L "strupr" 7 19 3 "FUNCTION"
V L "s" 7 408 "*int8" `841 
F G "strupr" 7 409 "*int8(*int8 s)" `840 
V L "p" 7 410 "*int8" `842 
V L "numer" 5 274 "sint8" `743 
V L "denom" 5 274 "sint8" `845 
F G "div" 5 275 "div_t(sint8 numer,sint8 denom)" `742 
V L "val" 5 276 "div_t" `843 
V L "numer" 5 282 "sint16" `746 
V L "denom" 5 282 "sint16" `852 
F G "ldiv" 5 283 "ldiv_t(sint16 numer,sint16 denom)" `745 
V L "val" 5 284 "ldiv_t" `850 
V L "s" 5 361 "*int8" `858 
F G "atoe" 5 362 "float(*int8 s)" `735 
V L "pow10" 5 363 "float" `857 
V L "result" 5 364 "float" `858 
V L "sign" 5 365 "int8" `859 
V L "expsign" 5 366 "int8" `860 
V L "c" 5 367 "int8" `861 
V L "ptr" 5 368 "int8" `862 
V L "i" 5 369 "int8" `863 
V L "exp" 5 370 "float" `864 
V L "expcnt" 5 371 "int8" `865 
C L "atoe" 5 397 1 "FUNCTION"
V L "s" 5 429 "*int8" `878 
F G "atoi" 5 430 "sint8(*int8 s)" `714 
V L "result" 5 431 "sint8" `877 
V L "sign" 5 432 "int8" `878 
V L "base" 5 432 "int8" `879 
V L "index" 5 432 "int8" `880 
V L "c" 5 433 "int8" `881 
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
V L "s" 5 498 "*int8" `883 
F G "atol" 5 499 "sint16(*int8 s)" `722 
V L "result" 5 500 "sint16" `882 
V L "sign" 5 501 "int8" `883 
V L "base" 5 501 "int8" `884 
V L "index" 5 501 "int8" `885 
V L "c" 5 502 "int8" `886 
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "mult_with10" 5 397 1 "FUNCTION"
V L "num" 5 565 "int32" `888 
F G "mult_with10" 5 566 "sint32(int32 num)" `887 
V L "s" 5 571 "*int8" `890 
F G "atoi32" 5 572 "sint32(*int8 s)" `716 
V L "result" 5 573 "sint32" `889 
V L "sign" 5 574 "int8" `890 
V L "base" 5 574 "int8" `891 
V L "index" 5 574 "int8" `892 
V L "c" 5 575 "int8" `893 
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
V L "num" 5 770 "sint32" `719 
V L "base" 5 770 "int8" `720 
V L "s" 5 770 "*int8" `897 
F G "itoa" 5 771 "*int8(sint32 num,int8 base,*int8 s)" `718 
V L "temp" 5 772 "int32" `894 
V L "i" 5 773 "int8" `895 
V L "sign" 5 773 "int8" `896 
V L "cnt" 5 773 "int8" `897 
V L "c" 5 774 "int8" `898 
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
V L "s" 5 885 "*int8" `733 
V L "endptr" 5 885 "*int8" `907 
F G "strtof" 5 886 "float(*int8 s,*int8 endptr)" `732 
V L "pow10" 5 887 "float" `905 
V L "result" 5 888 "float" `906 
V L "skip" 5 889 "int1" `907 
V L "sign" 5 889 "int1" `908 
V L "point" 5 889 "int1" `909 
V L "c" 5 890 "int8" `910 
V L "ptr" 5 891 "int8" `911 
V L "s" 5 1103 "*int8" `729 
V L "endptr" 5 1103 "*int8" `730 
V L "base" 5 1103 "sint8" `916 
F G "strtoul" 5 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `728 
V L "sc" 5 1105 "*int8" `913 
V L "s1" 5 1105 "*int8" `914 
V L "sd" 5 1105 "*int8" `915 
V L "x" 5 1106 "int16" `916 
V L "sign" 5 1107 "int8" `917 
V L "digits" 5 1108 "int8[1]" `918 
C L "strtoul" 5 397 1 "FUNCTION"
C L "strtoul" 5 397 1 "FUNCTION"
C L "strtoul" 5 397 1 "FUNCTION"
V L "s" 5 1165 "*int8" `725 
V L "endptr" 5 1165 "*int8" `726 
V L "base" 5 1165 "sint8" `923 
F G "strtol" 5 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `724 
V L "sc" 5 1167 "*int8" `920 
V L "s1" 5 1167 "*int8" `921 
V L "sd" 5 1167 "*int8" `922 
V L "x" 5 1168 "sint16" `923 
V L "sign" 5 1169 "int8" `924 
V L "digits" 5 1170 "int8[1]" `925 
C L "strtol" 5 397 1 "FUNCTION"
C L "strtol" 5 397 1 "FUNCTION"
C L "strtol" 5 397 1 "FUNCTION"
V L "string" 5 1228 "*int8" `928 
F G "system" 5 1229 "sint8(*int8 string)" `740 
V L "s" 5 1233 "*int8" `928 
V L "n" 5 1233 "int16" `929 
F G "mblen" 5 1234 "int8(*int8 s,int16 n)" `927 
V L "pwc" 5 1238 "*int8" `931 
V L "s" 5 1238 "*int8" `932 
V L "n" 5 1238 "int16" `933 
F G "mbtowc" 5 1239 "int8(*int8 pwc,*int8 s,int16 n)" `930 
V L "s" 5 1244 "*int8" `935 
V L "wchar" 5 1244 "int8" `936 
F G "wctomb" 5 1245 "int8(*int8 s,int8 wchar)" `934 
V L "pwcs" 5 1250 "*int8" `938 
V L "s" 5 1250 "*int8" `939 
V L "n" 5 1250 "int16" `940 
F G "mbstowcs" 5 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `937 
V L "s" 5 1256 "*int8" `942 
V L "pwcs" 5 1256 "*int8" `943 
V L "n" 5 1256 "int16" `944 
F G "wcstombs" 5 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `941 
V G "_Randseed" 5 1266 "int32" `945 
F G "rand" 5 1269 "int16()" `737 
V L "seed" 5 1274 "int32" `950 
F G "srand" 5 1275 "void(int32 seed)" `738 
V L "p1" 5 1284 "*int8" `950 
V L "p2" 5 1284 "*int8" `951 
T G "*_Cmpfun" 5 1284 "sint8(*int8 p1,*int8 p2)" `949 
V L "qdata" 5 1291 "*int8" `954 
V L "qitems" 5 1291 "int8" `955 
V L "qsize" 5 1291 "int8" `956 
V L "cmp" 5 1291 "_Cmpfun" `957 
F G "qsort" 5 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `953 
V L "m" 5 1292 "int8" `958 
V L "j" 5 1292 "int8" `959 
V L "i" 5 1292 "int8" `960 
V L "l" 5 1292 "int8" `961 
V L "done" 5 1293 "int1" `962 
V L "t" 5 1294 "int8[16]" `963 
V L "key" 5 1319 "*int8" `966 
V L "base" 5 1319 "*int8" `967 
V L "num" 5 1319 "int16" `968 
V L "width" 5 1319 "int16" `969 
V L "cmp" 5 1319 "_Cmpfun" `970 
F G "bsearch" 5 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `965 
V L "p" 5 1321 "*int8" `971 
V L "q" 5 1321 "*int8" `972 
V L "n" 5 1322 "int16" `973 
V L "pivot" 5 1323 "int16" `974 
V L "val" 5 1324 "sint8" `975 
C L "bsearch" 5 397 1 "FUNCTION"
V G "GPRMC_ok" 3 15 "int1" `979 
V G "GPGGA_ok" 3 15 "int1" `980 
V G "char_number" 3 16 "uint8_t" `981 
V G "SentenceType" 3 16 "uint8_t" `982 
V G "Term" 3 16 "uint8_t" `983 
V G "sentence" 3 17 "int8[6]" `984 
V G "rawTime" 3 17 "int8[11]" `985 
V G "rawDate" 3 17 "int8[7]" `986 
V G "rawSpeed" 3 17 "int8[6]" `987 
V G "rawCourse" 3 17 "int8[6]" `988 
V G "rawSatellites" 3 17 "int8[3]" `989 
V G "rawLatitude" 3 18 "int8[13]" `990 
V G "rawLongitude" 3 18 "int8[13]" `991 
V G "rawAltitude" 3 18 "int8[7]" `992 
V G "buffer" 3 18 "int8[12]" `993 
V L "str1" 3 20 "*int8" `995 
V L "str2" 3 20 "*int8" `996 
V L "dir" 3 20 "int8" `997 
F G "stringcpy" 3 20 "void(*int8 str1,*int8 str2,int8=0 dir)" `994 
V L "chr" 3 21 "uint8_t" `999 
F G "GPSRead" 3 27 "int8()" `1000 
V L "c" 3 28 "uint8_t" `1001 
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
C L "GPSRead" 3 31 1 "FUNCTION"
F G "GPSSecond" 3 123 "uint8_t()" `1005 
F G "GPSMinute" 3 126 "uint8_t()" `1006 
F G "GPSHour" 3 129 "uint8_t()" `1007 
F G "GPSDay" 3 133 "uint8_t()" `1008 
F G "GPSMonth" 3 136 "uint8_t()" `1009 
F G "GPSyear" 3 139 "uint8_t()" `1010 
V L "term_" 3 143 "*int8" `1012 
F G "parse_rawDegree" 3 143 "float(*int8 term_)" `1011 
V L "term_value" 3 144 "float" `1013 
V L "term_dec" 3 145 "int16_t" `1014 
F G "Latitude" 3 151 "float()" `1019 
F G "Longitude" 3 155 "float()" `1020 
F G "Altitude" 3 159 "float()" `1021 
F G "Satellites" 3 163 "uint8_t()" `1022 
F G "Speed" 3 167 "float()" `1023 
F G "Course" 3 171 "float()" `1024 
D G "__TIME_H__" 9 91 ""
D G "_STDLIBM" 10 14 ""
T G "node_t" 10 29 "{int16 size,int16 next}" `1029 
D G "debug_stdlibm" 10 38 "(s)"
D G "_MEMMGMT_CSIZE" 11 12 "32768"
D G "_MEMMGMT_POS" 11 13 "15"
V L "size" 11 22 "int16" `1031 
V L "ptr" 11 22 "*node_t" `1032  "create node at given location"
F G "create_node" 11 23 "*node_t(int16 size,*node_t ptr)" `1030 
V L "result" 11 24 "*node_t" `1033 
V L "node" 11 30 "*node_t" `1035 
V L "size" 11 30 "int16" `1036  "update the size of given node"
F G "update_node" 11 31 "void(*node_t node,int16 size)" `1034 
C L "insert_node_after" 11 2 2 "FUNCTION"
V L "place" 11 36 "*node_t" `1038 
V L "node" 11 36 "*node_t" `1039  "place the node after another given node"
F G "insert_node_after" 11 37 "void(*node_t place,*node_t node)" `1037 
V L "node" 11 47 "*node_t" `1041 
F G "remove_node" 11 47 "void(*node_t node)" `1040  "remove the given node from the memlist"
V L "ptr" 11 48 "*node_t" `1042 
F G "traverse" 10 58 "void()" `1043 
V L "node" 10 59 "*node_t" `1044 
V L "temp" 10 59 "*node_t" `1045 
V L "nsize" 10 60 "int16" `1046 
V L "nextsize" 10 60 "int16" `1047 
C L "traverse" 10 72 1 "FUNCTION"
C L "traverse" 10 72 1 "FUNCTION"
V L "size" 10 99 "int16" `1049 
F G "malloc" 10 100 "*int8(int16 size)" `1048 
V L "node" 10 101 "*node_t" `1050 
V L "new" 10 101 "*node_t" `1051 
V L "nsize" 10 102 "int16" `1052 
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
C L "malloc" 10 72 1 "FUNCTION"
V L "nmemb" 10 150 "int16" `1054 
V L "size" 10 150 "int16" `1055 
F G "calloc" 10 151 "*int8(int16 nmemb,int16 size)" `1053 
V L "node" 10 152 "*node_t" `1056 
V L "new" 10 152 "*node_t" `1057 
V L "nsize" 10 153 "int16" `1058 
V L "resize" 10 153 "int16" `1059 
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
C L "calloc" 10 72 1 "FUNCTION"
V L "ptr" 10 198 "*int8" `1065 
F G "free" 10 199 "void(*int8 ptr)" `1064 
V L "node" 10 200 "*node_t" `1066 
V L "nsize" 10 201 "int16" `1067 
C L "free" 10 72 1 "FUNCTION"
C L "free" 10 72 1 "FUNCTION"
C L "free" 10 72 1 "FUNCTION"
V L "ptr" 10 229 "*int8" `1069 
V L "size" 10 229 "int16" `1070 
F G "realloc" 10 230 "*int8(*int8 ptr,int16 size)" `1068 
V L "node" 10 231 "*node_t" `1071 
V L "new" 10 231 "*node_t" `1072 
V L "temp" 10 231 "*node_t" `1073 
V L "nsize" 10 232 "int16" `1074 
V L "nextsize" 10 232 "int16" `1075 
V L "newptr" 10 233 "*int8" `1076 
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
C L "realloc" 10 72 1 "FUNCTION"
T G "time_t" 9 96 "sint32" `1077 
T G "clock_t" 9 97 "int32" `1078 
E G "SUNDAY" 9 102 "0" `1080 
E G "MONDAY" 9 103 "1" `1081 
E G "TUESDAY" 9 104 "2" `1082 
E G "WEDNESDAY" 9 105 "3" `1083 
E G "THURSDAY" 9 106 "4" `1084 
E G "FRIDAY" 9 107 "5" `1085 
E G "SATURDAY" 9 108 "6" `1086 
T G "Weekday" 9 108 "" `1087 
E G "JANUARY" 9 113 "0" `1089 
E G "FEBRUARY" 9 114 "1" `1090 
E G "MARCH" 9 115 "2" `1091 
E G "APRIL" 9 116 "3" `1092 
E G "MAY" 9 117 "4" `1093 
E G "JUNE" 9 118 "5" `1094 
E G "JULY" 9 119 "6" `1095 
E G "AUGUST" 9 120 "7" `1096 
E G "SEPTEMBER" 9 121 "8" `1097 
E G "OCTOBER" 9 122 "9" `1098 
E G "NOVEMBER" 9 123 "10" `1099 
E G "DECEMBER" 9 124 "11" `1100 
T G "Month" 9 124 "" `1101 
T G "struct_tm" 9 136 "{int8 tm_sec,int8 tm_min,int8 tm_hour,int8 tm_mday,Month tm_mon,int16 tm_year,Weekday tm_wday,int16 tm_yday}" `1111  "Functions *"
f G "clock" 9 140 "clock_t()" `1112 
V L "timer" 9 141 "*time_t" `1114 
f G "time" 9 141 "time_t(*time_t timer)" `1113 
V L "later" 9 142 "time_t" `1116 
V L "earlier" 9 142 "time_t" `1117 
f G "difftime" 9 142 "sint32(time_t later,time_t earlier)" `1115 
V L "timeT" 9 143 "*struct_tm" `1119 
f G "mktime" 9 143 "time_t(*struct_tm timeT)" `1118 
V L "timeptr" 9 145 "*struct_tm" `1121 
V L "szTime" 9 145 "*int8" `1122 
f G "asctime" 9 145 "*int8(*struct_tm timeptr,*int8 szTime)" `1120 
V L "timer" 9 146 "*time_t" `1124 
V L "szTime" 9 146 "*int8" `1125 
f G "ctime" 9 146 "*int8(*time_t timer,*int8 szTime)" `1123 
V L "timer" 9 147 "*time_t" `1127 
f G "localtime" 9 147 "*struct_tm(*time_t timer)" `1126 
V L "nTime" 9 148 "*struct_tm" `1129 
f G "SetTime" 9 148 "void(*struct_tm nTime)" `1128 
V L "sTime" 9 149 "time_t" `1131 
f G "SetTimeSec" 9 149 "void(time_t sTime)" `1130 
V L "pRetTm" 9 150 "*struct_tm" `1133 
f G "GetTime" 9 150 "void(*struct_tm pRetTm)" `1132 
f G "TimeInit" 9 151 "void()" `1134  "/                                                                     ///"
D G "__TIME_C__" 12 19 ""
C L "TimeInit" 12 3 1 "FUNCTION"
V L "Month" 12 23 "int8" `1136 
V L "IsLeapYear" 12 23 "int8" `1137 
F G "DaysInMonth" 12 24 "int8(int8 Month,int8 IsLeapYear)" `1135 
C L "DaysInMonth" 12 3 1 "FUNCTION"
C L "WeekdayAbbreviations" 12 3 1 "FUNCTION"
V L "day" 12 55 "int8" `1139 
V L "wString" 12 55 "*int8" `1140 
F G "WeekdayAbbreviations" 12 56 "void(int8 day,*int8 wString)" `1138 
C L "MonthAbbreviations" 12 3 1 "FUNCTION"
V L "Month" 12 95 "int8" `1150 
V L "mString" 12 95 "*int8" `1151 
F G "MonthAbbreviations" 12 96 "void(int8 Month,*int8 mString)" `1149 
C L "LeapYear" 12 3 1 "FUNCTION"
C L "LeapYear" 12 152 1 "*"
C L "LeapYear" 12 152 1 "*"
C L "LeapYear" 12 152 1 "*"
C L "LeapYear" 12 152 1 "*"
V L "year" 12 158 "int16" `1166 
F G "LeapYear" 12 159 "int8(int16 year)" `1165 
C L "difftime" 12 152 1 "FUNCTION"
C L "difftime" 12 167 1 "*"
V L "later" 12 170 "time_t" `1116 
V L "earlier" 12 170 "time_t" `1169 
F G "difftime" 12 171 "sint32(time_t later,time_t earlier)" `1115 
C L "mktime" 12 167 1 "FUNCTION"
C L "mktime" 12 175 1 "*"
V L "timeT" 12 178 "*struct_tm" `1168 
F G "mktime" 12 179 "time_t(*struct_tm timeT)" `1118 
V L "unixTime" 12 180 "time_t" `1167 
V L "IsLeapYear" 12 181 "int1" `1168 
V L "i" 12 182 "int16" `1169 
C L "mktime" 12 175 1 "FUNCTION"
C L "mktime" 12 175 1 "FUNCTION"
C L "mktime" 12 175 1 "FUNCTION"
C L "mktime" 12 175 1 "FUNCTION"
C L "asctime" 12 175 1 "FUNCTION"
C L "asctime" 12 236 1 "*"
V L "timeptr" 12 239 "*struct_tm" `1121 
V L "szTime" 12 239 "*int8" `1175 
F G "asctime" 12 240 "*int8(*struct_tm timeptr,*int8 szTime)" `1120 
V L "szDay" 12 241 "int8[8]" `1173 
V L "szMon" 12 242 "int8[8]" `1174 
C L "ctime" 12 236 1 "FUNCTION"
C L "ctime" 12 259 1 "*"
V L "timer" 12 262 "*time_t" `1124 
V L "szTime" 12 262 "*int8" `1190 
F G "ctime" 12 263 "*int8(*time_t timer,*int8 szTime)" `1123 
V G "g_lTime" 12 268 "struct_tm" `1188  "Converts the given calendar time (in seconds) to local time"
C L "localtime" 12 270 1 "*"
C L "localtime" 12 270 1 "*"
V L "timer" 12 274 "*time_t" `1190 
F G "localtime" 12 275 "*struct_tm(*time_t timer)" `1126 
V L "timeCounter" 12 276 "time_t" `1189 
V L "done" 12 277 "int1" `1190 
V L "IsLeapYear" 12 278 "int1" `1191 
C L "localtime" 12 270 1 "FUNCTION"
C L "localtime" 12 270 1 "FUNCTION"
C L "localtime" 12 270 1 "FUNCTION"
C L "localtime" 12 270 1 "FUNCTION"
C L "localtime" 12 270 1 "FUNCTION"
C L "localtime" 12 270 1 "FUNCTION"
C L "localtime" 12 270 1 "FUNCTION"
D G "MATH_H" 13 30 ""
D G "PI" 13 35 "3.1415926535897932"
D G "SQRT2" 13 38 "1.4142135623730950"
C L "CEIL_FLOOR" 13 2 3 "FUNCTION"
V L "x" 13 45 "float" `1193 
V L "n" 13 45 "int8" `1194 
F G "CEIL_FLOOR" 13 46 "float(float x,int8 n)" `1192 
V L "y" 13 47 "float" `1195 
V L "res" 13 47 "float" `1196 
V L "l" 13 48 "int16" `1197 
V L "s" 13 49 "int1" `1198 
C L "floor" 13 2 5 "FUNCTION"
V L "x" 13 207 "float" `1203 
F G "floor" 13 208 "float(float x)" `1202 
C L "ceil" 13 2 5 "FUNCTION"
V L "x" 13 233 "float" `1205 
F G "ceil" 13 234 "float(float x)" `1204 
D G "fabs" 13 259 "abs"
C L "fmod" 13 2 6 "FUNCTION"
V L "x" 13 271 "float" `1207 
V L "y" 13 271 "float" `1208 
F G "fmod" 13 272 "float(float x,float y)" `1206 
V L "i" 13 273 "float" `1209 
D G "LN2" 13 334 "0.6931471805599453"
D G "LN2_INV" 13 335 "1.4426950408889634073"
V G "pe" 13 337 "[6]" `1210 
V L "x" 13 341 "float" `1214 
F G "exp" 13 342 "float(float x)" `1213 
V L "y" 13 343 "float" `1215 
V L "res" 13 343 "float" `1216 
V L "r" 13 343 "float" `1217 
V L "n" 13 347 "sint8" `1218 
V L "s" 13 348 "int1" `1219 
C L "exp" 13 2 1 "FUNCTION"
V G "pl" 13 525 "[4]" `1220 
V G "ql" 13 526 "[4]" `1223 
C L "log" 13 2 3 "FUNCTION"
V L "x" 13 534 "float" `1227 
F G "log" 13 535 "float(float x)" `1226 
V L "y" 13 536 "float" `1228 
V L "res" 13 536 "float" `1229 
V L "r" 13 536 "float" `1230 
V L "y2" 13 536 "float" `1231 
V L "n" 13 540 "sint8" `1232 
C L "log" 13 2 1 "FUNCTION"
D G "LN10" 13 758 "2.3025850929940456"
D G "LN10_INV" 13 759 "0.4342944819032518276"
C L "log10" 13 2 3 "FUNCTION"
V L "x" 13 767 "float" `1234 
F G "log10" 13 768 "float(float x)" `1233 
V L "r" 13 769 "float" `1235 
C L "modf" 13 2 8 "FUNCTION"
V L "value" 13 808 "float" `1237 
V L "iptr" 13 808 "*float" `1238 
F G "modf" 13 809 "float(float value,*float iptr)" `1236 
C L "pwr" 13 2 6 "FUNCTION"
V L "x" 13 836 "float" `1240 
V L "y" 13 836 "float" `1241 
F G "pwr" 13 837 "float(float x,float y)" `1239 
C L "pow" 13 2 7 "FUNCTION"
V L "x" 13 899 "float" `1243 
V L "y" 13 899 "float" `1244 
F G "pow" 13 900 "float(float x,float y)" `1242 
C L "sqrt" 13 2 5 "FUNCTION"
V L "x" 13 960 "float" `1246 
F G "sqrt" 13 961 "float(float x)" `1245 
V L "y" 13 962 "float" `1247 
V L "res" 13 962 "float" `1248 
V L "p" 13 966 "*int8" `1249 
D G "PI_DIV_BY_TWO_INV" 13 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 13 1159 "1.5707963267948966"
D G "TWOBYPI" 13 1163 "0.6366197723675813"
C L "cos" 13 2 3 "FUNCTION"
V L "x" 13 1171 "float" `1251 
F G "cos" 13 1172 "float(float x)" `1250 
V L "y" 13 1173 "float" `1252 
V L "t" 13 1173 "float" `1253 
V L "t2" 13 1173 "float" `1254 
V L "quad" 13 1174 "int8" `1255 
V L "i" 13 1174 "int8" `1256 
V L "frac" 13 1175 "float" `1257 
V L "p" 13 1176 "float[5]" `1258  "by the series definition for cosine"
C L "cos" 13 2 1 "FUNCTION"
C L "cos" 13 2 2 "FUNCTION"
C L "cos" 13 2 1 "FUNCTION"
C L "cos" 13 2 1 "FUNCTION"
C L "cos" 13 2 1 "FUNCTION"
C L "cos" 13 2 1 "FUNCTION"
C L "cos" 13 2 1 "FUNCTION"
C L "cos" 13 2 1 "FUNCTION"
C L "sin" 13 2 5 "FUNCTION"
V L "x" 13 1312 "float" `1260 
F G "sin" 13 1313 "float(float x)" `1259 
C L "tan" 13 2 5 "FUNCTION"
V L "x" 13 1338 "float" `1262 
F G "tan" 13 1339 "float(float x)" `1261 
V L "c" 13 1340 "float" `1263 
V L "s" 13 1340 "float" `1264 
V G "pas" 13 1378 "[3]" `1265 
V G "qas" 13 1379 "[3]" `1268 
V L "x" 13 1381 "float" `1272 
V L "n" 13 1381 "int8" `1273 
F G "ASIN_COS" 13 1382 "float(float x,int8 n)" `1271 
V L "y" 13 1383 "float" `1274 
V L "res" 13 1383 "float" `1275 
V L "r" 13 1383 "float" `1276 
V L "y2" 13 1383 "float" `1277 
V L "s" 13 1384 "int1" `1278 
C L "ASIN_COS" 13 2 1 "FUNCTION"
C L "ASIN_COS" 13 2 1 "FUNCTION"
C L "asin" 13 2 5 "FUNCTION"
V L "x" 13 1539 "float" `1280 
F G "asin" 13 1540 "float(float x)" `1279 
V L "r" 13 1541 "float" `1281 
C L "acos" 13 2 5 "FUNCTION"
V L "x" 13 1573 "float" `1283 
F G "acos" 13 1574 "float(float x)" `1282 
V L "r" 13 1575 "float" `1284 
V G "pat" 13 1601 "[4]" `1285 
V G "qat" 13 1602 "[4]" `1288 
C L "atan" 13 2 3 "FUNCTION"
V L "x" 13 1610 "float" `1292 
F G "atan" 13 1611 "float(float x)" `1291 
V L "y" 13 1612 "float" `1293 
V L "res" 13 1612 "float" `1294 
V L "r" 13 1612 "float" `1295 
V L "s" 13 1613 "int1" `1296 
V L "flag" 13 1613 "int1" `1297 
C L "atan" 13 2 1 "FUNCTION"
C L "atan2" 13 2 7 "FUNCTION"
V L "y" 13 1753 "float" `1299 
V L "x" 13 1753 "float" `1300 
F G "atan2" 13 1754 "float(float y,float x)" `1298 
V L "z" 13 1755 "float" `1301 
V L "sign" 13 1756 "int1" `1302 
V L "quad" 13 1757 "int8" `1303 
C L "atan2" 13 2 1 "FUNCTION"
C L "atan2" 13 2 1 "FUNCTION"
C L "cosh" 13 2 7 "FUNCTION"
V L "x" 13 1975 "float" `1306 
F G "cosh" 13 1976 "float(float x)" `1305 
C L "sinh" 13 2 6 "FUNCTION"
V L "x" 13 2002 "float" `1308 
F G "sinh" 13 2003 "float(float x)" `1307 
C L "tanh" 13 2 6 "FUNCTION"
V L "x" 13 2032 "float" `1310 
F G "tanh" 13 2033 "float(float x)" `1309 
D G "LOG2" 13 2062 ".30102999566398119521"
D G "LOG2_INV" 13 2063 "3.32192809488736234787"
V L "x" 13 2064 "float" `1312 
V L "exp" 13 2064 "*sint8" `1313 
F G "frexp" 13 2065 "float(float x,*sint8 exp)" `1311 
V L "res" 13 2066 "float" `1314 
V L "sign" 13 2067 "int1" `1315 
C L "ldexp" 13 2 6 "FUNCTION"
V L "value" 13 2209 "float" `1317 
V L "exp" 13 2209 "sint8" `1318 
F G "ldexp" 13 2210 "float(float value,sint8 exp)" `1316 
V G "lat" 0 25 "float" `1319 
V G "lon" 0 25 "float" `1320 
V G "eti" 0 25 "float" `1321 
V G "dec1" 0 25 "float" `1322 
V G "to" 0 25 "float" `1323 
V G "ws" 0 25 "float" `1324 
V G "tc1" 0 25 "float" `1325 
V G "orto" 0 25 "float" `1326 
V G "horapuesta" 0 25 "float" `1327 
V G "horaorto" 0 25 "float" `1328 
V G "horaocaso" 0 26 "float" `1329 
V G "horareal" 0 26 "float" `1330 
V G "ocaso" 0 26 "float" `1331 
V G "horasalida" 0 26 "float" `1332 
V G "tst" 0 26 "float" `1333 
V G "azimut" 0 26 "float" `1334 
V G "ha" 0 26 "float" `1335 
V G "zenit" 0 27 "float" `1336 
V G "haa" 0 27 "float" `1337 
V G "da1" 0 27 "float" `1338 
V G "n1" 0 27 "float" `1339 
V G "N2" 0 27 "float" `1340 
V G "N3" 0 27 "float" `1341 
V G "adia1" 0 27 "float" `1342 
V G "hor" 0 28 "float" `1343 
V G "min" 0 28 "float" `1344 
V G "sec" 0 28 "float" `1345 
V G "horare" 0 28 "float" `1346 
V G "hora" 0 29 "float" `1347 
V G "minutos" 0 29 "float" `1348 
V G "segundos" 0 29 "float" `1349 
V G "x" 0 29 "float" `1350 
V G "dia" 0 29 "float" `1351 
V G "mes" 0 29 "float" `1352 
V G "year" 0 29 "float" `1353  "variable para la libreria de fechas"
V G "unix_time" 0 31 "time_t" `1354 
V G "utc_time" 0 32 "struct_tm" `1355 
V G "my_time" 0 32 "*struct_tm" `1356  "other variables"
V G "time_c" 0 34 "int8[1]" `1357 
V G "date_c" 0 35 "int8[1]" `1358 
V G "datee_c" 0 37 "int8[1]" `1359 
V G "dia_c" 0 38 "int8[1]" `1360 
V G "ano_c" 0 39 "int8[1]" `1361 
V G "hora_c" 0 40 "int8[1]" `1362 
V G "min_c" 0 41 "int8[1]" `1363 
V G "seg_c" 0 42 "int8[1]" `1364 
C L "print_wday" 0 37 1 "FUNCTION"
V L "wday" 0 43 "int8" `1366 
F G "print_wday" 0 43 "void(int8 wday)" `1365 
F G "MAIN" 0 56 "void()" `1375  "PROGRAMA PRINCIPAL"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 2 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 3 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
