CCS PCH C Compiler, Version 5.015, 5967               07-ene.-21 16:14

               Filename:   D:\escuela\tesis\PID + PWM4\com\PID + PWM4.lst

               ROM used:   328 bytes (1%)
                           Largest free fragment is 32440
               RAM used:   16 (1%) at main() level
                           16 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0004
....................  
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device ADC=10  
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,PUT,BROWNOUT,INTRC_IO   
.................... #use delay(clock=4000000)   
....................  
.................... int16 duty=0; 
.................... int16 temp,a,b,c; 
.................... int Timer2,Poscaler; 
.................... double map(float valor, float entradaMin, float entradaMax, float salidaMin, float salidaMax)     
.................... {                                 
....................     return ((((valor-entradaMin)*(salidaMax-salidaMin))/(entradaMax-entradaMin))+salidaMin);  
.................... }   
.................... void main() {  
0004:  CLRF   FF8
0006:  BCF    FD0.7
0008:  MOVLW  60
000A:  MOVWF  FD3
000C:  MOVF   FD3,W
000E:  CLRF   05
0010:  CLRF   04
0012:  MOVF   FC1,W
0014:  ANDLW  C0
0016:  IORLW  0F
0018:  MOVWF  FC1
001A:  MOVLW  07
001C:  MOVWF  FB4
....................    // Generemos una Señal cuadrada de 1 Khz 
....................    Timer2=249;    //Se carga timer 2 con 249 como lo vimos en la pagina 
001E:  MOVLW  F9
0020:  MOVWF  0E
....................    //Preescaler=4;  //Preescaler solo puede tomar valores de: 1 - 4 - 16 
....................    //Para el preescaler colocamos "t2_div_by_4" 
....................    Poscaler=1;  //Preescaler solo puede tomar valores de: 1 
0022:  MOVLW  01
0024:  MOVWF  0F
....................     
....................    setup_timer_2(t2_div_by_4,Timer2,Poscaler);   //Configuracion de Timer 2 para establecer frec. PWM a 1kHz 
0026:  SUBWF  0F,W
0028:  MOVWF  01
002A:  RLCF   01,W
002C:  MOVWF  00
002E:  RLCF   00,F
0030:  RLCF   00,F
0032:  MOVLW  F8
0034:  ANDWF  00,F
0036:  MOVF   00,W
0038:  IORLW  05
003A:  MOVWF  FCA
003C:  MOVFF  0E,FCB
....................    setup_ccp1(ccp_pwm);                //Configurar modulo CCP1 en modo PWM 
0040:  BCF    F94.2
0042:  BCF    F8B.2
0044:  MOVLW  0C
0046:  MOVWF  FBD
0048:  CLRF   FB7
004A:  CLRF   FB6
....................    setup_ccp2(ccp_pwm);                //Configurar modulo CCP1 en modo PWM 
004C:  BCF    F94.1
004E:  BCF    F8B.1
0050:  MOVWF  FBA
....................    setup_adc_ports(all_analog);        //Configurar ADC configuracion de los puertos que funcionan en analogico  
0052:  MOVF   FC1,W
0054:  ANDLW  C0
0056:  MOVWF  FC1
....................    setup_adc(adc_clock_internal); 
0058:  MOVF   FC0,W
005A:  ANDLW  C0
005C:  IORLW  07
005E:  MOVWF  FC0
0060:  BSF    FC0.7
0062:  BSF    FC2.0
....................    while(true){ 
....................           
....................             set_adc_channel(0);        //selecciona el puesto en el que se ejecutarn las sigientes instruciones  
0064:  MOVLW  00
0066:  MOVWF  01
0068:  MOVF   FC2,W
006A:  ANDLW  C3
006C:  IORWF  01,W
006E:  MOVWF  FC2
....................             delay_us(10);        
0070:  MOVLW  02
0072:  MOVWF  00
0074:  DECFSZ 00,F
0076:  BRA    0074
0078:  BRA    007A
007A:  NOP   
....................             a=read_adc();               //leer 
007C:  BSF    FC2.1
007E:  BTFSC  FC2.1
0080:  BRA    007E
0082:  MOVFF  FC3,08
0086:  MOVFF  FC4,09
....................              
....................  
....................  
....................             set_adc_channel(1);        //selecciona el puesto en el que se ejecutarn las sigientes instruciones  
008A:  MOVLW  04
008C:  MOVWF  01
008E:  MOVF   FC2,W
0090:  ANDLW  C3
0092:  IORWF  01,W
0094:  MOVWF  FC2
....................             delay_us(10);        
0096:  MOVLW  02
0098:  MOVWF  00
009A:  DECFSZ 00,F
009C:  BRA    009A
009E:  BRA    00A0
00A0:  NOP   
....................             b=read_adc();               //leer 
00A2:  BSF    FC2.1
00A4:  BTFSC  FC2.1
00A6:  BRA    00A4
00A8:  MOVFF  FC3,0A
00AC:  MOVFF  FC4,0B
....................              
....................  
....................  
....................             //realiza una comprobacion de el sentido de giro para configurar el pulso pwm, y evitar errores de ejecuion  
....................             if (a>b) { 
00B0:  MOVF   0B,W
00B2:  SUBWF  09,W
00B4:  BNC   0128
00B6:  BNZ   00BE
00B8:  MOVF   08,W
00BA:  SUBWF  0A,W
00BC:  BC    0128
....................                output_high(PIN_B0);         //led indicador de sentido de giro  
00BE:  BCF    F93.0
00C0:  BSF    F8A.0
....................                     //setup_ccp1(CCP_OFF);             // CCP1 OFF 
....................                     delay_us(10);                   // tiempo de espera para evitar errores en el modulo  
00C2:  MOVLW  02
00C4:  MOVWF  00
00C6:  DECFSZ 00,F
00C8:  BRA    00C6
00CA:  BRA    00CC
00CC:  NOP   
....................                     //setup_ccp1(CCP_PWM | CCP_PWM_FULL_BRIDGE);                     
....................                     c=b-a; 
00CE:  MOVF   08,W
00D0:  SUBWF  0A,W
00D2:  MOVWF  0C
00D4:  MOVF   09,W
00D6:  SUBWFB 0B,W
00D8:  MOVWF  0D
....................                     set_pwm1_duty(b);           //write salida de señal PWM  
00DA:  MOVFF  0B,02
00DE:  MOVFF  0A,01
00E2:  RRCF   02,F
00E4:  RRCF   01,F
00E6:  RRCF   02,F
00E8:  RRCF   01,F
00EA:  RRCF   02,F
00EC:  MOVFF  01,FBE
00F0:  RRCF   02,F
00F2:  RRCF   02,W
00F4:  ANDLW  30
00F6:  MOVWF  00
00F8:  MOVF   FBD,W
00FA:  ANDLW  CF
00FC:  IORWF  00,W
00FE:  MOVWF  FBD
....................                     set_pwm2_duty(a);           //write salida de señal PWM  
0100:  MOVFF  09,02
0104:  MOVFF  08,01
0108:  RRCF   02,F
010A:  RRCF   01,F
010C:  RRCF   02,F
010E:  RRCF   01,F
0110:  RRCF   02,F
0112:  MOVFF  01,FBB
0116:  RRCF   02,F
0118:  RRCF   02,W
011A:  ANDLW  30
011C:  MOVWF  00
011E:  MOVF   FBA,W
0120:  ANDLW  CF
0122:  IORWF  00,W
0124:  MOVWF  FBA
....................             }else{output_low(PIN_B0);} 
0126:  BRA    012C
0128:  BCF    F93.0
012A:  BCF    F8A.0
....................             if (a<b) { 
012C:  MOVF   09,W
012E:  SUBWF  0B,W
0130:  BNC   0140
0132:  BNZ   013A
0134:  MOVF   0A,W
0136:  SUBWF  08,W
0138:  BC    0140
....................                output_high(PIN_B1); 
013A:  BCF    F93.1
013C:  BSF    F8A.1
....................             }else{output_low(PIN_B1);} 
013E:  BRA    0144
0140:  BCF    F93.1
0142:  BCF    F8A.1
0144:  BRA    0064
....................  
....................      
....................        
....................           
....................    } 
.................... } 
0146:  SLEEP 

Configuration Fuses:
   Word  1: C83F   PLL12 CPUDIV4 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
