
#include <18F4520.h>
#device ADC=10 
#fuses XT,NOWDT,NOPROTECT,NOLVP,PUT,BROWNOUT,INTRC_IO  
#use delay(clock=4000000)  
#standar_io(a);
//configuracion entradas/salidas
//entradas
    //[AN0]setpoint
    //[AN1]posicion real 
    //[]servo motor 
//salidas
    //control puenta H
        //Grupos de rotacion 
        //A
            //[P1A][RC2]
            //[P1D][RD7]
        //B
            //[P1C][RD6]
            //[P1B][RD5]


//#########     lecturas
int16 setpoint;
int16 posicion_real;
//#########     PID
int16 duty=0;
int Timer2,Poscaler;
int16 a,b,c;            //variables temporales
int16 t=1;              //periodo de muestreo 
int16 e[100];           //error
int16 k=0;              //contrador de muestras
int16 u[100];            //Salidas
//#########    ganancias
int16 kd=1;               //Derivativa
int16 ki=0.5;               //integral
int16 kp=0.5;               //proporcional
int16 res,conversion;
long map(long x, long in_min, long in_max, long out_min, long out_max){
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
void main() { 
   // Generemos una SeÃ±al cuadrada de 1 Khz
   Timer2=249;    //Se carga timer 2 con 249 como lo vimos en la pagina
   //Preescaler=4;  //Preescaler solo puede tomar valores de: 1 - 4 - 16
   //Para el preescaler colocamos "t2_div_by_4"
   Poscaler=1;  //Preescaler solo puede tomar valores de: 1
   
   setup_timer_2(t2_div_by_4,Timer2,Poscaler);   //Configuracion de Timer 2 para establecer frec. PWM a 1kHz
   setup_ccp1(ccp_pwm);                //Configurar modulo CCP1 en modo PWM
   setup_adc_ports(all_analog);        //Configurar ADC configuracion de los puertos que funcionan en analogico 
   setup_adc(adc_clock_internal);
   while(1){
       
        //muestreo
            //lectura del set point
                set_adc_channel(0);            //selecciona el puesto en el que se ejecutarn las sigientes instruciones 
                delay_us(100);       
                setpoint=read_adc();
            //lectura del set point
                set_adc_channel(1);            //selecciona el puesto en el que se ejecutarn las sigientes instruciones 
                delay_us(100);       
                posicion_real=read_adc();
        //duty=read_adc();               //leer
        //muestreo
            res=posicion_real-(-1*setpoint);
            //conversion=map(long x, long in_min, long in_max, 0,255)
            if(res>0){
                output_b(0);  
            }
                    
        //salidas 
        /*
            if(setpoint>posicion_real){
                setup_ccp1(CCP_OFF);             // CCP1 OFF
                delay_us(10);
                res=posicion_real-setpoint;
                conversion=res;
                setup_ccp1(CCP_PWM | CCP_PWM_FULL_BRIDGE); // Forward output mode
            }else
            if(setpoint<posicion_real){
                setup_ccp1(CCP_OFF);             // CCP1 OFF
                delay_us(10);
                res=setpoint-posicion_real;
                conversion=res;
                //setup_ccp1(CCP_PWM | CCP_PWM_FULL_BRIDGE_REV); // Reverse output mode
            }
            */
            set_pwm1_duty(res);           //write salida
            
        //protecion contra desvordamiento de variables 
        if(k>=20){
            k=0; 
            for (int i = 0; i <100; i++){
                e[i]=0;
            }
            
        }
        
       
   }
}